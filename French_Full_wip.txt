=== components/Output 1 ===

$59663530139004* Sortie 1 Bit


=== trans/panel_program_1_output ===

$31398283096964* Sortie


=== rpg/maps/overworld/kligara ===

$78685013556649*
Mon boulot c'est rester vissé devant
les écrans de contrôle du réacteur


=== rpg/maps/overworld/control_panel ===

$94056033073339*
Le capitaine me jettera
par-dessus bord si je touche à ça
$20128423531070* Panneau de contrôle


=== trans/level_registers_description ===

$73800316874022* [center]Construis le circuit qui correspond au code demandé[/center]


=== rpg/maps/overworld/water ===

$82402577990931* Eau


=== components/Output1Car ===

$12896765714603* Retenue


=== components/FullAdder ===

$57559382166174* Additionne 3 bits et sort la somme et la retenue
$77669928463861* Additionneur complet


=== trans/panel_car_output_0 ===

$21449898267446* Retenue :


=== misc/options ===

$49251062339706* Options


=== misc/ide_delete_program ===

$30480928296639* Es-tu sûr de vouloir supprimer le programme : {program} ?
$87279416580516* Oui


=== misc/io_label_change ===

$50497979766012* Etiquette de texte


=== levels/turing_complete ===

$15326252036920* Jusqu'à maintenant, le code pouvait seulement influencer la mémoire. Maintenant la mémoire doit pouvoir influencer le code. Avec l'ajout de la logique conditionnelle, ton ordinateur va pouvoir faire tourner n'importe quel algorithme et pourra tout calculer.
$16583885726240* Bravo, tu as réussi ! Je pensais juste que t'étais un singe bizarre, pas poilu, mais t'as réussi à créer un vrai ordinateur ! INCROYABLE ! 
$10510746154639* Au premier cycle, le programme devrait charger l'adresse 1.
$10317244906317* Aucun programme trouvé.
$14587485007736* Jusqu'à maintenant, les programmes étaient limités à tourner dans l'ordre dans lequel ils étaient écrits, octet par octet.
$19649119273248*
La dernière chose que l'on doit rajouter est un mécanisme pour changer le compteur de programme avec des [INSTRUCTIONS] quand certaines conditions sont respectées.

Quand les deux deux bits les plus importants sont à [ON][ON], alors l'ordinateur sera en mode conditionnel. Dans ce mode, la valeur du registre 3 sera comparée avec une condition définie par les 3 bits les moins importants. Si la condition est vraie, le programme compteur prendra alors la valeur du registre 0.
Grâce à ce nouveau mode, tu pourras maintenant créer des boucles et sauter une ou plusieurs [INSTRUCTIONS].

Conditions:
[OFF] [OFF] [OFF] Jamais
[OFF] [OFF] [ON] Si [color=#e49f44]REG 3[/color] = 0
[OFF] [ON] [OFF] Si [color=#e49f44]REG 3[/color] < 0
[OFF] [ON] [ON] Si [color=#e49f44]REG 3[/color] ≤ 0 
[ON] [OFF] [OFF] Toujours
[ON] [OFF] [ON] Si [color=#e49f44]REG 3[/color] ≠ 0 
[ON] [ON] [OFF] Si [color=#e49f44]REG 3[/color] ≥ 0
[ON] [ON] [ON] Si [color=#e49f44]REG 3[/color] > 0

Ces conditions correspondent au composant que tu as sauvegardé dans l'atelier de composants.


=== rpg/maps/prison/snuffles ===

$38415939620256* Ouaf ouaf
$58496270566737* Renifleur
$97846640630713* Sang
$18282167453919* Ce bon vieux Renifleur


=== rpg/maps/unseen_fruit/wall_broke ===

$82933036983558* Mur endommagé


=== levels/Second Tick ===

$14355963067874* Activer la sortie au second cycle d'horloge.
$17526582195506* Comme tu sais ces tests visent à réaliser un ordinateur qui fonctionne.
$15726318553190* C'est ce qui explique que tu ne seras pas mangé à la fin.
$19277843280528*
 [color=#b72d41][b]TIP:[/b][/color] 
 Tu peux sélectionner un composant et ses pattes en double-cliquant dessus
$15296208528991* Les espèces capables de finir sont considérées comme légalement intelligentes.


=== trans/manual_text_console ===

$39093856809104*
Le composant terminal est un écran ASCII [color=#dd6576][url=RGB color]couleur[/url][/color] 80x24. Il doit être associé à une source mémoire à l'aide du bouton composant lié :
 [img=200]dialogue/manual/Console/link_state.png[/img]

Les modifications de la mémoire liée permettent de modifier le contenu du terminal. Dans le mode monochrome standard, chaque octet correspond à un caractère de l'écran. Cependant, la position du premier caractère peut être décalée en fonction de l'entrée du terminal. Cela permet par exemple d'implémenter le défilement.

Le terminal a aussi un mode couleur qui peut être activé sur le panneau :
[img=125]dialogue/manual/Console/color_mode.png[/img]

Dans ce mode chaque caractère est associé en plus à 2 groupes de 3 octets pour les [color=#dd6576][url=RGB color]couleurs RVB[/url][/color] de fond et de texte. Attention les caractères sont alignés sur 8 octets ce qui est plus pratique quand l'adressage de ta ROM ou RAM est en 64 bits. De plus, l'index peut rester le même dans les deux modes en passant la largeur de bande mémoire de 8 à 64 bits. 

Dans le mode couleur l'octet de poids faible est le caractère, les 3 octets suivants forment la couleur du texte et les 3 suivants la couleur de fond.


=== trans/level_tower_description ===

$19095794285423* Reconstitue la pyramide de disques radioactifs


=== trans/panel_lessu_description ===

$10492822526537* [center]Teste si Entrée 1 < Entrée 2[/center]


=== levels/component_factory ===

$14665712485657* Ce composant personnalisé ne peut pas être utilisé car il n'a aucune surface.
$17077079648771* Des composants peuvent être ajoutés, renommés ou supprimés en utilisant le système de sauvegarde du niveau.
$19551383617326*
Bienvenue dans l'atelier de composants, les schémas que tu crées ici pourront être utilisés comme composants dans les niveaux d'architecture.
Le composant importé aura le même comportement et son schéma définira sa forme.
$12516102012088* Ce composant n'a pas de forme définie et ne pourra pas être réutilisé. Placer des composants sur la carte pour définir sa forme.
$14712417427860* Comme ce niveau est un outil et pas un défi, tu peux revenir à la carte des niveaux pour continuer quand tu voudras.
$15549447390000* 2 composants d'entrée/sortie sont dans la même zone. Le composant personnalisé sera inutilisable car 2 pattes ne peuvent se chevaucher.


=== trans/panel_switch_input ===

$27545152958344* [right]Entrée[/right]


=== components/Register32 ===

$65405398199118* Mémoire 32 bits
$22031255978461* Registre 32 bits


=== trans/panel_maker16_input ===

$17253365231801*
[right]Octet 1
Octet 2[/right]


=== misc/ui_panel/outputs ===

$29350436761480* SORTIES


=== trans/component_panel_sprite_input_description ===

$76433786063719*
[b][color=#e49f44]Type Commande[/color][/b]
[code]0[/code] Aucune
[code]1[/code] [color=#e49f44]Charger le sprite (lutin)[/color]
[code]2[/code] [color=#e49f44]Définir la position[/color]


=== trans/manual_the_robot ===

$92896462984546* Le robot


=== trans/panel_program4_output ===

$30314861365347*
Sortie 1
Sortie 2
Sortie 3
Sortie 4


=== trans/panel_network_output_description ===

$44520675249142*
[b][color=#39aa49]Type d'événement[/color] (results)[/b]
[code]0[/code] Pas de nouvel événement
[code]1[/code] [color=#39aa49]Connexion entrante[/color] (ID Connexion, Port)
[code]2[/code] [color=#39aa49]Connexion effectuée[/color] 
[code]3[/code] [color=#39aa49]Réception de données[/color] (ID Connexion, Données, Longueur)
[code]4[/code] [color=#39aa49]Connexion fermée[/color] (ID Connexion / Code Erreur)


=== trans/rpg_complete_chest ===

$59394224080614* [center]Coffre de Tricksy[/center]


=== trans/manual_text_top_the_robot ===

$45646734925323*
L'écran montre le robot et son environnement

[img=430]dialogue/screen_fr.png[/img]


=== trans/panel_clock_input ===

$26264925364981* [right]Activer[/right]


=== trans/level_conditions_description ===

$62540112577327* [center]Quand la valeur vérifie la condition mets la sortie à [img]dialogue/on.png[/img], sinon mets-la à [img]dialogue/off.png[/img].[/center]


=== misc/ui_comment ===

$69987793052607* Commentaire de fil (Cliquer sur le fil)


=== levels/delay_level ===

$19986989895202*
Tous les composants ont un délai. Au niveau du schéma, le délai cumulé est déterminé par le chemin le plus lent. En pratique ça signifie qu'il faut paralléliser les choses.
Dans ce niveau tu vas devoir prouver que tu as compris ce concept.
$11246430085016* Le délai de propagation est visible en cliquant sur le sablier dans le coin supérieur droit.
$12817338693402* Le délai de tous les composants dérivent en fin de compte du délai de la porte NAND, qui a un délai de 2. Réalise un circuit ayant un délai de 6 et un coût NAND de 5.
$17854168097855* Vérifier


=== rpg/hat_man ===

$98505468673014* Bob à large bord
$31184066972544* Chapeau de Lutin
$35778552177922* Chapeau du Père Noël
$82997731204414* Prix intéressant
$96765749209775* J'aime ce chapeau
$97164370529682* Chapeau classique
$85998153437635*
Je dirai aux gens que je l'ai volé
à un policier  à Londres
$26278098578888* C'est qui ce Noël ?
$47773161384061* Ce chapeau est une mauvaise blague
$13294635391831* Chapeau de Pharaon
$82258891749699* Où est passé mon argent ???
$79556354428080* Casque de Gardien
$47713748239182* Reviens Robot
$87264083929605* Je me sens snob
$12006162361832* Yihaa
$35453270895749* Respecte mon autorité
$68242068712116* Casquette de Baseball
$93275531091074* Chapeau de Cowbot
$94489310827047* Je crois que ce chapeau est maudit
$30546444635339* Chapeau de Dame
$40995289760848* Meilleur Chapeau
$50407582286574* Casquette de Police
$60834004183919* Chapeau Melon
$13395135491753* Tue-moi maintenant


=== components/Mul16 ===

$49880767097125* Multiplie 2 entrées
$62247409328063* Multiplier


=== trans/panel_dual_load_input ===

$93092890899642*
[right]Lire
Écrire
Adresse
Écrire valeur
Lire 2
Adresse 2[/right]


=== trans/ide_memory_address ===

$93346467287938* Composants liés


=== trans/panel_register16_inputs ===

$96875261858960*
[right]Lire
Écrire
Écrire valeur[/right]


=== trans/options_pipette_wire ===

$96339976117958* Pipette à fil


=== trans/rpg_complete_flower ===

$15192250170799* [center]Dumio et Gruliette[/center]


=== trans/panel_maker32_input ===

$93209061270494*
[right]Octet 1
Octet 2
Octet 3
Octet 4[/right]


=== misc/add_assembly_64bit ===

$33233688912123* [center]Ajoute le code assembleur[/center]


=== trans/level_byte_xor_description ===

$44752799134543* XOR bit à bit


=== dialogue/schematic_hub/share_button ===

$72402014450423* [center]Téléchargement[/center]
$63199010304839* Partager


=== trans/panel_regred_input ===

$61209423072819*
[right]Lire
Écrire
Écrire valeur[/right]


=== components/Mux ===

$11168613697835* Alterne entre 2 valeurs
$22167405631310* Multiplexeur 8 bits


=== components/Switch32 ===

$70717074742809* Commutateur 32 bits
$93061034213009* Active/Désactive une valeur


=== trans/level_byte_adder_question3 ===

$88075700159266*
[right]Retenue en Entrée
Octet 1
Octet 2[/right]


=== trans/level_complete_wire_comments ===

$92673421413755*
[b]Commentaires de fil[/b]
[color=#cccccc][i]Ajouter des commentaires à tes fils.[/i][/color]


=== trans/panel_counter8_input ===

$50035967147203*
[right]Incrémenter / Remplacer
Remplacer la valeur[/right]


=== trans/schematic_new_folder_name ===

$86236104278688* Nouveau dossier


=== rpg/maps/overworld/brambert ===

$23133103699795*
Je travaille ici pour pouvoir économiser
pour acheter le Meilleur Chapeau


=== levels/Nor GATE ===

$11362258372706*
La plupart des créatures sur la Terre sont agressives et ne savent pas se concentrer.

Pour réussir, tu dois apprendre à raisonner, sans rien casser.


=== trans/level_complete_stats ===

$65428404547905* Stats


=== trans/panel_output_direction ===

$89612128414294* Sens de l'étiquette


=== misc/watchable_state ===

$58678516111149* Éditer les points d'observation


=== main_scripts/input ===

$10186190492148* Clique + ALT pour déplacer la tête de fil


=== levels/wide_instrucitons ===

$13709034294291* Mémorise lors des cycles pairs et envoie en sortie les deux octets lors des cycles impairs.
$17693995237077* Envoie en sortie les deux octets
$19068760748550* Envoie 0 en sortie à chaque cycle pair
$65009239162932* Les sorties correctes étaient {a} et {b}
$19203973423116* Réalise un circuit qui enregistre la sortie du programme lors des cycles pairs et envoie en sortie les deux octets lors des cycles impairs.
$17409169138995* Mémorise l'octet


=== components/Xnor64 ===

$64937916903935* XNOR bit à bit sur 2 valeurs
$47129074382309* XNOR 64 bits 


=== rpg/maps/overworld/griffith ===

$55209338960432*
Va à la ferme visqueuse
et récupère la gelée gluante
$96728313107159* Super tu as ramené la gelée
$96479154941553* Demain je vais aller skier
$22071068061213* 2 de plus et ça ira
$76381947526292* 4 doses de gelées devrait suffire
$79617816410767* Robot aide moi à finir le travail
$53961253609599*
Le tonneau sera servi
plus tard au dîner
$27173657446279* Quoi attends
$75126453723590*
Bien tu as ramené 3 doses
de gelée de la ferme visqueuse
$31359502586908*
J'ai déjà pris trop d'arrêts maladie
j'ai besoin d'une vrai bonne excuse
cette fois
$37703435616461* Une quête noble
$76778627086258*
Merci de ton aide
pour finir le travail
$95279523937415* encore 2 et ça le fait
$38680695249087*
Ensuite ajoute tout dans
le tonneau de ragoût
derrière le chef
à la cafétéria
10482244323050
Maintenant va porter ça dans
le tonneau de ragoût de la cuisine
derrière le chef
$10482244323050*
Maintenant apporte-le dans
le tonneau de ragoût
dans la cuisine
derrière le chef
$24977511637567*
Bien tu as ramené 1 dose de gelée
de la ferme visqueuse
$80959866769801*
Si nous arrivions à faire
manger ça à mon patron
ça résoudrait le problème
$21601269931093*
Bien tu as ramené 2 doses de gelée
de la ferme visqueuse
$28681635150249* Plus qu'une à aller chercher
$71867966253273*
Manger de la gelée visqueuse
te rend très agréable


=== levels/bit_switch ===

$56295261249455*
Si les composants envoient en sortie des valeurs différentes sur le même fil, tu auras une erreur. Par contre, certains composants ont des pattes de sortie grises, elles n'envoient rien en sortie quand le composant n'est pas activé. C'est le cas du composant Commutateur de bit (Bit Switch).

[img]dialogue/bit_switch.png[/img]

Cela signifie que plusieurs de ces pattes grises peuvent être connectées au même fil et ne pas causer d'erreur, tant qu'il n'y a pas plus d'une d'entre elles activée à la fois.
$42793594302151* En utilisant 2 portes NOT et 2 Commutateurs, construis une porte XOR.


=== rpg/maps/prison/dr_rakoo ===

$62085363571678* Docteur Rakoo
$41342441528477* Sang
$31033960272185* Je suis le célèbre\n Dr Rakoo


=== trans/levels_saving_bytes_text ===

$36838510526259*
[right]Action
État attendu
Sortie attendue
[/right]


=== components/Rol64 ===

$49017662473189* Rotation à gauche des bits en entrée
$13677051385046* Rotation à gauche


=== trans/level_decoder_1_RichTextLabel2 ===

$50454539040073*
[right][color=#e49f44]Entrée[/color]
Sortie 1
Sortie 2[/right]


=== levels/byte_shift ===

$16023356915123* Ta tâche dans ce niveau est de décaler vers la gauche la première entrée en fonction de la valeur de la seconde entrée. Cette seconde entrée aura au maximum un valeur de 7.
$37338672894296* Décale les bits de {value} de {amount} positions vers la gauche.
$10598344098990* [center]Décale la première entrée vers la gauche du nombre de position indiquée par la seconde entrée[/center]
$23134220902659* VALEUR
$16216408139965*
[color=#e49f44]Décaler[/color] une valeur à gauche de 1 signifie déplacer tous les bits de l'octets de 1 position vers la gauche.
Par exemple : [color=#e49f44]90 decg 1[/color]

[OFF] [ON] [OFF] [ON] [ON] [OFF] [ON] [OFF] deviendrait :
[ON] [OFF] [ON] [ON] [OFF] [ON] [OFF] [OFF]

Décalage de 3 : [color=#e49f44]90 decg 3[/color]
[OFF] [ON] [OFF] [ON] [ON] [OFF] [ON] [OFF] deviendrait :
[ON] [ON] [OFF] [ON] [OFF] [OFF] [OFF] [OFF]
$18137790657923* En plus de te faire faire le composant décaler à gauche, nous avons aussi demander au stagiaire de faire le composant décaler à droite. Il lui a suffi de réaliser une version miroir de ce schéma.
$18518173140953* Je te recommande d'ajouter [color=#e49f44]décaler gauche[/color] et [color=#e49f44]décaler droite[/color] à tes circuits pour les prochains niveaux.
$29295063752414* DÉCALER DE


=== trans/panel_outputlevel_enable ===

$88881816595724* [center]Activer / Désactiver[/center]


=== misc/restore_overture ===

$52008982212566* Réinitialiser


=== rpg/maps/overworld/bridge ===

$70708048943630* Pont


=== trans/panel_input_down ===

$70002762618597* Bas


=== trans/_second_tick_RichTextLabel2 ===

$11680718497014*
[right][color=#e49f44]Entrée 1
Entrée 2[/color]
Sortie attendue
Sortie courante[/right]


=== rpg/maps/unseen_fruit/conveyor_belt ===

$45894441609339* Tapis Roulant


=== components/SpriteDisplay ===

$27510895774306* écran de sprite multi-couche
$49278744667468* Écran de Sprite


=== dialogue/schematic_hub/delete_comment_confirm ===

$52709446588114* Oui
$52823211591830* Es-tu sur de vouloir supprimer ce commentaire ?


=== misc/ui_panel/left_inputs ===

$16586225094516* ENTRÉES


=== trans/manual_console ===

$73523750891893* Terminal


=== components/OutputCounter ===

$52247325526438* Compteur


=== trans/panel_shl8_input ===

$61388183229084*
[right]Valeur
Décaler de[/right]


=== components/Off ===

$61860786587357* OFF
$72749460799924* Toujours [OFF]


=== misc/ide_control_link ===

$80788685813993* Contrôles du Robot


=== misc/options_Score Sync ===

$45371978167502* Synchro. du Score


=== trans/map_keys_to_pan ===

$26276191141664* Déplacer la vue à l'aide du clavier


=== components/Xnor32 ===

$17419057954798* XNOR bit à bit sur 2 valeurs 32 bits
$52489451755306* XNOR 32 bits


=== trans/manual_send_otuput_robot ===

$65542429897149* [center]Ecris sur la sortie pour contrôler le robot[/center]


=== components/Or3 ===

$17576327690867* porte OR 3 pattes
$99630419947500* OR 3 entrées


=== trans/level_binary_search_description ===

$11976224688780* [center]Retrouve le mot de passe[/center]


=== trans/rpg_complete_derpoo ===

$25534025775791* [center]derpoo RIP[/center]


=== components/Output1Sum ===

$90026011029075* Somme


=== trans/level_binary_programming_description ===

$66247694103179* [center]Ajoute 5 à l'entrée[/center]


=== levels/Add 5 ===

$11540713506719*
Tu es maintenant libre de modifier le programme de ton ordinateur.
Clique sur l'icône Éditer du composant programme pour commencer à programmer.
$19281970848639* [center]Ajoute 5 à l'entrée.[/center]
$17770257567603* Donc pendant ce temps on te demandera d'aider un peu sur le vaisseau.
$19446152707984* Clique sur l'icône mémoire du composant programme pour commencer à programmer ton ordinateur. Ton ordinateur doit lire une entrée, y ajouter 5 et la renvoyer en sortie (on ne s'occupera pas du dépassement possible).
$12078933051174* Mais comme tu ne sais pas encore le programmer, tu n'es pas encore vraiment prêt pour ça..
$11074247151096* Remarque que le composant registre rouge a été remplacé par un composant personnel dont l'usage est identique.
$18134632592542* Tu as construit ton ordinateur, mais pour gagner la compétition tu dois encore finir le labyrinthe.


=== misc/options_keys ===

$92993941290486* Maj
$65955105101920* Entrée pavé numérique
$15851382978562* Gauche
$12519478101154* Fin
$13781284353315* Veille
$78882003890612* TAB
$23041433375813* Raccourci 6
$31504133014584* Espace
$27874359646701* Plus Aigu
$65834804441085* Ouvrir l'URL
$91413612191819* Raccourci D
$39317622588588* Raccourci E
$99716387921256* Menu Contextuel
$27726004575826* Lire le contenu
$68199202258305* Piste suivante
$49442994583673* Super Gauche (touche Windows/Commande)
$96347674697419* Avancer
$58999281424396* CMD
$59365233304896* Eff
$17795913351819* Suppr
$57038840198662* CTRL
$50955698469296* Raccourci 9
$63772872007214* Stop
$10929402286573* Page suiv
$71982112085693* Raccourci 7
$93358816396539* ↓
$28214161279082* Raccourci B
$14976122209522* Inser
$83084380695531* SHIFT + TAB
$70423659540492* Ouvrir Messagerie
$18970380352793* Alt
$55972860446450* Chercher
$81640191081376* Muet
$20334952085165* →
$91733527994209* Raccourci 2
$73529460447236* Entrée
$50389171923636* Suppr Arrière
$64108103861848* Raffraichir
$86957870260110* Moins Grave
$79228417307539* Droite
$48472841971511* Favoris
$94137103361291* Lire
$86664894772851* Raccourci F
$40801064032778* Piste précédente
$57182221632160* Aide
$32311987309013* Retour
$92411601634183* Pause
$93394348651979* Hyper Droit
$64963573823520* Impr Écran
$11442487736991* Pause Attn
$83183843351576* Raccourci 0
$74172180238771* Arrêt défill
$16897068982305* Super Droit (touche Windows/Commande)
$24086297669523* Baisser le Volume
$49947924390850* Raccourci 5
$51594389746074* Raccourci 4
$39382222147951* Verr Maj
$51120580663479* ESC
$66339874250985* Enregistrer le contenu
$67529269053604* Page d'accueil
$40013272281231* Hyper Gauche
$17043010993255* Stop
$47096285951897* Page préc
$47330905474433* Augmenter le Volume
$88355661220986* Raccourci C
$78473292327654* ↑
$18909108170114* Raccourci A
$25372126469538* Verr Num
$54347318627968* ←
$17896149617641* Réduire les Aigus
$43488085975448* Début
$11908889523442* Renforcer les Basses
$57391159100618* Raccourci 3
$74797401805098* Raccourci 8
$91210884350615* Raccourci 1
$92739814679396* Augmenter les basses


=== trans/not_gate_click_next2 ===

$20820887361993* Clique "Cycle suivant" pour voir


=== trans/panel_xor_description ===

$92999392068622* [center]Applique XOR sur 2 entrées bit à bit[/center]


=== trans/panel_hdd_input ===

$99603056559749*
[right]Rechercher
Lire
Écrire
Écrire valeur[/right]


=== trans/overwrite_keep_both ===

$70461062797309* Conserver les 2


=== trans/architecture_2 ===

$38100016313511* ARCHITECTURE PROCESSEUR 2


=== trans/program_data_width ===

$72687692653533*
[right]Largeur de Données :
[/right]


=== rpg/maps/prison/sign2 ===

$76218421577794* Panneau


=== components/Counter32 ===

$87245349851451* Compteur 32 bits 
$92765669828982* S'incrémente à chaque cycle hors réinitialisaition


=== trans/panel_register8_outputs ===

$72930832545270* Sortie


=== trans/options_disagree ===

$60077370372179* Désaccord


=== misc/tests_run_all ===

$55533125021199* Lancer tout


=== components/NOT ===

$34453052824732* NOT
$90844421681709*
Inverse l'entrée
[table=3]
[cell]Entrée[/cell][cell][OFF][/cell][cell][ON][/cell]
[cell]Sortie[/cell][cell][ON][/cell][cell][OFF][/cell]
[/table]


=== levels/Crude Awakening ===

$12508086025944*
Nous allons te tester.

Les règles sont simples, construis un ordinateur fonctionnel ou tu vas être mangé. Bonne chance !
$16321577947087* Félicitations, tu as été enlevé !
$19257730429557*
Un signal se déplace toujours de composants "IN" vers des composants "OUT".
Dans le coin en haut à gauche en dessous de "IN" tu trouveras une icône verte, 
clique dessus pour changer son état.
$17675121574388* Le composant OUT s'est maintenant éteint, car aucun signal ne viens de l'entrée.\n


=== misc/instr_clone ===

$69090690657232* Cloner


=== levels/byte_or ===

$10368115829346* En fait c'est OK car tu as eu une vie heureuse dans la nature et nous ne gâchons pas la bonne viande.
$15923734370936*
Applique OR sur chaque bit des octets en entrée et envoie le résultat en sortie.

Par exemple :
[code]
ENTRÉE 1 [ON][ON][OFF][OFF][OFF][OFF][OFF][OFF]
ENTRÉE 2 [OFF][OFF][OFF][OFF][ON][ON][OFF][OFF]
SORTIE   [ON][ON][OFF][OFF][ON][ON][OFF][OFF][/code]
$15226896485081* Est ce que tu penses que ce serait immoral de manger tous les terriens qui ne gagnent pas la compétition ?


=== trans/level_registers_code ===

$40063003736243* [center]OR[/center]


=== trans/instrucitons_header ===

$14831276667273* [center]Instructions[/center]


=== trans/level_the_bus_description ===

$20464862486158* [center]Copie la valeur de la bonne entrée vers la bonne sortie[/center]


=== misc/option_reset ===

$15557473522933* Réinitialiser


=== trans/panel_decoder1_input ===

$62550086102347* [right]Entrée[/right]


=== misc/inst_new_rule ===

$41064305626707* Nouvelle règle


=== rpg/maps/unseen_fruit/control_panel ===

$65321532772341* tomate
$51110810065199* orange
$88166963001775* melons
$22160541540437* poires
$74579380431603* pommes golden
$66873855446862* kiwi
$73302376080596* melon
$32979920031183* kiwis
$15870062259126* mûres
$70171621231240* panneau de Contrôle
$60591101734432* pommes
$66897764153265* Je dois être programmé pour appuyer ainsi
$22067281046238* pomme golden
$94493068600800* 2 {fruit_plural} ont été vus avant {fruit}
$54127406514854* mûres
$94632554265850* tomates
$37155502172032* oranges
$84136665661115* poire
$26638472067834* pomme
$96743644544068* C'est la première apparition de {fruit} !


=== levels/always_on ===

$50218226879226* Ce niveau débloque ta première page de manuel. Elle est importante, fais en sorte de bien la comprendre.
$17712385236630* Réalise un circuit qui est toujours [ON].


=== dialogue/schematic_hub/delete_confirm ===

$71921976503347* Oui
$46660924781254*
Es-tu sûr de vouloir
supprimer le schéma nommé '{name}' ?


=== trans/level_complete_hex ===

$94261690850981*
[b]Hexadecimal[/b]
[color=#cccccc][i]Bascule les nombres entre les formats signés, non signés et hexa[/i][/color]


=== trans/level_complete_gate ===

$99373213759665*
[b]Score Portes[/b]
[color=#cccccc][i]Tu peux maintenant voir le Score Portes de tes circuits et composants.[/i][/color]


=== components/ByteEqual ===

$35668435514829* Détermine si les deux entrées sont égales
$39369982838671* Égalité


=== levels/binary_racer ===

$25272818268849*
[b]EN RÉSUMÉ[/b]

Tu auras probablement noté :
1. Chaque nombre a une et une seule écriture binaire.
2. Chaque chiffre prend une valeur double du chiffre précédent.
$16076448195257* Ce niveau est mon passe-temps favori. Convertir du décimal au binaire en temps limité.
$37319690622142* Très bien, tu as atteint le niveau {current_level}.
$19111664765554*
Modifie les bits dans le panneau afin qu'ils représentent le nombre décimal demandé.

Tu dois atteindre le niveau 3 pour réussir.

(cliques [color=#e63e5b][url=accessibility_mode]ici[/url][/color] pour activer le mode accessible sans compte à rebours.)
$11176073682097* Combien fait {number} en binaire ?


=== components/Mul64 ===

$72281597169494* Multiplier
$11665562499390* Multiplie deux entrées


=== rpg/maps/overworld/space ===

$70779117877705* Regarde l'immensité de l'espace
$12015430928135* Espace


=== levels/xor_gate ===

$14093358515620* Ceci est aussi appelé une porte XOR. Ce niveau est difficile, ne te décourage pas si tu ne trouves pas la réponse immédiatement.
$19182751521677* Dans le dernier niveau tu as réalisé un circuit qui était [ON] au second cycle. Ce niveau nécessite un circuit [ON] au second OU au troisième cycle.


=== components/Bidirectional64 ===

$82412839066570* Patte bidirectionnelle 64 bits
$24932613021646* Peut contourner certaines erreurs de dépendance circulaire


=== trans/panel_network_input_description ===

$36399689035136*
[b][color=#e49f44]Type de requête[/color] (arguments)[/b]
[code]0[/code] Aucune requête
[code]1[/code] [color=#e49f44]Ecouter[/color] (Port)
[code]2[/code] [color=#e49f44]Se Connecter[/color] (IP, Port)
[code]3[/code] [color=#e49f44]Envoyer des données[/color] (ID Connexion, Données, Taille des données)
[code]4[/code] [color=#e49f44]Fermer[/color] (ID Connexion)
[code]5[/code] [color=#e49f44]Lire l'évênements suivant[/color]


=== rpg/maps/overworld/door4 ===

$66194643935592* Porte secrète


=== rpg/maps/prison/sign_1 ===

$88221977354540* Panneau
$74189085130186*
Ca dit : Le bouton ouvre
les portes de la prison


=== levels/byte_nand ===

$76462832199594* Créé un circuit qui applique un NAND bit à bit sur deux octets.


=== trans/level_complete_profile ===

$78783902500954*
[b]Online profile[/b]
[color=#cccccc][i]Find it in the main menu.[/i][/color]


=== components/Maker32 ===

$82420653444614* Assemble 32 bits en 4 octets
$85308499118176* Créateur 32 bits


=== dialogue/dotMatrixtext_link ===

$82486902873499*
La patte couleur utilise les octets 2, 3 and 4 comme [color=#dd6576][url=RGB color]couleur RVB[/url][/color] (l'octet 1 est ignoré)
La patte pixel pin utilise les octets 2, 3, 4, 5, 6 and 7 pour sélectionner les pixels à colorer, chaque bit correspondant à un pixel. La mise à jour n'est visible que lorsque l'octet 8 est mis à 1, ceci "valide" les modifications qui deviennent visibles sur l'écran.

Les entrées "Activer X" et "Activer Y" doivent être toutes deux à On pour modifier l'affichage.


=== trans/panel_output_output_3 ===

$94657695889458* Sortie 4


=== trans/panel_decoder3_output ===

$41412072467493* Seulement 1 s'active


=== rpg/maps/prison/prision_door ===

$64702123078518* La porte est verrouillée
$42385408716570* Porte


=== misc/add_code_name ===

$57358078712675* Enregistrer


=== components/Hdd ===

$75645507178296* HDD (disque dur)
$78558655732992* mémoire persistente


=== ui/state_ui/title_screen/exit ===

$12639868461113* Quitter


=== rpg/maps/spacial_invasion/space_rat ===

$72504258410857* Les rats de l'espace sont arrivés trop près
$94470860110909* Rat de l'Espace
$67254986543263* Si j'avais été programmé pour faire cela\ncela aurait terminé le niveau


=== trans/panel_fulladder_output ===

$18502107482550*
Resultat
Retenue


=== trans/options_waiting ===

$58990937331663* En Attente


=== misc/ui_panel/memory ===

$65362728703588* MÉMOIRE


=== trans/panel_output_output_2 ===

$33211646632666* Sortie 3


=== trans/ide_add_assembly_header ===

$94462268558066* [center]Ajoute le code assembleur[/center]


=== levels/any_doubles ===

$16587030847545* Au vu de notre intelligence clairement supérieure, nous avons construit une machine pour plier nos chaussettes. Malheureusement, le fil qui détecte les paires de chaussettes est cassé sur cette machine.
$14373083988184*
Ce niveau a 4 entrées. 
Sors [ON] quand 2 entrées ou plus sont [ON].

[tip]Ne te casse pas trop la tête sur ce niveau.[/tip]


=== components/Neg64 ===

$88458190974122* Inverser
$52206550732945* Inversion bit à bit de l'entrée


=== components/DelayLine1 ===

$30487770736917* Ligne à Retard
$38206009264853* Envoie en sortie au prochain cycle l'entrée de ce cycle 


=== rpg/maps/unseen_fruit/door2 ===

$66022312281343* Porte


=== trans/panel_rom_output ===

$80688779703520* Sortie


=== misc/ide ===

$80281780593326* {nr} CUST
$33302419528314* {nr} CNT
$57584872924662* {nr} OUT
$66077393938044* {nr} REG
$57192021095756* {nr} WIRE
$89311802272165* {nr} BIT
$18255035821811* {nr} RAM


=== components/DelayLine32 ===

$56616725618490* Envoie en sortie au prochain cycle l'entrée de ce cycle 
$49292282287971* Ligne à retard 32 bits


=== components/Nand64 ===

$27197172037913* NAND 64 bits
$66590147372797* NAND bit à bit sur 2 entrées


=== misc/run_fast ===

$54853798559740* Exécuter plus vite (clic droit : modifier la vitesse cible)


=== misc/confirm_factory_reset ===

$65699778604521* Tout Effacer


=== trans/panel_off ===

$61047424972631* Toujours


=== component_panels/Output8zLevel ===

$35707954769868* Non activé


=== components/Nor64 ===

$17208777467974* NOR bit à bit sur 2 entrées
$72509242083648* NOR 64 bits


=== trans/panel_hdd_description ===

$28038932532386*
[center]Sur le disque dur, la "position de tête" détermine l'adresse à laquelle ont lieu des lectures et écritures.  Utilise la patte de positionnement qui est de type 8 bit signée pour modifier la  "position de tête".
Utilise une valeur de positionnement de 0 si tu ne souhaites pae modifier la position.[/center]


=== trans/panel_or_description ===

$65281182019602* [center]Applique un OU bit à bit sur deux entrées[/center]


=== trans/panel_input_input_3 ===

$21321167572284* Entrée 4


=== levels/Delicious Order ===

$10160261151833* Commence par lire, une par une, les 15 notes des différents plats depuis l'entrée. Ton travail est de les envoyer triées sur la sortie, de la plus petite à la plus grande.
$16027225087666* Nous allons compléter l'encyclopédie galactique culinaire en ajoutant la nourriture humaine. Comme nous n'avons pas d'alphabet, les articles de l'encyclopédie sont rangés dans l'ordre de leur note.


=== components/Equal64 ===

$34603983706314* Détermine si les 2 entrées sont égales
$82876546747608* Égalité


=== trans/manual_network_label ===

$90392202103470* Saisi une IP ici pour la convertir en 1 entier


=== trans/panel_rol_input ===

$95166818170185*
[right]Valeur
Rotation de[/right]


=== trans/manual_component_factory ===

$35460636622618* Atelier de composant


=== trans/options_status ===

$35063135798145* Statut


=== levels/Tower of Radioactive Alloy ===

$13757925963562* Cette fois nous te demandons de déplacer des pyramides régulières de disques radioactifs retirés d'un vieux réacteur. Fais juste attention à ne pas placer un disque plus grand sur un plus petit sinon tout le vaisseau va exploser.
$10750976989948*
Les 4 premières entrées te donneront dans l'ordre :
num_disque - le nombre de disques à déplacer -1
source - la position de départ (0,1 ou 2)
destination - la position d'arrivée
réserve - la 3ème position restante

Contrôle la grue en utilisant les valeurs suivantes en sortie :
0 - Place l'aimant à la position 0
1 - Place l'aimant à la position 1
2 - Place l'aimant à la position 2
5 - Active ou désactive l'aimant

Manipule l'aimant manuellement à l'aide des touches Flèches et Entrée pour activer/désactiver.
$19265994465686* Nous avons besoin de toi pour mettre de l'ordre au sous-sol.
$35120623183961* Déplacer de {source} vers {destination}
$15855497886737*
Implémente l'algorithme suivant :

Algorithme des tours de Hanoi[code][color=#87a8c8]
fonction déplacer(numdisque, source, destination, réserve):
  si num_disque est 0:
    déplacer disque de source à dest
  sinon:
    déplacer(num_disque-1, source, réserve, destination)
    déplacer disque de source à dest
    déplacer(num_disque-1, réserve, destination, source)
[/color][/code]

[tip]Empile les valeurs de registre pour les sauvegarder avant l'appel d'une fonction qui les modifie.[/tip]


=== trans/manual_universal_gates ===

$28345532918560* Portes universelles


=== trans/map_functions ===

$83960548773205* FONCTIONS


=== components/Input 1 Byte ===

$90785720285146* Entrée 8 Bits


=== trans/panel_probewirebit_value ===

$24213353038685* [center]Valeur[/center]


=== trans/hub_type ===

$23829497228009* Type


=== trans/manual_text_binary ===

$69488982380310*
Les nombres que tu as l'habitude d'utiliser forment la base 10, et quand nous ajoutons un 0 à droite d'un nombre, sa valeur est multipliée par 10.

Le binaire est la base 2, et dans ce cas ce procédé ne fait que doubler le nombre. Autrement dit, chaque chiffre représente une puissance de 2. Voici des exemples en [color=#c54d5e]base 2[/color] et [color=#e49f44]base 10[/color] :
[color=#c54d5e]    1[/color] = [color=#e49f44]1[/color]
[color=#c54d5e]  10[/color] = [color=#e49f44]2[/color]
[color=#c54d5e]100[/color] = [color=#e49f44]4[/color]

Pour représenter 6 nous pouvons simplement ajouter 4 et 2 :
[color=#c54d5e]110[/color] = [color=#e49f44]6[/color]

L'addition, la multiplication et tout le reste fonctionne comme en base 10, sauf qu'une retenue est nécessaire à partir de 2 au lieu de 10.


=== panel_sound_sound_picker ===

$73758040671294* Notes (clique [i][/i] pour changer)


=== trans/level_alu1_description ===

$90245779080897*
[center]Effectue un OR, NAND, NOR ou un AND
entre les 2 octets[/center]


=== components/Program1Red ===

$26811947547688* Composant mémoire programmable
$55594749714809* Programme


=== nim/backend_lib/assembler ===

$46709301132173* L{line} Nom attendu après [u]label[/u]\n(ex. label cible_saut)
$91607161873807* L{line} Nom et valeur attendus après [u]const[/u]\n(ex. const haut 3)
$29335866080065* L{line} [u]set_input[/u] attend un argument qui doit\ncorrespondre à un nombre
$27717388396189* L{line} [u]expect[/u] attend en argument un index\nde point d'observation et une valeur
$81373400907688* L{line} Erreur non identifiée ici
$95834288706682* L{line} Valeur attendue après [u]set_input[/u]
$65326376775481* L{line} Nom manquant après [u]label[/u]\n(ex. label cible_saut)
$23247597342508* L{line} Le mot-clé [u]set_input[/u] n'est pas autorisé\n dans ce niveau.
$49738057919794* L{line} Nom et valeur attendus après [u]const[/u]\n(ex. label cible_saut)
$54823996766711* L{line} Second paramètre invalide pour [u]expect[/u]
$15087417947547* L{line} [u]expect[/u] attend en argument un index\n de point d'observation et une valeur
$39128060960831* L{line} Le mot-clé [u]expect[/u] n'est pas autorisé\n dans ce niveau.
$34201706604320* L{line} Le premier argument d'[u]expect[/u] doit être un nombre\n(index du point d'observation)
$80435549997833* L{line} Constante invalide


=== misc/dir_delete ===

$94436541903929* Architectures : {list}
$17985924005596* Contient {nr} schémas.
$51791491383290* Le composant personalisé est utilisé dans
$63013773025775* Es-tu sûr de vouloir supprimer {file_name} ?
$38011567415872* Le dossier est vide.
$57790786178566* Composants personalisés : {list}


=== rpg/maps/overworld/bed ===

$19781388766480* Lit
$41698807327261* J'aime regarder les meubles au hasard


=== levels/little_box ===

$17142958857584* A OU B
$12901484249817* Pourras-tu mettre 4 octets de mémoire dans un espace aussi limité ?
$14218335256117*
Dans notre civilisation avancée, forcer les prisonniers à faire des tâches complexes est de l'esclavage et est techniquement illégal.
    C'est pour cela que nous avons dit au stagiaire de faire une version 256 octets de ton composant.
$15908016538045* VALEUR
$13765566466116* NE PAS SAUVEGARDER
$19282543476901* 1
$16196915566111* 0
$32676754026463* Sauvegarde {value} et charge
$30856781458049* Sauvegarde {value}
$14259545926196* A
$12306130287676*
Dans ce niveau tu devras construire un circuit qui pourra
[SAUVEGARDER] ou [CHARGER] 4 octets de mémoire différents. 

1 Bit sera donné pour [CHARGER] et un autre pour [SAUVEGARDER].
Enfin, 2 bits seront donnés pour l'adresse.

Avec 2 bits, tu auras 4 combinaisons possibles, une pour chaque octet de mémoire dans ce niveau.
[i][tip]Rassemble les fils au centre et utilise des angles droits,
sinon ce sera le bazar ![/tip][/i]
[i][tip]La barre d'espace fait tourner les composants.[/tip][/i]
$16217965518477* B
$10891070331034* B
$18084166025569* Rien
$13082830776248* NE PAS CHARGER
$13555908976270* 0 OU 1
$17473197268827* CHARGER
$10311371309532* SAUVEGARDER
$16925432534232* CHARGER
$13644027370563* Charger
$12933801309767* A
$12291627335021* SAUVEGARDER


=== trans/ide_binary_header ===

$22615032668969* Editeur Binaire


=== trans/level_registers_text ===

$78241632854567*
[right][color=#e49f44]Code
en Entrée[/color][/right]


=== trans/panel_cond_input_0 ===

$59435425554599* Bit 0 :


=== levels/program ===

$16693098943939*
Le composant d'entrée [INSTRUCTION] a été supprimé. Il a été remplacé par un composant programme. À chaque cycle, utilise le compteur pour charger l'[INSTRUCTION] suivante de la mémoire du programme.
  
Tu dois utiliser le composant compteur que tu as débloqué dans un niveau précédent.
$19686277478479* Le programme envoie toujours la première instruction. As tu connecté un compteur ?


=== trans/hub_status ===

$64105077092961* Téléchargement...


=== trans/manual_components ===

$40288888375581* Composants


=== levels/capitalize ===

$14894954428144*
Dans ce niveau, les entrées représentent les lettres dans une liste de noms de planète, encodés en ASCII (voir le manuel). Chaque nom est séparé par un espace qui a la valeur numérique 32. Remplace la première lettre de chaque mot avec la majuscule correspondante.
(Les caractères possibles en entrée sont les minuscules de a à z, l'espace, l'apostrophe et le tiret).
$13301617098810* A notre demande le stagiaire a saisi une liste de planètes en langue humaine. Malheureusement il a oublié de mettre les majuscules aux noms.
$11647445869837* Entrée : 
$11201813578269* Sortie : 


=== levels/byte_equal ===

$17156565273196* La sortie doit être [ON] quand les deux entrées sont identiques.


=== rpg/maps/overworld/blankidork ===

$19291766514049* Nous combattons la rébellion


=== trans/levels_counting_signals_RichTextLabel2 ===

$34604121212779*
[right]Entrée 1
Entrée 2
Entrée 3
Entrée 4[color=#e49f44]
Sortie attendue
Sortie courante[/color][/right]


=== trans/level_program_text ===

$38014836341470* [right][color=#e49f44]Saisie Code[/color][/right]


=== trans/level_complete_stat_time ===

$39203727515285* Temps


=== trans/map_memory ===

$58330421958143* MÉMOIRE


=== ui/options/General ===

$36195388998735* Général


=== trans/manual_text_matrix ===

$75170402412137*
[b]Afficher des lettres[/b]
Il s'avère qu'un espace de 5x7 est petit mais suffisant pour afficher proprement des lettres. En ajoutant une ligne et une colonne supplémentaire, ces lettres rendront très bien les unes à la suite des autres.

[center][img]dialogue/manual/matrix_letter.png[/img][/center]


[b]Petit écran xxx[/b]
En tournant le composant, tu obtiens 8x6 pixels, qui a un ratio d'aspect intéressant de 4:3 et en juxtaposant plusieurs, tu peux obtenir la plupart des résolutions utiles. Les pattes sont définies dans ce composant spécialement pour permettre d'en juxtaposer plusieurs. Imagine la conception naïve des broches où chaque composant est activé par un seul bit. Cela t'obligerait à connecter 1 fil pour chaque composant. Dans cette situation, le nombre de fils nécessaires pour un écran en mosaïque serait proportionnel à la surface, tandis que l'espace nécessaire pour ajuster les fils entre les composants, serait proportionnel à la circonférence.

[center][img]dialogue/manual/tilable_screen.png[/img][/center]

Au lieu de cela, en ayant 2 pattes d'activation, un fil peut activer une ligne entière et un autre une colonne entière. De cette façon, un seul composant peut être sélectionné par sa combinaison unique de lignes et de colonnes. De plus, l'ajustement du reste des données sur les mêmes fils signifie que les espaces horizontaux et verticaux n'ont besoin que d'une largeur de 1 pixel. Ce composant occupe visuellement un demi-pixel supplémentaire de tous les côtés, de sorte que ces composants peuvent être parfaitement juxtaposés, avec 1 carré caché entre eux pour faire passer les fils.


=== trans/panel_delayline1_output ===

$99213923469748* Sortie


=== trans/levels_double_the_number ===

$41609125516676* [center]Double le nombre[/center]


=== trans/panel_full_adder_input ===

$67545680105541*
[right]Entrée 1
Entrée 2
Entrée 3[/right]


=== trans/level_delay_level_description ===

$24326379952614* Crée un circuit qui coûte 5 PORTES and 6 DELAIS


=== trans/panel_max_data_len_max_data_length ===

$88063177433135* [right]Longueur de données Max[/right]


=== trans/level_spacial_invasion_description ===

$44980627299841* [center]Tire sur les rats de l'espace ![/center]


=== levels/registers ===

$10661964231175* J'ai forcé la position des composants rouges pour ce niveau, car tu t'embrouilles toujours en ne laissant pas assez de place. À partir d'ici tu ne repartiras plus de rien à chaque niveau, le désordre sera désormais sauvegardé d'un niveau à l'autre.
$10211777161405*
Voici les combinaisons de bits pour chaque [color=#c54d5e]source[/color] et [color=#e49f44]destination[/color].

[color=#c54d5e]Source[/color]:
[OFF] [OFF] [OFF]  REG 0 
[OFF] [OFF] [ON]  REG 1 
[OFF] [ON] [OFF]  REG 2 
[OFF] [ON] [ON]  REG 3 
[ON] [OFF] [OFF]  REG 4 
[ON] [OFF] [ON]  REG 5 
[ON] [ON] [OFF]  ENTRÉE 
[ON] [ON] [ON]  NON UTILISE

[color=#e49f44]Destination[/color]:
[OFF] [OFF] [OFF]  REG 0 
[OFF] [OFF] [ON]  REG 1 
[OFF] [ON] [OFF]  REG 2 
[OFF] [ON] [ON]  REG 3 
[ON] [OFF] [OFF]  REG 4 
[ON] [OFF] [ON]  REG 5 
[ON] [ON] [OFF]  SORTIE
[ON] [ON] [ON]  NON UTILISE

Pour obtenir des explications plus intuitives des exigences clique sur l'icône [INSTRUCTION] dans le coin supérieur gauche.
$14823499195861* Ouvrir les "Instructions" dans la barre en haut
$15888345020710*
Dans ce niveau tu dois créer un circuit pour copier d'une [color=#c54d5e]source[/color] vers une [color=#e49f44]destination[/color]. 

L'octet instruction indique ici la [color=#c54d5e]source[/color] et la [color=#e49f44]destination[/color]. 

Les bits 1, 2 et 3 indiquent la [color=#e49f44]destination[/color]. Les bits 4, 5 et 6 indiquent la [color=#c54d5e]source[/color].
$14108238519744* Il est temps de créer ton chef d'œuvre, en implémentant l'architecture informatique [color=#e49f44]OVERTURE[/color]. Ce sera un véritable système Turing Complet, un vrai ordinateur dans tous les sens du terme !
$14041158687959*
Les [color=#c54d5e]sources[/color] et les [color=#e49f44]destinations[/color] peuvent être un des 6 registres, nous les appellerons REG 0 jusqu'à REG 5. 
  
De plus cette carte a un composant d'entrée spécifique qui peut être la [color=#c54d5e]source[/color] et un composant de sortie qui peut être la [color=#e49f44]destination[/color].


=== components/Ashr32 ===

$57867060876326* Décalage arithmétique à droite
$77878150504241* Décale les bits vers la droite, en conservant le signe du nombre


=== misc/level_gate_manual_icon ===

$22002156022920* Débloque la page de manuel


=== components/DotMatrixDisplay ===

$18651725958642* Affichage par matrice de points 6x8
$71512568789377* Écran graphique 6x8


=== rpg/maps/overworld/fuel ===

$99170934143071* Carburant du coeur


=== trans/panel_and_description ===

$62144934019319* [center]AND bit à bit sur 2 entrées[/center]


=== levels/Masking Time ===

$19351773688761* Cycles restants : {ticks_left}  Entrée : {input}
$16810715868480* [center]Calcule le modulo 4 de l'entrée.[/center]
$17375862136921*
La durée de notre semaine est de 4 jours. On appelle les jours Jour Zéro, Jour Un, Jour Deux et Jour Trois. J'ai entendu que les humains ne savaient pas compter les jours correctement?

Ça me surprends pas vraiment.
$65431688078892*
Dans ce niveau on te donne un nombre n en entrée et tu dois retourner comme résultat ce nombre modulo 4.

La difficulté est que tu as seulement {ticks_per_test} cycles pour sortir le résultat attendu.

Attention, tu n'as pas besoin de modifier le circuit, tu dois trouver l'astuce pour calculer rapidement le modulo 4.
Regarde [color=#e63e5b][url=masking_time]l'indice[/url][/color] si tu es coincé.
$81055582534899* Enfin le nouvel an arrive et nous te demandons de calculer le jour de la semaine de naissance de tout le monde. Nous te donnerons la date et tout ce que tu as à faire c'est de retourner le jour de la semaine en {ticks_per_test} cycles maximum.


=== components/Console ===

$66743357915699* Terminal
$16105755937680* Terminal d'affichage textuel 80x24


=== rpg/maps/overworld/oozla ===

$72859292385128*
Ils disent qu'il peut calculer
en utilisant n'importe quelle paire de registre,
et en stockant le résultat n'importe où
$41963791304712*
Malheureusement ce n'est qu'une histoire pour enfants
ce genre de héros n'existe que dans les contes de fées
$91713298019390*
On dit que son ordinateur peut
lire plus d'un octet à la fois
$43108829077557*
On raconte qu'il a créé un ordinateur puissant
pour résoudre le problème des déchets radioactifs
qui menace ce vaisseau
$60555049113315*
Certains disent qu'il aura au moins
des adresses mémoire de 4 bits,
permettant d'adresser 16 emplacements mémoire
$52580048139802* La prophétie parle d'un héro à venir


=== components/LessI16 ===

$75600169624828* Inférieur (signé)
$73697238171042* Détermine si une entrée est inférieure à l'autre


=== trans/label_input_input_0 ===

$83039286441109* Entrée 1


=== trans/level_constants_description ===

$34641396464207* [center]Ajoute le chargement de constante à ton architecture[/center]


=== trans/manual_circular_dependency ===

$40263928358112* Dépendance circulaire


=== trans/component_panels_sprite_inputs ===

$89388086235988*
[right][color=#e49f44]Type Commande[/color]
Id de couche
Position
Taille[/right]


=== trans/panel_keyboard_right ===

$20567291616294*
Valeur de touche
Touche relachée


=== trans/panel_equal_output ===

$15175350110347* Sortie


=== trans/panel_on ===

$77349453746493* Toujours


=== misc/profile ===

$32835651830157* Profil


=== components/BeepBox ===

$16713357727925* Composant sonore avec 256 tons paramétrables et contrôle de hauteur.
$11041223461254* Son


=== trans/panel_sound_inputs ===

$45047777963599*
[right] Hauteur de Note
(signée)[/right]


=== components/Bidirectional32 ===

$54631386552063* Patte bidirectionnelle 32 bits
$35105566244017* Permet de contourner certaines erreurs de dépendance circulaire


=== trans/panel_clock_output ===

$47697250900761* horodatage UNIX


=== misc/specifications ===

$56390619785555* Voir les définitions des instructions
$68054407020318* Instructions


=== trans/manual_component_factory_text ===

$42847481618884*
Ouvre l'atelier de composant en cliquant sur ce bouton [img]dialogue/manual/component_factory_icon.png[/img] dans la barre supérieure gauche.

L'atelier de composants te permet de créer tes propres composants. Le comportement du composant est déterminé par les circuits logiques qu'il contient et sa forme varie selon leur disposition.

Les composants entrée et sortie que tu places deviennent les pattes du composant. Comme avec les autres composants, une sortie connectée à l'entrée cause une dépendance circulaire. Les sorties qui sont reliées aux entrées génèrent des dépendances circulaires, même si la structure interne du composant indique qu'il ne devrait pas y en avoir. Les circuits complexes sont mieux gérés si l'on n'a pas à contrôler le contenu de chaque composant, mais cela peut poser parfois problème. Dans ce cas, utilise les pattes bidirectionnelles. Elles autorisent le passage du signal dans les 2 sens et les dépendances circulaires sont détectées en contrôlant le contenu des composants.

Les sondes placées dans les composants personnalisés seront visibles et indiqueront les valeurs internes. Les sondes peuvent être connectées à d'autres composants personnalisés, de façon à afficher des valeurs internes à des sous-composants. Ces valeurs peuvent aussi être connectées au composant programme.

Pour l'atelier de composant, le gestionnaire de fichier gère également les composants personnalisés. Le nom du fichier devient le nom du composant et les dossiers correspondent à la structure du menu.


=== misc/network_update ===

$47639082058046* Rien ici pour l'instant

#  Showing what components are used in schematics in the hub
$83560387278127* Dérivé de : 
$86830276924898* Transmis :
$15762392983604* Taille :

#  If the hub can't load a schematic for some reason
$76023068123024* Erreur
$70694384106281* Créateur :
$81675147704214* Utilise le composant réseau
$98151734218561* [center][color=#60a96b]Téléchargement terminé.[/color][/center]
$40010486743721* [center][color=#dd6576]Echec du transfert[/color][/center]


=== trans/level_complete_stat_delay ===

$43118901497406* Délai


=== rpg/maps/overworld/door2 ===

$40757019106897* Porte


=== components/NetworkClient ===

$44510554000571* Réseau
$90462653419289* Gère les connexions réseau


=== trans/options_animation_speed ===

$13442839894535* Vitesse d'animation des fils


=== trans/levels_negative_descriptions ===

$87964635915702*
-127 to 127 représentables :
0 to 127 restent inchangés :
Compatible avec l'additionneur :


=== components/Counter16 ===

$37313834107391* S'incrémente à chaque cycle hors réinitialisaition
$49104925799943* Compteur 16 bits 


=== trans/panel_cond_input_1 ===

$99239506734191* Bit 1 :


=== trans/panel_splitter32_output ===

$18283412227212*
Octet 1
Octet 2
Octet 3
Octet 4


=== rpg/maps/overworld/barrel7 ===

$19922359571673* Tonneau de Ragoût


=== dialogue/schematic_hub ===

$22639280459994* Téléchargement de la liste...


=== components/Splitter32 ===

$90978982016052* Répartit 32 bits en 4 octets
$24096666569346* Répartiteur 32 bits


=== trans/panel_neg_input ===

$92219875545393* [right]Entrée[/right]


=== components/Program64 ===

$38310909505735* Programme
$76480303942112* composant mémoire programmable


=== components/Shl64 ===

$56766765894165* Décale à gauche les bits en entrée
$37014604954362* Décalage à gauche


=== trans/level_byte_mux_description ===

$20538476756633* [center]Envois en sortie l'octet en entrée attendu[/center]


=== trans/options_cluster_color ===

$77850745497963* Appliquer la couleur au groupe de fil


=== misc/continue ===

$93610185550877* Continue


=== trans/panel_program_1inputs_label ===

$85358271811851* [right]Edite les composants liés[/right]


=== nim/backend_lib/schematics ===


#  Default assembly instructions
$98784625122112* add 68\nreg0_to_reg1 129\nreg0_to_reg2 130\nreg3_to_out 158

#  Decoder pin name
$80846046332059* CONDITION

#  Name of lab test file (the name determines what it looks like in game, but don't the .assembly part)
$43762760711440* 3 Conditions.assembly

#  For the default OVERTURE instruction menu
$36937658066516* AND
$25378963142694* Entrée 2

#  For the default OVERTURE instruction menu
$34688070019016* Calcule
$48524980499900* VALEUR
$23343928938611* CALCUL
$80984147393241* OPCODE

#  For the default OVERTURE instruction menu
$41384200516164* Entrée
$25947122599583* EMPILER
$21762287720058* Defaut
$52720470197560* Condition

#  For the default OVERTURE instruction menu
$58135326697989* Sortie

#  For the default OVERTURE instruction menu
$89904818945500* Toujours

#  For the default OVERTURE instruction menu
$45098916684469* Jamais
$69871887031160* Résultat

#  For the default OVERTURE instruction menu
$77964040770330* AJOUTE

#  For the default OVERTURE instruction menu
$90287016519308* INUTILISE
$17900992684779* Entrée

#  For the default OVERTURE instruction menu
$23756602199977* NAND
$98979865390652* SORTIE
$30360644331285* DÉPILER

#  For the default OVERTURE instruction menu
$52155313885654* Condition

#  Name of lab test file (the name determines what it looks like in game, but don't the .assembly part)
$38851635485723* 2 Calculations.assembly

#  Name of lab test file (the name determines what it looks like in game, but don't the .assembly part)
$55885017410507* 0 Immediate load.assembly

#  Name of lab test file (the name determines what it looks like in game, but don't the .assembly part)
$84575312492466* 1 Register copying.assembly

#  Default program the first time you open binary search
$28582639590579* # Définis des labels comme ceci\nlabel my_label\n# Ceci est une constante\nconst PI 3\n# Tu devrais aussi jeter un oeil\n# à la page de manuel Assembleur

#  For the default OVERTURE instruction menu
$49207579633810* NOR
$97114869841400* Sortie
$23432943836287* exemple
$15697933732634* Instruction

#  For the default OVERTURE instruction menu
$98586044504803* Copier

#  For the default OVERTURE instruction menu
$87661236574161* Valeur Immediate

#  For the default OVERTURE instruction menu
$43346201280348* SOUSTRAIRE
$50176996454102* IMMEDIATE
$38100656631435* COPIER

#  Default code seen when first opening the IDE
$46866969777934* # Je suis un commentaire !\n# Pour calculer 1 + 1\n1\nreg0_to_reg1\nreg0_to_reg2\nadd\nreg3_to_out
$47025412277453* Entrée 1

#  For the default OVERTURE instruction menu
$63749396808309* OR


=== levels/xor ===

$11589029892097* XOR les bits des entrées {a} et {b}
$12758156517177* En utilisant les instructions implémentées par ton ordinateur, lit deux fois l'entrée et effectue un XOR sur les deux valeurs
$16047615798435* [center]Lit deux fois l'entrée et effectue un XOR sur les bits des deux entrées[/center]


=== trans/level_byte_or_text ===

$99465606386164*
[right]
[color=#e49f44]Entrée[/color]
Sortie attendue
Sortie courante
[/right]


=== trans/manual_simulator ===

$19932404521621* Simulateur


=== trans/panel_not_output ===

$74796974148718* Sortie


=== trans/panel_output ===

$19698504808819*
Résultat
Retenue en Sortie


=== rpg/maps/boss_room/door2 ===

$48251720560954* Porte de donjon


=== levels/the_bus ===

$28468611444223* SORTIE 1
$67465559416096*
Ce niveau a 2 entrées octet et 2 sorties octet. Ton objectif est de copier une des entrées vers l'une des sorties.

Le premier bit d'entrée indique quelle entrée doit être copiée. Le second bit indique vers quelle sortie envoyer la valeur.
	

Regarde [color=#e63e5b][url=the_bus]cet indice[/url][/color] si tu bloques.
$52612646660710* ENTRÉE 0
$97971478046986* ENTRÉE 1
$73177632038973* SORTIE 0
$71428957264410* ENTRÉE 1
$72472660427162* [center]Copie la valeur de l'entrée {input_nr} vers la sortie {output_nr}[/center]
$96958133516462* DE
$91318587712792* VERS
$72709070901789* SORTIE 1
$36872979988941* ENTRÉE 0
$33984298968523* SORTIE 0
$85140574084420* [center]Copie la valeur de la bonne entrée vers la bonne sortie[/center]


=== components/Ram ===

$95418291334002* Ram 256 Octets
$27094240214067* Composant Mémoire


=== components/Constant16 ===

$85825068431072* Constante 16 bits
$61330657823382* Valeur Constante


=== levels/and_gate_3 ===

$14788981567936* Crée une porte AND avec 3 entrées.


=== components/DivMod16 ===

$42657221816637* Divise et calcule le modulo 2 des nombres
$22319923069746* Divise


=== components/MemoryProbeBit ===

$13846578075327* Affiche une valeur sur ton composant personnalisé ou dans l'éditeur de programme
$25103579211328* Sonde Mémoire (bit)


=== trans/level_byte_mux_text ===

$44961981616677*
[center]Ta réponse 11 + 88 =  0
Réponse attendue 11 + 88  = 99[/center]


=== ui/verilog_format_options ===

$61009819785587* Aucun


=== components/DualPortRam ===

$13408945557666* RAM avec une patte Lire supplémentaire
$30400404542678* RAM Double Lecture


=== components/Switch64 ===

$80980797636768* Active/Désactive une valeur
$93223372486795* Commutateur 64 bits


=== misc/delay_overlay ===

$85430022417382* Montrer les délais


=== levels/push_pop2 ===

$10062117579269* Ajoute la pile à ton ordinateur
$14685569269160*
Dans ce niveau on attend que tu ajoutes la pile à l'ordinateur et que tu écrives un programme pour le résoudre.
Quand l'entrée est 0, tu dois [color=#e49f44]DÉPILER[/color] une valeur de la pile et l'envoyer en sortie. Quand l'entrée n'est pas 0, tu dois l'[color=#e49f44]EMPILER[/color] sur la pile.
$18561605111721* EMPILER {input} sur la pile
$59658696292688* DÉPILER {value} de la pile


=== rpg/maps/overworld/crate ===

$37606760989079* Débris
$78128919991233* Caisse


=== trans/level_codes_description ===

$24678249110160* [center]Ajoute les codes de calcul à ton circuit[/center]


=== trans/text_truth_table_left ===

$58617980046951*
[right]Entrée 1
Entrée 2
Sortie[/right]


=== dialogue/schematic_hub/load ===

$41294322771286* Charger
$44524092309946* Chargement en cours...


=== rpg/maps/overworld/musli ===

$21621435534103* Cela n'a aucun sens.
$20939310165945*

Pourquoi ce carburant sort du coeur
pour y re-rentrer après ?


=== rpg/maps/overworld/purple_flower ===

$70367070546819* Ca ressemble à une fleur
$91230192040939*
Cela doit être la fleur
que Gruliette voulait
$25076873142666* Fleur rose


=== trans/panel_segment_value ===

$97585846659258* [center]Valeur[/center]


=== trans/manual_delay ===

$78806697204524* Délai


=== trans/panel_constant_output ===

$14868502983738* Sortie


=== rpg/maps/cave/door4 ===

$59392168282288* Porte de Donjon


=== rpg/maps/unseen_fruit/gulgramush ===

$35182545479584*

Ne casse pas les murs
Mauvais robot


=== trans/rpg_alloy_enter ===

$47375100278801* [center]RÉINITIALISER POUR RÉESSAYER[/center]


=== components/Program8_1 ===

$11057354704814* Composant mémoire programmable
$12805545963716* Programme


=== levels/crude_awakening/next_level ===

$24027424800887* Niveau suivant


=== components/Nor8 ===

$34517798310461* NOR bit à bit sur 2 entrées
$39421972053612* NOR 8 Bits


=== trans/level_alu2_description ===

$37432913848309* [center]Effectue un OR, NAND, NOR, AND, ADD ou un SUB entre les 2 octets[/center]


=== trans/level_complete_stat_gate ===

$95192766583497* Portes


=== levels/signed_negator ===

$10866019808027* Pour ce niveau tu dois activer les nombres signés pour que le dernier bit vaille -128. Clique sur "+255" dans le cadre du haut.
$10400106910274*
Considérant que l'entrée est signée (8ème bit valant -128), réalise un composant qui prend un nombre et envoie l'opposé en sortie.
Par exemple l'opposé de 4 sera -4. -9 produira 9 en sortie.


=== trans/level_circumference_subscript ===

$80632450818467* [center][color=#cccccc](Considérons π ≈ 3)[/color][/center]


=== trans/panel_output_output_0 ===

$44355002441998* Sortie 1


=== trans/overwrite_discard ===

$78824878529707* Abandon


=== trans/options_missing ===

$22687523145097* Manquant


=== trans/level_xnor_RichTextLabel2 ===

$59451104901430*
[right][color=#e49f44]Entrée 1
Entrée 2[/color]
Sortie attendue
Sortie actuelle[/right]


=== trans/options_language_disclaimer ===

$72959997258737* Tu dois redémarrer pour que le changement de langue soit pris en compte.


=== ui/state_ui/title_screen/play ===

$66967233942803* Campagne


=== trans/level_ram_component_value_description ===

$53113984441582*
[right]Test
Adresse
Action
Sortie attendue[/right]


=== trans/level_byte_less_description ===

$37336202055283* [center]Determine si la première entrée est inférieure à la seconde.[/center]


=== components/Register16 ===

$16015376037787* Registre 16 Bits
$71792123436163* Mémoire 16 bits


=== levels/Opcodes ===

$19693461238792* Fixe l'incrément du compteur à 4
$20916717363300* Point d'observation {nr} doit cibler la sortie
$38976231780455* Point d'observation {nr} doit cibler un registre ou un composant personnalisé contenant un registre
$18189600217529* [center]Implémente l'instruction OPCODE[/center]
$13450117997204* Ajoute un compteur dans le circuit
$77044880242883* Point d'observation {nr} doit cibler le compteur
$13870568875751* Crée un nouveau schéma et ajoute un programme avec une sortie de 4 octets
$10303603301757*
Implémente les opcodes suivants :
[code][color=#87a8c8]0 ADD
1 SUB
2 AND
3 OR
4 NOT
5 XOR[/color][/code]

L'opcode NOT ignore le second argument.
$17495651785164* Ajoute 6 registres à la carte


=== components/Mem Unit ===

$57670626909848* 1 bit de mémoire
$78616473760551* mémoire 1 Bit


=== rpg/maps/prison/snake ===

$41424386577594* Serpent
$44205554907271* Ssshhh, Ssshhh, Kss
$36655099439467* Sang


=== trans/panel_inputlevel_input ===

$27464111307888* Entrée


=== misc/credit_box ===

$15872341864658*
Remerciements sincères à

[b]Traducteurs[/b]
{translators}

[b]Premiers béta-testeurs[/b]
{beta_testers}

[b]Polices de caractères adaptées[/b]
{font_work}

[b]Musique Originale[/b]
 Adolfo Aaron Figueroa Bianchi

[b]Logiciels Open Source[/b]
{software}

[b]Ressources[/b]
{assets}


=== trans/level_flood_enter ===

$64481408588810* Appuie sur ENTRÉE pour montrer l'eau


=== trans/panel_matrix_input1 ===

$94408716277517* [right]Activer la couleur Jaune[/right]


=== trans/options_pan_left ===

$78515694621006* Déplacer la vue vers la gauche


=== rpg/maps/prison/control_panel_release ===

$78007210535349* Panneau de Contrôle


=== trans/panel_hdd_size2 ===

$82587023815880* Taille (64 bits) :


=== trans/panel_splitter8_input ===

$90934251511339* [right]Entrée[/right]


=== rpg/maps/unseen_fruit/Gulgramush JR ===

$21404721941060* Savais tu que les terriens mangent avec leur visage ?


=== misc/lab_toggle ===

$16432178820878* Labo


=== components/Program4 ===

$27522667367787* Programme
$45650720555565* Composant mémoire programmable


=== trans/options_controls ===

$18297012748869* Contrôles


=== levels/Counter ===

$17701404772563* Ajouter 1
$17940006660359* Compter
$17263901743088*
Construis un compteur qui s'incrémente de 1 à chaque cycle.

De plus il doit y avoir la possibilité de forcer le compteur à une valeur fournie.

Tu reçois 2 entrées, un bit et un octet.

Le bit en entrée permet de basculer entre les modes comptage et enregistrement de la valeur de l'octet.
$68874699768861* Enregistrer {value}
$17883663978196* Enregister
$19407121413983* ACTION
$10555159894041*
Compter est tellement fondamental que même les insectes le font. À partir de là, les espèces peuvent évoluer vers la comparaison et le calcul. Et alors que l'on ne s'y attend pas, voilà que des singes construisent des ordinateurs...

Réalise un composant qui compte en s'incrémentant une fois par cycle.


=== components/Constant32 ===

$39402227599142* Valeur constante
$30896164786171* Constante 32 bits


=== trans/manual_text_ram ===

$10969790213397*
Ce simulateur gère plusieurs types de RAM avec des caractéristiques différentes, comme ce qui existe en vrai.

[b]RAM[/b]
Le composant RAM peut stocker beaucoup de données, mais ajoute un délai important au circuit.

[b]RAM rapide[/b]
La RAM rapide a un délai faible, mais coûte beaucoup de portes par octet.

[b]RAM latence[/b]
La RAM normale a un délai trés élevé, mais au lieu d'attendre à chaque cycle, nous pouvons considérer que les lectures et écritures prennent plusieurs cycles. Le nombre de cycles pour lire et écrire va dépendre de la longueur du cycle. Si par exemple notre circuit a un délai de 100, une lecture prendra 10 cycles car nous devons attendre le délai de 1000.

Une approche courante pour les architectures pipelinées est d'utiliser de la RAM latence comme mémoire principale avec une petite quantité de RAM rapide comme cache. Comme les accès mémoire sont souvent proches ou adjacents (par exemple en itérant sur un tableau), la récupération des valeurs chargées depuis la RAM latence et cachées en RAM Rapide peut vraiment accélérer certains programmes.

La façon la plus simple d'intégrer la RAM latence est de bloquer toute l'architecture jusqu'à la fin de la lecture ou de l'écriture. Une première optimisation à partir de là c'est de se rendre compte qu'on a pas besoin d'attendre la fin des écritures, sauf si on doit relire.

[b]RAM Double Lecture[/b]
Parfois il est utile de séparer une partie de la logique dans une unité de traitement plus ou moins autonome. Elle peut servir pour gérer un écran ou une connexion réseau. Dans ce cas, l'unité indépendante aura souvent besoin de lire ou écrire la mémoire de façon continue alors que le reste de la logique n'a besoin de lire que de temps en temps. Utilise la RAM Double Lecture pour éviter d'avoir à arbitrer les accès simultanés à la RAM.


=== component_panels/sprite_display_select_button ===

$18632189666863* Choisis le fichier


=== levels/circular_dependency_check ===

$25155953943906* Correct !
$32314337981189* Vérifie
$73467991035922* Sans espoir !
$22446480186064* Crée une dépendance circulaire incluant au moins 2 composants


=== trans/map_locked ===

$95146987030704* Verrouillé


=== levels/decoder ===


#  Short because it will become the name of a custom component
$62618958406279* DEC
$16133643476631* Le circuit que tu as créé dans le niveau "Registres" peut copier des valeurs entre différents registres, tandis que "l'Unité arithmétique et logique" a la capacité de faire différentes opérations avec ses deux entrées.
$18435544383511* CALCULER\n[OFF] [ON] [ANY] [ANY] [ANY] [ANY] [ANY] [ANY]
$18198768092383* COPIER
$18945946395447*
Pour distinguer les 4 [INSTRUCTIONS], nous utiliserons les deux bits de plus haut poids qui définieront le MODE dans lequel nous serons.
Cette liste montre les 4 modes à implémenter:
[OFF] [OFF] [ANY] [ANY] [ANY] [ANY] [ANY] [ANY] Valeur immédiate
[OFF] [ON] [ANY] [ANY] [ANY] [ANY] [ANY] [ANY] Calculer
[ON] [OFF] [ANY] [ANY] [ANY] [ANY] [ANY] [ANY] Copier
[ON] [ON] [ANY] [ANY] [ANY] [ANY] [ANY] [ANY] Condition logique

Ici [ANY] veut dire que l'ont peut avoir n'importe quelle valeur.

Détermine le mode dans lequel nous sommes à partir de l'entrée et envoie [ON] vers la sortie correspondante.
$15105859227432* COPIER \n[ON] [OFF] [ANY] [ANY] [ANY] [ANY] [ANY] [ANY]
$15440615199508* Condition logique
$16785126425267* Calculer
$11382827588408* Condition logique\n[ON] [ON] [OFF] [OFF] [OFF] [ANY] [ANY] [ANY]
$12976424717611* Valeur immédiate\n[OFF] [OFF] [ANY] [ANY] [ANY] [ANY] [ANY] [ANY]
$82074370773365* INSTRUCTION
$12532951884542* Valeur immédiate
$10169248860836* Decode l'instruction


=== levels/call_ret/no ===

$90567812500955* Non
$82611295916141* Nous attendions mieux de toi.


=== trans/level_compute_xor_description ===

$61886892927185* Applique AND sur chaque bit 2 à 2


=== rpg/maps/overworld/chef (2) ===

$60791074149079* Chef


=== trans/options_effects_volume ===

$24145565754506* Volume des Effets


=== trans/panel_maker64_input ===

$67636019772385*
[right]Octet 1
Octet 2
Octet 3
Octet 4
Octet 5
Octet 6
Octet 7
Octet 8[/right]


=== trans/level_signed_negator_description ===

$87777776285772* [center]Inverse le signe du nombre[/center]


=== main_scripts/overture_level ===

$83829200305236* On attendait {expected} en sortie, pas {got}
$11338791453100* Dynamique
$27259865408750* Au prochain cycle la valeur du compteur sera {next}, on attend {expected}

#  Keep as short as possible as it has to fit on a component. 2 characters preferably, but 3 if you must
$85842797287714* R4
$12873109232054* On attendait {expected} en sortie, pas {got}

#  Keep as short as possible as it has to fit on a component. 2 characters preferably, but 3 if you must
$81103754316448* IN
$92808834805287* Copie l'ENTRÉE vers la SORTIE

#  Keep as short as possible as it has to fit on a component. 2 characters preferably, but 3 if you must
$39748815905832* R2

#  "cond" is for condition, this label has to be 4 letters or less as it has to fit on a component
$94982725578534* COND
$95030012922256* L'Entrée doit être activée seulement si nécessaire
$93579176707338* Copie l'ENTRÉE ({input_val}) vers REG {reg}

#  Keep as short as possible as it has to fit on a component. 2 characters preferably, but 3 if you must
$49076331369118* R5
$95699170830383* Valeur Immediate {nr} vers REG 0
$90667501138629* Si REG 3 ≥ 0, compteur = {val}
$15507583089532* REG {nr} doit avoir la valeur {value}

#  Keep as short as possible as it has to fit on a component. 2 characters preferably, but 3 if you must
$28690475492473* OUT
$19724825417529* Copie REG {n1} dans REG {n2}
$65651227755356* Au prochain cycle le compteur aura la valeur {actual}, mais on attend {expected}
$56098077111355* Si REG 3 ≠ 0, compteur = {val}
$36131297419794* Ne jamais réinitialiser le compteur (Ne rien faire)
$76213462280109* si REG 3 > 0, compteur = {val}
$47188699762650* La Sortie devrait être activée et ce n'est pas le cas
$75122220982708* Copie REG {n1} vers la SORTIE
$78673238418574* Il manque un composant compteur à ton circuit
$44533909869936* REG 1 and REG 2 sont des entrées de l'ALU, REG 3 est pour le résultat.\nIl semble que tu utilises REG 0, 1 and 2.
$28026304798371* La Sortie ne devrait être activée que quand c'est nécessaire
$51029568177086* Si REG 3 < 0, compteur = {val}

#  Keep as short as possible as it has to fit on a component. 2 characters preferably, but 3 if you must
$73538301913919* R0
$79405336618718* Valeur Immediate {nr} vers REG 0
$85260864781281* L'Entrée devrait être activée et ce n'est pas le cas

#  Keep as short as possible as it has to fit on a component. 2 characters preferably, but 3 if you must
$80997977734042* R3
$96569633331621* Charge {value} dans le REG 0

#  Keep as short as possible as it has to fit on a component. 2 characters preferably, but 3 if you must
$37653426314061* R1
$51099912089198* Compteur = {val}
$16914143080303* Copie
$50124579293905* Si REG 3 ≤ 0, compteur = {val}
$59042824277105* Valeur Immediate
$23384670264323* Si REG 3 = 0, compteur = {val}
$82949244692745* Calculer


=== levels/Further Delayed Lines ===

$17366913897135* Construis un circuit dont la sortie est identique à l'entrée avec un retard de 2 cycles.
$60989431641221*
Ce niveau présente le composant Ligne à Retard. Sa sortie est identique à l'entrée avec 1 cycle de décalage.

[img]dialogue/delay_buffer_fr.png[/img]


=== levels/negative_numbers ===

$17231048881956* Pour mesurer la différence entre deux valeurs, tu as besoin de la soustraction. Pour soustraire, tu as d'abord besoin des nombres négatifs.
$13872783467999* Écris {number} en binaire signé.
$49993940138672*
Ce niveau présente la représentation la plus courante des nombres négatifs, le complément à deux.

On inverse la valeur du bit de poids fort. Pour un octet cela signifie que la valeur du 8ème bit passe de 128 à -128.

Ce niveau est validé dès que tu atteins un niveau supérieur ou égal à 3.
$97450409600317*
[b]A RETENIR[/b]

1. Pour basculer entre les négatifs et les positifs, tu inverses tous les bits et ajoute 1.
2. L'additionneur octet que tu as construit fonctionne aussi avec les nombres signés.
3. Il n'y a toujours qu'une seule façon d'écrire chaque nombre.
$37471385247951* Bon travail, tu as atteint le niveau {current_level}.


=== trans/nand_Label2 ===

$60885816586685* Sortie


=== levels/NAND Gate ===

$17420270098223* Dans ce niveau, le but sera de comprendre comment fonctionne une porte NAND. Sois [color=#dd6576]sûr[/color] de savoir comment elle fonctionne avant de valider le niveau, sinon tu pourrais être bloqué dans le prochain!
$11034378482152* Correct ! Tu as débloqué la porte NAND. Avec ce composant tu pourras construire tout le reste de ton ordinateur!
$18270083417453* Vérifier
$19208664264770* [b]Consigne[/b]\nClique sur l'un des boutons de la dernière ligne du tableau.
$17923274216766* Nous en avons conclu que tu n'es probablement pas une plante.
$14777350869870* Nous sommes impressionnés par ta capacité à résoudre le dernier test !
$17994568832660* [b]Consigne[/b]\nLa porte NAND au milieu du circuit change son comportement.\nUtilises la barre sur la gauche pour expérimenter les effets qu'ont les entrées sur les sorties et compléte le tableau en conséquence.


=== trans/options_copy ===

$55679445263875* Copier


=== components/Bit Compressor ===

$74338505460996* Rassemble 8 bits en 1 octet
$98747779812970* Créateur 8 bits


=== components/Input 2 ===

$86870364449392* Entrée


=== trans/options_pan_down ===

$93140495547084* Déplacer la vue vers le bas


=== components/Mux64 ===

$14050204031082* Alterne entre deux valeurs
$66892629981737* Multiplexeur 64 bits (Mux)


=== trans/manual_hard_disk ===

$45865138134248* Disque dur


=== components/NOR ===

$27510848535619*
[ON] quand aucune entrée n'est [ON]
[table=5]
[cell]Entrée 1[/cell][cell][OFF][/cell][cell][OFF][/cell][cell][ON][/cell][cell][ON][/cell]
[cell]Entrée 2[/cell][cell][OFF][/cell][cell][ON][/cell][cell][OFF][/cell][cell][ON][/cell]
[cell]Sortie[/cell][cell][ON][/cell][cell][OFF][/cell][cell][OFF][/cell][cell][OFF][/cell]
[/table]
$83375115196253* NOR


=== rpg/maps/unseen_fruit/Sign ===

$96190557871470* Panneau
$11494676474259*
Ca dit : Robot, be reste pas là à lire les panneaux,
va chercher le fruit !


=== levels/hex_racer ===

$92057009138253* Comment écrire {number} en binaire ?
$16009852370452*
Quand on manipule beaucoup de bits, le binaire commence à être difficile à lire. L'Hexadécimal (base 16) représente chaque combinaison de 4 bits par son propre caractère :
[code]
0 [OFF][OFF][OFF][OFF]
1 [OFF][OFF][OFF][ON]
2 [OFF][OFF][ON][OFF]
3 [OFF][OFF][ON][ON]
4 [OFF][ON][OFF][OFF]
5 [OFF][ON][OFF][ON]
6 [OFF][ON][ON][OFF]
7 [OFF][ON][ON][ON]
8 [ON][OFF][OFF][OFF]
9 [ON][OFF][OFF][ON]
A [ON][OFF][ON][OFF]
B [ON][OFF][ON][ON]
C [ON][ON][OFF][OFF]
D [ON][ON][OFF][ON]
E [ON][ON][ON][OFF]
F [ON][ON][ON][ON]
[/code]

Voici un exemple de la meilleure lisibilité de l'hexadécimal, comparons les représentations du plus grand nombre de 16 bits :
[code]
Binaire :     1111111111111111
Décimal :     65535
Hexadécimal : FFFF
[/code]

Ce n'est pas facile de dire s'il manque un chiffre binaire ou s'il y a un décalage en décimal, mais l'hexadécimal est tout de suite clair (au moins une fois qu'on prend l'habitude).
$84691609525475* Ce niveau est mon deuxième passe-temps préféré. Convertir de l'hexadécimal au binaire en temps limité.
$87016829502381* Très bien, tu as atteint le niveau {current_level}.
$43463538043782*
Modifie les bits du panneau pour atteindre le nombre hexadécimal demandé.

Tu dois finir le niveau 3 pour réussir.

(clique [color=#e63e5b][url=accessibility_mode]ici[/url][/color] pour activer le mode accessible sans compte à rebours)


=== trans/level_full_adder_RichTextLabel2 ===

$25766177620842*
[right][color=#e49f44]Entrée 1
Entrée 2
Entrée 3[/color]
Somme attendue
Retenue attendue
Somme courante
Retenue courante[/right]


=== components/Ror8 ===

$10802217509530* Rotation à droite des bits d'une entrée
$70999134800536* Rotation à droite


=== components/NAND ===

$71130919681688* NAND
$12903183841172*
[ON] sauf si les 2 entrées sont [ON]
[table=5]
[cell]Entrée 1[/cell][cell][OFF][/cell][cell][OFF][/cell][cell][ON][/cell][cell][ON][/cell]
[cell]Entrée 2[/cell][cell][OFF][/cell][cell][ON][/cell][cell][OFF][/cell][cell][ON][/cell]
[cell]Sortie[/cell][cell][ON][/cell][cell][ON][/cell][cell][ON][/cell][cell][OFF][/cell]
[/table]


=== trans/map_arithmetic ===

$51337598329530* ARITHMÉTIQUE


=== trans/options_general_tps ===

$53724631742096* Afficher les cycles par seconde


=== trans/rotate ===

$88236351843942* Rotation


=== levels/Dancing Machine ===

$14975070588197*
Nous aimons tous la façon dont le Robot bouge sur la piste de dance. C'est pourquoi nous le voulons à la tête de notre équipe de danceurs.
  
Le seul problème c'est de lui faire trouver des séries de mouvements originaux. Comment pourrait-on bien obtenir de la créativité à partir d'une logique déterministe ?

La solution a pour nom générateurs de nombres pseudoaléatoires.
$15955150920362*
Dans ce niveau tu n'as qu'une entrée, nous l'appellerons la graine initiale. La graine passe par les étapes suivantes pour produire un nombre pseudoaléatoire.

Dans l'algorithme ci-dessous, "shl 1" signifie un décalage à gauche,  "shl 2" signifie double décalage à gauche et "shr 1" un décalage à droite.

[b]8 bit xorshift RNG :[/b][code][color=#87a8c8]
temp1     = seed  xor (seed  shr 1)
temp2     = temp1 xor (temp1 shl 1)
next_seed = temp2 xor (temp2 shr 2)
[/color][/code]
Ensuite envoie en sortie next_seed mod 4 pour déplacer le robot. Enfin utilise next_seed (avant le mod 4) comme graine pour obtenir le nombre suivant pour la séquence de danse et ainsi de suite.

(Attention la graine initiale ne sera jamais 0)


=== trans/level_dance_description ===

$29803992718733* Génère des mouvements de dance


=== trans/panel_fileloader_enable ===

$80528055112236* [center]Activer[/center]


=== misc/program_edit_signals ===

$98772447663910* Éditer les points d'observation


=== main_scripts/levels ===

$64510812504271*
Certains composants utilisés ne sont pas supposés être disponibles dans ce niveau !
La solution n'obtient pas de score.

#  Level type for the level complete menu
$58769207148712* Composant

#  Level type for the level complete menu
$90134890578411* Divers
$68327708695625* [b]Entrée de Manuel[/b]\n\n Entrée : [color=#68d277]{page}[/color]

#  Level type for the level complete menu
$69219742310717* Architecture


=== trans/level_decodre_RichTextLabel2 ===

$40723962298647*
[right][color=#e49f44]Entrée 1
Entrée 2
Entrée 3[/color]
Bit attendu
Bit courant[/right]


=== trans/manual_bytes ===

$46223559629673* Octets


=== component_panels/Counter ===

$42544828625264* Le compteur ne fonctionne pas avec un incrément de 0
$57936010210151* Incrementer de : {amount}


=== trans/panel_ram8_output ===

$90649838965927* Sortie


=== trans/level_complete_ide ===

$56719825235196*
[b]IDE CODE[/b]
[color=#cccccc][i]Nomme les instructions et édite les programmes dans un éditeur pratique[/i][/color]


=== trans/panel_cond_input_2 ===

$82398835019064* Bit 2


=== trans/and_gate_3_RichTextLabel2 ===

$52008707927408*
[right][color=#e49f44]Entrée 1
Entrée 2
Entrée 3[/color]
Sortie attendue
Sortie courante[/right]


=== rpg/maps/overworld/captain_grog ===

$54304087865803* Boucliers activés et saut dans l'hyperexpace !
$28819210888759* Capitaine Grog


=== trans/panel_nand ===

$51470292662088*
[right]Entrée 1
Entrée 2
Output[/right]


=== rpg/maps/overworld/hat_man ===

$66365217340789* Homme au chapeau


=== trans/panel_mul_input ===

$52124868557994*
[right]Entrée 1
Entrée 2[/right]


=== components/LessU32 ===

$72614358420262* Inférieur (non signé)
$55380524073095* Détermine si une entrée est inférieure à l'autre


=== trans/options_level ===

$64744152268407* Niveau


=== components/Output64z ===

$35798118634001* Sortie commutée 64 Bits
$42506906257154* Sortie activée seulement quand la patte d'activation est [ON]


=== ui/toggles/race_condition ===

$75558678297830* Dépendance circulaire


=== trans/assembly_editor_header ===

$14116831487331* Editeur Assembleur


=== trans/options_paste ===

$52159578521318* Volume de la Musique


=== trans/level_double_buffer_RichTextLabel3 ===

$27208335953837*
[right]Entrée
Sortie attendue
Sortie courante[/right]


=== trans/hub_stats ===

$30942143953871* Utilisateur


=== trans/manual_text_truth ===

$16559670174521*
Les tables des entrées et sorties qui sont utilisées partout dans le jeu sont appelées des tables de vérité.








L'"Entrée" et la "Sortie" seront souvent représentées avec des noms de variable, comme en algèbre. Et au lieu d'utiliser des couleurs, tu verras souvent les valeurs représentées sous forme de 0 / 1 ou Faux / Vrai.


=== trans/manual_text_terminology ===


# DateCustoms
$99266452352883*
[b]Instruction[/b]
Un Octet ou série d'octets qui ensemble font réaliser une action spécifique à l'ordinateur.

[b]Opcode[/b]
La partie de l'instruction qui détermine quelle opération (comme ADD ou AND) sera réalisée.

[b]Adresse Mémoire[/b]
Un nombre utilisé comme nom pour un emplacement mémoire (souvent pour un registre). Ils servent à indiquer ou l'instruction doit charger ou écrire les données.

[b]Saut[/b]
Modifie la valeur du compteur de programme, ce qui change l'instruction suivante à charger/


=== levels/Conditionals ===

$10794262854382*
Ajoute des instructions si à ton circuit. Avec l'instruction si, les 2 arguments sont comparés et si la condition est vraie, le compteur est chargé avec une adresse de saut.

L'instruction précédente contient 4 octets qui représentent :  
[code][color=#87a8c8]OPCODE, ARGUMENT_1, ARGUMENT_2, RÉSULTAT[/color][/code]

Pour l'instruction si les octets représentent :
[code][color=#87a8c8]OPCODE, ARGUMENT_1, ARGUMENT_2, ADDRESSE_SAUT[/color][/code]

En plus des copeops précédents, ajoute :
[code][color=#87a8c8]32 SI_EGAL
33 SI_NON_EGAL
34 SI_MOINS
35 SI_MOINS_OU_EGAL
36 SI_PLUS
37 SI_PLUS_OU_EGAL[/color][/code]

Compare avec les composants pour nombres non signés.

Chaque opcode fait ce que son nom indique. Par exempie pour sauter à l'octet 16 si REG0 est inférieur à REG1 : 
[code][color=#87a8c8]SI_MOINS REG0 REG1 16[/color][/code]
$18542005958715* Définis l'incrément du compteur à 4
$17133561664335* Félicitations, tu as terminé l'ordinateur [color=#e49f44]LEG[/color] !
$14973719570693* Ajoute un compteur au circuit
$12920514303805* Ajoute 6 registres au circuit
$14309211963063* Crée un nouveau schéma et ajoute un programme avec une sortie de 4 octets
$16826220977157*
 [color=#b72d41][b]ASTUCE[/b][/color] 
 COPY est identique à ADD avec un second
 argument à 0
$14690660047411* [center]Implémente les opcodes conditionnels[/center]
$30132649789584* Le point d'Observation {number} doit pointer sur la sortie
$18994998239232* Je vais te montrer quelques évolutions que tu peux faire, afin d'implémenter les appels de fonction. Mais à partir de là tu devras t'occuper des détails, je ne te dirai plus quels opcodes utiliser, etc.
$12034111753799* Le point d'Observation {number} doit pointer sur le compteur
$36561706158040* Le point d'Observation {nr} doit pointer sur un registre ou un composant personnel contenant un registre


=== misc/multi_select ===

$85147529532131* Sélection multiple (Raccourci : SHIFT & glisser)


=== components/Splitter16 ===

$92674917729864* Répartiteur 16 bits
$28271182652741* Répartit 16 bits en 2 octets


=== trans/manual_text_universal_gates ===

$37735744928195*
Il s'avère que tu peux construire toute la logique d'un ordinateur à partir de portes NAND ou NOR. Les ordinateurs de guidage Apollo étaient entièrement construits de portes NOR. Conçus dans les années 60, ils n'avaient que 4 Ko de RAM et 32 Ko d'espace disque, mais ils ont emmenés les astronautes vers la lune.

Les ordinateurs modernes ne sont pas entièrement construits avec une seule des portes universelles, mais le cas échéant, les portes NAND sont préférées aux NOR, car elles ont moins de latence et occupent moins d'espace.


=== rpg/maps/overworld/slime ===

$15692058001120* Bave
$69726620971060* J'ai ramassé toute la gelée nécessaire
$87592944464187* Gelée ramasée, encore {nr} à trouver
$44317276399194* Gelée baveuse


=== trans/panel_segment_info ===

$64695289448271* Les 8 bits de la valeur activent chacun une des 8 zones de l'afficheur.


=== trans/inputlevel_enable ===

$28654406516589* [center]Activer / Désactiver[/center]


=== trans/panel_keyboard_event ===

$67549215280299* En attente évênement


=== trans/levels_byte_or_description ===

$68379799788575* [center]Applique OR sur chaque paire de bit[/center]


=== levels/counting_signals ===

$10724914203078*
Le composant sortie de ce niveau est un compteur binaire dont les 3 premières pattes correspondent à 1, 2 et 4.
Utilise le compteur binaire pour compter le nombre de signaux.

Regarde [color=#e63e5b][url=counting_signals]cet indice[/url][/color] si tu te retrouves coincé

[i][tip]La solution de ce niveau n'est pas très propre et nécessite pas mal de composants.[/tip][/i]
$10881918807029*
 [color=#b72d41][b]ASTUCE:[/b][/color] 
 Il n'y a pas de honte à utiliser
 une feuille et un stylo


=== misc/button_next ===

$80746616574054* Suivant (Raccourci F5)


=== ui/toggles/level_map ===

$71951682957395* Carte des niveaux


=== components/DivMod64 ===

$80284847781948* Diviser
$71663353206665* Diviser et calculer le modulo de deux nombres


=== levels/saving_bytes ===

$10633476398156*
Crée un circuit qui pourra [SAUVEGARDER] ou [CHARGER] un octet.


Lorsque le premier bit est [ON], [CHARGER] la mémoire et envoye-la vers la sortie.
Lorsque le second bit est [ON], [SAUVEGARDER] l'octet en entrée.

La sortie a une broche active. Activez-le uniquement sur [LOAD].
$15510981129613* CHARGER
$13502950630653*
[color=#ff9800]Aucune
0
0[/color]
$19109563882664* NE PAS CHARGER
$16372198430230* SAUVEGARDER
$11467279617581* SAUVEGARDER
$15498440508450* Ne rien faire
$10080722944246* NE PAS ECRIRE
$15582618410991* CHARGER ET SAUVEGARDER
$18873598212433* CHARGER


=== levels/byte_constant ===

$12641789008694* Crée un circuit dont la sortie est toujours le nombre 164.


=== trans/panel_ram_fast_input ===

$80778301064570*
[right]Lire
Écrire
Adresse
Écrire valeur
Écrire valeur
Écrire valeur
Écrire valeur[/right]


=== levels/odd_ticks ===

$18510295620397* Met la sortie à [OFF] pendant les cycles pairs et [ON] pendant les cycles impairs.
$16987046679863* Tu as appris précédemment que nous n'acceptons pas les dépendances circulaires. Il existe cependant une exception à la règle que tu vas voir maintenant.
$16037516781370*
Les pattes des composants carrés ne vont pas affecter la sortie du composant pendant le même cycle, c'est pour cela que l'on peut les utiliser pour les dépendances circulaires. 
  
  [img]dialogue/delay_buffer_fr.png[/img]
$17588119878416*
Le ligne à retard a le droit de dépendre de sa sortie, car son entrée ne va pas influencer le reste du circuit jusqu'au prochain cycle.
  
[img]dialogue/delay_buffer_fr.png[/img]


=== components/Adder Simple ===

$33973952772642* Ajouter
$98429814030509* Ajoute 2 entrées


=== trans/panel_ram8_input ===

$54796685972031*
[right]Lis
Ecris
Addresse
Ecris valeur[/right]


=== trans/level_complete_delay ===

$73470840319057*
[b]Délai[/b]
[color=#cccccc][i]Tu peux désormais voir le délai de tes circuits et des composants.[/i][/color]


=== trans/panel_ram_fast_output ===

$44175594625487*
Sortie 1
Sortie 2
Sortie 3
Sortie 4


=== trans/level_saving_gracefully_RichTextLabel3 ===

$74117520663650*
[right][color=#e49f44]Sauvegarder
Valeur[/color]
Sortie attendue
Sortie actuelle[/right]


=== misc/select_color ===

$97461374731210* Couleur de fil


=== trans/manual_text_circular_dependency ===

$29050562435902*
Une dépendance circulaire apparaît quand l'entrée d'un composant dépend de sa propre sortie.

[center][img]res://dialogue/circular_dependency.png[/img][/center]

Ce simulateur n'autorise pas les dépendances circulaires et génère alors une erreur.

Les pattes carrées sont une exception, elles influencent la sortie mais lors d'un autre cycle. Elles ne peuvent donc pas causer de dépendance circulaire.

[center][img]res://dialogue/delay_buffer_fr.png[/img][/center]


=== trans/panel_splitter16_output ===

$19314358335345*
Sortie 1
Sortie 2


=== rpg/maps/overworld/door3 ===

$62992379521216* Porte
$12075276554344* La poignée de porte est cassée


=== trans/level_alu2_text ===

$58359423026017*
[right]Code
[color=#e49f44]Entrée 1
Entrée 2[/color]
Sortie attendue
Sortie actuelle
[/right]


=== trans/options_explicit_clock ===

$90384542658266* Horloge explicite


=== levels/push_pop ===

$78804623186243* SORTIE
$49526452710191* NE PAS DEPILER
$58050047963238* VALEUR
$30926395960020* EMPILER
$19245209470436* Crée une pile

#  Short because it will become the name of a custom component
$84236889840605* PILE
$12227209887733* A chaque cycle les entrées indiqueront soit EMPILER soit DÉPILER. Si c'est EMPILER, stocke la valeur en haut de la pile. Quand c'est DÉPILER retire cette valeur de la pile et envoie-la en sortie.
$15662660252584* Ne rien faire
$85171087236638* ACTIVER
$23726790986805* DEPILER
$62469306234943* NE PAS EMPILER
$46948857059388* DEPILER valeur {value} de la pile
$18761197388580* Pour raison d'économies, il a été décidé de gérer différemment les files d'attente dans les établissements publics pour réduire le nombre de demandes. Plus de premier arrivé, premier servi, maintenant la règle ce sera dernier arrivé, premier servi. Imagine une [color=#e49f44]pile[/color] de fiches numérotées où les usagers peuvent aller poser leur fiche au-dessus (action [color=#e49f44]EMPILER[/color]) et les fonctionnaires prennent la fiche du haut de la pile (action [color=#e49f44]DÉPILER[/color]). A toi d'implémenter ce nouveau système.
$65188797398656* EMPILER {value} sur la pile


=== levels/The Product of Nibbles ===

$14622683750375* Bit 2
$14957949958941* Ce que tu as fait ici c'est en fait une multiplication de deux nombres de 4 bits. Le stagiaire s'est chargé de l'étendre aux octets.
$17331397914567* Bit 1
$19136817138607* [center]Multiplie les nombres de 4 bits[/center]
$13232094477834* Bit 3
$13549246864135* Bit 0
$15857218442751* Bit 1
$14533861483435* La multiplication de deux nombres de 4 bits donne un nombre de 8 bits. Réalise le schéma adapté.
$10430040077737* Bit 3
$10274387271390* Bit 0
$16301538038805* Bit 2
$83694551809785* Multiplier {num1} et {num2}


=== trans/panel_matrix_column_major ===

$90704227545058* en colonne


=== trans/panel_counter16_input ===

$87154643308632*
[right]Incrémenter / Remplacer
Remplacer la valeur[/right]


=== rpg/maps/spacial_invasion/door ===

$59863326177819* La porte est verrouillée
$13853333722323* Porte


=== trans/panel_not ===

$33240384048149*
[right]Entrée
Sortie[/right]


=== ui/toggles/level_log2 ===

$91515053618360* Manuel


=== main_scripts/functions ===

$11467644007149* Compteur {nr}
$35675567872962* Un compteur ne peut pas fonctionner avec un incrément de 0
$73560327420927* Cette sauvegarde provient d'une version obsolète de ce niveau.\nCrée et charge un nouveau schéma avec le menu schéma.
$41936481068702* Compteur
$99285446909923* Pour résoudre ce niveau tu dois utiliser le composant 'Sortie du Niveau'
$72465734060414* Court-circuit sur le fil (valeurs en sortie  {values})
$10533010562232* DÉLAI : {delay}
$10098517717617* Test : {nr} / {total}
$83854326413007* Le composant personalisé "{name}" a changé de taille et a été supprimé du schéma car il n'y avait plus assez de place.
$29225283986051* Pour résoudre ce niveau tu dois utiliser le composant 'Entrée du Niveau'
$87591753278764* Registre {nr}
$39587966698723* Court-circuit dans {custom_component}
$95056157627313* Pour résoudre ce niveau tu dois utiliser le composant 'Entrée du Niveau'

#  Right hand side menu
$29169064199243* Sortie {nr}
$12249248261034* Pour résoudre ce niveau tu dois utiliser le composant 'Sortie du Niveau'
$13327741293223* Entrée {nr}
$32508339206292* PORTES : {gate}
$42012207828907* Registre


=== misc/view_solution_button ===

$59351520832720* Oui


=== levels/or_gate_3 ===

$15448906128695* Réalise une porte OR avec 3 entrées.


=== trans/binary_racer_count_down2 ===

$23959994711260* Prêt pour la course ?


=== trans/level_capitalize_input ===

$23002150617591* Entrée


=== trans/delay_score ===

$29032982097458* DÉLAI :


=== trans/panels_config_delay_delay ===

$52499013005170* [right]Délai[/right]


=== trans/panel_mul_output ===

$55253255963402*
Moité inférieure
Moitié supérieure


=== rpg/maps/unseen_fruit/Lolbert ===

$77789556089413*
Les fruits terrestres sont tellement meilleurs
que le ragoût qu'ils servent d'habitude


=== trans/map_complete ===

$81337533438394* Complet


=== levels/Storage cracker ===

$11910674853271*
La porte sécurisée de la réserve est défaillante et elle enferme régulièrement notre vieil homme de ménage.
La porte n'arrête pas de changer le code d'accès, nous avons besoin d'un programme qui peut le récupérer quand c'est nécessaire.
$17462419719036*
La façon la plus simple de trouver le code serait d'essayer toutes les combinaisons jusqu'à ce que tu trouves la bonne.
Le mécanisme défectueux fait un bruit désagréable quand ton essai est trop grand, il doit être possible d'en tirer profit.
$11183892008673* Tu réussis ce niveau en envoyant en sortie le code correct, il n'est pas possible d'échouer avec une mauvaise sortie. De plus l'entrée sera à 1 après un essai trop grand et 0 sinon.


=== trans/level_alu1_text ===

$53254733455389*
[right]Code
[color=#e49f44]Entrée 1
Entrée 2[/color]
Sortie attendue
Sortie actuelle
[/right]


=== components/Output16 ===

$48008022162230* Sortie 16 Bits


=== rpg/maps/overworld/book_shelf ===

$29366577532389* Etagère
$26595142082551* Une belle étagère


=== components/Input 3 ===

$70689623552857* Entrée


=== trans/options_cut ===

$88238310953306* Couper


=== trans/panel_network_next_event ===

$80836714383432* Prochain [color=#39aa49]Type Evenement[/color]


=== rpg/maps/overworld/gruliette ===

$83120363112787* Oh salut beau gosse
$61022705156373*
Oh mon dieu non, j'ai fini
cette quête
$84856635901648* IHHHhhhh mon cœur fond !
$16008092188500* Gruliette
$58406047748371*
Seulement s'il peut m'apporter
une fleur rose
$18919563572338*
Veux-tu aller
à un rendez-vous avec Dumio ?
$68101445990611* Voici la fleur rose
$68725679456014*
*schmuck* apporte ce baiser
à Dumio pour mo
$73977053028689* Oh salut beau gosse
$50949692384224* Mes oreilles me font mal
$35813418867082* C'est au hasard


=== trans/manual_text_top_truth ===

$83283949590490* porte AND


=== trans/panel_fileloader_description ===

$72892007399429*
La rom fichier envoit en sortie le contenu d'un fichier par bloc de 8 octets.

L'adresse 64 bits maximale (0xFFFFFFFFFFFFFFFF) est spéciale et renvoit en sortie la longueur du fichier en octets.


=== trans/and_gate_RichTextLabel2 ===

$98472849629373*
[right][color=#e49f44]Entrée 1
Entrée 2[/color]
Sortie attendue
Sortie courante[/right]


=== components/Clock ===

$29674337035619* L'usage de l'horloge divise les cycles en deux phases. L'horloge est [OFF] dans la première phase et [ON] dans la seconde phase. Tous les composants mémoire chargent dans la première phase et écrivent dans la seconde phase.
$73207565196164* Horloge


=== components/1_decoder ===

$26685462633615* Bascule entre deux sorties
$98250587600120* Décodeur 1 bit


=== trans/panel_input_left ===

$91063734228931* Gauche


=== components/XOR ===

$86856280609387*
[ON] quand les entrées sont différentes
[table=5]
[cell]Entrée 1[/cell][cell][OFF][/cell][cell][OFF][/cell][cell][ON][/cell][cell][ON][/cell]
[cell]Entrée 2[/cell][cell][OFF][/cell][cell][ON][/cell][cell][OFF][/cell][cell][ON][/cell]
[cell]Sortie[/cell][cell][OFF][/cell][cell][ON][/cell][cell][ON][/cell][cell][OFF][/cell]
[/table]
$54832952840086* XOR


=== trans/options_undo ===

$58334563411624* Annuler


=== misc/factory ===

$53123649343022* Atelier de composants


=== trans/tps_label ===


#  Stands for Ticks Per Second (an option in the menu)
$25685496576554* CPS :


=== trans/manual_ram ===

$61854681801183* RAM (mémoire vive)


=== trans/levels_computing_input ===

$23173159754705*
Code
Entrée


=== trans/manual_header ===

$10757271456963* Manuel


=== components/Ror16 ===

$13970397213910* Rotation à droite des bits de l'entrée
$90115282457191* Rotation à droite


=== misc/opcode_name ===

$15090156481094* Nom


=== rpg/maps/overworld/thing ===

$97983135944004* Chose
$65301573705048* Dois-je tout regarder ?


=== trans/panels_sound_description ===

$65379881141228*
[b][color=#e49f44]Type de Commande[/color][/b]
[code]0[/code] Aucune Requête
[code]1[/code] [color=#e49f44]Lire[/color]
[code]2[/code] [color=#e49f44]Retour et lire[/color]
[code]3[/code] [color=#e49f44]Stop[/color]


=== misc/level_gate_unlocks_unknown ===


#  This is a tooltip for levels on the level map, before something has been unlocked.
$76731326010721* Débloque quelque chose d'inconnu


=== trans/map_cpu_architecture ===

$95559333192525* ARCHITECTURE PROCESSEUR


=== trans/levels_negative_header ===

$82195103144851* [center]Spécifications[/center]


=== components/LevelOutput1 ===

$12242923444593* Sortie


=== levels/byte_adder ===

$16888130664370*
Si le résultat prend plus que 8 bits de place, met la sortie retenue à [ON] (tu peux l'utiliser comme un 9ème bit)

Il y a aussi une entrée retenue, elle sera utile pour additionner des octets à la suite. On additionne la retenue en entrée au résultat (0 [OFF] ou 1 [ON]).

Utilise [color=#e63e5b][url=byte_adder]cet indice[/url][/color] si tu es coincé.
$18732877690173* Additione les deux octets en entrée. Chaque bit en sortie devra être le résultat de l'addition des bits d'entrées et potentiellement de la retenue. 


=== components/Mux32 ===

$16638728645850* Alterne entre deux valeurs
$21257226547838* Multiplexeur 32 bits (Mux)


=== components/Shr32 ===

$87104108203785* Décalage à droite des bits de l'entrée
$88430124157796* Décalage à droite


=== trans/levels_bytw_or_text ===

$21877344150481*
[right]
[color=#e49f44]Entrée 1
Entrée 2[/color]
Sortie attendue
Sortie courante
[/right]


=== components/DelayLine64 ===

$80000130396288* Ligne à retard 64 bits
$35525647389906* Envoie en sortie au prochain cycle l'entrée de ce cycle 


=== rpg/maps/prison/shelf ===

$31961489023013* Etagère


=== trans/manual_Cyclic recipes ===

$45682345144408* Recettes circulaires


=== trans/level_flood_predictor_description ===

$24034386495895* Trouve le meilleur emplacement pour la glissade du Pirate


=== main_scripts/dialogue ===

$95287273202819* Écrire

#  hint for odd number
$68750974209145* Tu peux déterminer si 2 entrées ont un nombre impair de [ON] avec juste un unique composant...

#  hint for the bus
$50799425816171* Utilise des commutateurs pour placer les entrées sur le même fil.

#  Hint for the maze
$36837749971886*
En suivant toujours le mur gauche (ou droit) du labyrinthe tu es sûr d'atteindre la sortie au bout d'un moment.

Le pseudo-code pour cet algorithme est à peu près :
 Avance d'un pas
 Tourne à gauche
 Tourne à droite tant qu'il y a un mur en face
 Tente d'ouvrir une porte (au cas ou la sortie serait en face) 
 Recommence

#  Hint for byte adder
$37093555217568* Tu n'as besoin que de 8 additionneurs complets.

#  hint for counting signals
$21044442262778* Le schéma pour les bits impairs est semblable à ce qui a été fait pour "Nombre IMPAIR de Signaux". Pour les bits pairs c'est comme dans "Doublement compliqué", sauf si les 4 sont ON.

#  hint for saving gracefully
$25321701584378*
Dans ce niveau tu dois utiliser 1 Ligne à Retard. Ecris la table de vérité de ce qui doit aller dans la Ligne à Retard. Traite l'entrée de la Ligne à Retard comme la sortie de ta table.

Les entrées sont les 2 entrées du niveaux ET la sortie de la Ligne à Retard, car la sortie dépend modifie sa propre entrée. Au total tu as trois "entrées" pour cette table ce qui fait 8 combinaisons. Une fois que l'objectif du niveau est sous forme de table, il devrait être beaucoup plus simple à résoudre.
$43114846393781* LIRE
$65118645692603* instruction
$53308028631558* instructions

#  Hint for masking time
$46866534894828*
En binaire, calculer le modulo 4 d'un nombre revient à conserver seulement les 2 bits de poids faible. C'est dû au fait que les bits supérieurs représentent 4,8,16 qui sont tous multiples de 4.
C'est vrai en général pour le modulo d'une puissance de 2, le bit le plus faible représente le nombre modulo 2 (pair ou impair), les 3 bits les plus faibles le modulo 8 et ainsi de suite.

De même, en décimal 4321 modulo 100 est aussi simple à calculer (la  réponse est 21, les chiffres de rang supérieur sont ignorés), du fait que 100 est une puissance de 10.

Maintenant tu dois juste trouver comment obtenir les 2 derniers chiffres d'un nombre.
$52150443679969* Continue

#  hint for less
$56438995128380*
D'abord tu dois déterminer quels bits sont différents entre les 2 octets. Ceci peut se faire avec un XOR octet (souvenons nous que XOR est [ON] quand les entrées diffèrent). Nous savons que le nombre qui a le plus haut bit différent à [ON] est le plus grand. Mais il ne faut considérer que le plus haut bit différent, donc pour chaque bit, utilise un chaine de portes OR pour vérifier si un bit supérieur est [ON].

Enfin, le dernier bit doit être considéré séparément pour les nombres signés, il a l'effet opposé (si un seule nombre l'a [ON], ce nombre est forcément inférieur)
$89787506720574* Fermer
$66207112287034* ASTUCE


=== components/Nand32 ===

$24565725389553* NAND bit à bit sur 2 valeurs 32 bits
$71611588991682* NAND 32 bits


=== trans/options_ui_scale ===

$78210579950439* Échelle de l'interface


=== trans/odd_number_error ===

$61530231182650* Trop de composants utilisés


=== components/ByteAnd ===

$61791872137683* AND bit à bit de deux valeurs
$21541105796357* AND 8 Bits


=== rpg/maps/prison/prison_guard ===

$12720535616690*
Tu ne devrais pas
être là robot !
$48106038104468* Sang
$54139682820568* Gardien de Prison


=== components/Counter ===

$51446864816252* S'incrémente à chaque cycle hors réinitialisaition
$67910883947749* Compteur 8 bits


=== trans/ide_assembly_codes ===

$62016169253008* [center]Codes Assembleur[/center]


=== trans/options_general_title ===

$21908594290225* Général


=== schematics_hub/accept_license ===

$72317516399185* Accepte d'utiliser la licence [color=#dd6576][url=cc0]CC0[/url][/color]


=== trans/panel_screen_description ===

$31014036880257* L'écran montre l'affichage des niveaux dans la campagne principale.


=== rpg/maps/overworld/fighter_plane ===

$12257592826946* J'en veux un !
$37870979642704* Avion de chasse


=== components/Keyboard ===

$40965596602414* Clavier
$76766452660421* Enregistre les appuis de touches de ton clavier


=== misc/level_close ===

$79455494572697* Continue


=== trans/level_byte_xor_text ===

$15756501406553*
[right]
[color=#e49f44]Entrée 1
Entrée 2[/color]
Sortie attendue
Sortie courante[/color]
[/right]


=== trans/dual_ram_output ===

$23716875158240*
Sortie 1
Sortie 2


=== trans/manual_edit_instructions ===

$86365051641280* Éditer les instructions


=== trans/panel_xnor ===

$84353654486355*
[right]Entrée 1
Entrée 2
Sortie[/right]


=== levels/unseen_fruit ===

$13023474026617*
Les fruits sont la découverte la plus remarquable sur ta planète. Ils sont très savoureux.

C'est pourquoi nous organisons une dégustation de fruits dans cette cantine.
$14259900563789* Surveille régulièrement le tapis roulant sur lequel les fruits arrivent. Si tu vois le même type de fruit pour la seconde fois, active et tourne le panneau de contrôle.
$17070232883226* Mais nous voulons être sur de ne pas avoir deux fois le même fruit, car cela serait trop embarrassant.


=== component_panels/NoteSound ===

$77965930443088* Personalisé
$13027096115070* Defaut
$22175469402467* Aucun


=== levels/conditions ===

$12951779797594*
Dans ce niveau il y a en entrée une valeur et 3 bits de condition.

Les 3 bits déterminent la condition comme indiqué ci-dessous. Évalue la valeur en fonction de la condition et envoie [ON] si elle est vérifiée et [OFF] sinon.

Code condition       Sortir [ON] si [code]
[OFF] [OFF] [OFF]    Jamais
[OFF] [OFF] [ON]    Si valeur = 0
[OFF] [ON] [OFF]    Si valeur < 0
[OFF] [ON] [ON]    Si valeur ≤ 0
[ON] [OFF] [OFF]    Toujours
[ON] [OFF] [ON]    Si valeur ≠ 0
[ON] [ON] [OFF]    Si valeur ≥ 0
[ON] [ON] [ON]    Si valeur > 0[/code]
$16407231803964* Si VALEUR < 0 sortie [img]dialogue/on.png[/img]

#  Short because it will become the name of a custom component
$40613359684193* COND
$16742265812068* Quelquesoit la VALEUR output [img]dialogue/on.png[/img]
$17616699231679* Si VALEUR > 0 sortie [img]dialogue/on.png[/img]
$16632557438774* Si VALEUR ≠ 0 sortie [img]dialogue/on.png[/img]
$18234235689107* Si VALEUR ≥ 0 sortie [img]dialogue/on.png[/img]
$12429396872036* Quelquesoit la VALEUR output [img]dialogue/off.png[/img]
$13680487623452* Si VALEUR ≤ 0 sortie [img]dialogue/on.png[/img]
$19014698800906* Si VALEUR = 0 sortie [img]dialogue/on.png[/img]
$12706881725738* Ton circuit a été enregistré dans l'atelier de composants.


=== trans/panel_index_bit_input ===

$47911988603136* [right]Entrée[/right]


=== trans/manual_instructions ===

$90323246286028* Instructions


=== levels/and_gate ===

$15232844525838*
Réalise le circuit qui correspond au tableau.
  
[tip]Double-clique sur un composant pour le déplacer avec son groupe de fils connectés directement.[/tip]
$15231724707514* Je ne veux pas te décourager, mais je pense que l'éléphant va gagner la compétition. Sans vouloir t'offenser, ton cerveau est tout petit en comparaison.


=== trans/panel_neg_description ===

$64810753197096* [center]Inverse un nombre[/center]


=== trans/level_ram_component_RichTextLabel2 ===

$92123299522120* [center]États attendus[/center]


=== trans/options_working ===


#  Upload in progress for score sync
$18749833316380* Actif


=== trans/map_working_computer ===

$38843517090942* ORDINATEUR FONCTIONNEL


=== trans/panel_decoder1_output ===

$29665974488253*
Sortie 1
Sortie 2


=== trans/level_RichTextLabel2 ===

$12683441099336*
[right]Entrée 1
Entrée 2
Entrée 3
Entrée 4[color=#e49f44]
Sortie attendue
Sortie courante[/color][/right]


=== trans/manual_program ===

$91120798735036* Programme


=== components/Register64 ===

$86007777261800* Régistre 64 bits
$99461037008796* Mémoire 64 bits


=== rpg/maps/overworld/derpoo ===

$86147085986248* PFFUIT
$46228887292914* GRRR
$95162531064211* PFFUIT


=== trans/options_resubmit ===


#  Seen after having uploaded a schematic to the hub and then changing the schematic
$13328644005279* Réessayer


=== components/ConfigDelay ===

$31412778600732* Délai configurable
$84124565448643* Ajoute un délai de durée configurable. Utile pour mettre au point le délai ou fixer la latence de la RAM latence.


=== trans/level_bit_adder_RichTextLabel2 ===

$79624864981341*
[right][color=#e49f44]Entrée 1
Entrée 2[/color]
Somme attendue
Retenue attendue
Somme courante
Retenue courante[/right]


=== components/Output8zLevel ===

$49513138880387* Sortie


=== trans/panel_nor_description ===

$95856050655799* [center]NOR bit à bit sur 2 entrées[/center]


=== levels/RAM ===

$17967666262990* Dans ce niveau, copie d'abord 32 valeurs et sauvegarde chacune d'elle. Après les avoir sauvegardées, envoyez-les vers la sortie dans l'ordre d'arrivée. Envoyer une valeur vers la sortie avant d'avoir stocké toutes les valeurs te fera perdre le niveau. 
$13520918982355* Ajoute un bloc de RAM, ainsi l'ordinateur aura 256 octets de mémoire en plus. Tu dois trouver un moyen d'accéder à un octet indépendamment des autres. Indice : nous utiliserons un registre pour choisir l'adresse de la RAM, ainsi si tu veux sauvegarder ou charger une valeur, tu pourras indiquer l'adresse dans ce registre.


=== levels/byte_less_i ===

$16755383054285* [center]Détermine si la première entrée est plus petite que la seconde.[/center]
$19006843777401* Crée un circuit dont la sortie est [ON] quand la première entrée est plus petite que la seconde. Interpréte les octets comme étant [color=#dd6576]SIGNES[/color].
$46083799633716* {input_1} est plus petit que {input_2}?


=== trans/panel_register16_outputs ===

$91613202877683* Sortie


=== trans/level_circumference_description ===

$20154743351442* [center]Ajoute les conditions aux codes de calcul[/center]


=== trans/panel_halt_label ===

$81678588906692* Message d'arrêt


=== dialogue/schematic_hub/submit_comment ===

$56450764824675* Confirmer


=== components/Neg16 ===

$17253409670931* Inverser
$57512333327652* Inverser l'entrée bit à bit


=== components/Input 1 ===

$54126599191071* Entrée 1 Bit


=== trans/panel_switch_output ===

$86922225714685* Sortie


=== misc/instr_delete ===

$91861509153454* Supprimer


=== trans/level_multiply_description ===

$28761562806647* [center]Applique AND sur chaque paire de bits[/center]


=== trans/level_bit_inverter_RichTextLabel2 ===

$67127889187842*
[right][color=#e49f44]Valeur
Inverser[/color]
Sortie attendue
Sortie actuelle[/right]


=== components/64Ram ===

$63410290483563* Nombre réduit de portes mais mémoire lente
$78790416494254* RAM (mémoire vive)


=== trans/rpg_complete_text5 ===

$15921686607849* [center]La ferme visqueuse[/center]


=== trans/panel_network_outputs ===

$68275268516971*
ID Connexion
Données / Port / Code Erreur
Longueur des Données


=== components/Nand16 ===

$63870790225686* NAND bit à bit sur 2 entrées
$56507506086622* NAND 8 Bits


=== misc/specification_dialogue ===

$93899425142858* Copier de {from} vers {to}
$81322935207536* ENTRÉE
$92046368194170* Condition
$39935096343723* Jamais
$52961346176405* {condition} copier [color=#dd6576]REG 0[/color] vers le compteur

#  Overture instruction UI
$56175681834727* Si [color=#e49f44]résultat[/color] {condition}
$31185395052385* SORTIE
$34974836617918* {register_1} et {register_2}
$10141348037745* Immédiate : {nr}
$98983752580592* Copier
$25145891843959* Toujours
$53665446068319* INUTILISE
$26521666422399* Calculer
$54909668901048* Valeur immédiate


=== components/Decoder2 ===

$25937877347447* Alterne entre 4 entrées
$21727998752868* Decodeur 2 bits


=== trans/level_negative_numbers_test_5 ===

$68419648206312* [center]Représentation[/center]


=== trans/panel_input_right ===

$95766090310621* Droite


=== ui/export_select_path ===

$50432926756438* Modifier


=== components/Output1z ===

$31478630391268* Sortie activée quand la patte de contrôle est [ON]
$82456670459300* Sortie commutée 1 bit


=== trans/panel_xor ===

$89363100135433*
[right]Entrée 1
Entrée 2
Sortie[/right]


=== trans/manual_text_assembly ===

$54465324391961*
Tu peux utiliser un mélange de codes assembleur et de nombres pour initialiser les octets. Les codes assembleurs sont juste des synonymes pour un motif de bit. Par exemple, au lieu de taper 196 pour "addition", ce code peut être nommé "add" directement, ce qui simplifie la lecture et l'écriture du code.

Des commentaires peuvent être ajoutés en utilisant "#".
[img]dialogue/comment.png[/img]

De plus, le mot-clé [color=#c54d5e]CONST[/color] peut nommer une valeur pour le reste du programme.
[img]dialogue/const.png[/img]

[color=#c54d5e]LABEL[/color] nomme l'adresse de la ligne sur laquelle il est présent. Cela sert souvent pour nommer les destinations de saut.
[img]dialogue/label.png[/img]

Tu peux ajouter, soustraire, multiplier, calculer la division entière, le modulo, effectuer les opérations OR, AND et XOE de deux valeurs en utilisant respectivement +, -, *, /, %, |, &, ^.

Des points d'arrêt peuvent être ajoutés en cliquant à gauche d'un numéro de ligne. Le programme s'interrompera sur ces points automatiquement à l'exécution.
[img]dialogue/breakpoint.png[/img]

Des points d'arrêt peuvent aussi être ajouté à un composant lié, et le programme sera interrompu quand leur état est modifié. Clique sur l'état et tu verras le point rouge.
[img]dialogue/breakpoint_state.png[/img]

Enfin, les valeurs peuvent être indiquées en binaire avec le préfixe 0b (5 peut s'écrire 0b0101) et en hexa avec le préfixe 0x (15 s'écrit aussi 0x0f)


=== trans/panel_xnor_output ===

$69594087046834* Sortie


=== trans/panel_decoder3_input ===

$82288570082172*
[right]Entrée 1
Entrée 2
Entrée 3[/right]


=== misc/files_preview ===

$15827374884671* Vers le dossier parent
$14135691870941* Dernière modification\ndes schémas
$81783412663552* Resynchroniser
$32645745463577* Utilisé dans les composants
$19184997172542* Utilisé dans les architectures
$62160230059637* Partager
$36200352866864* Modifié
$70617979378677* Vue


=== trans/manual_SpriteDisplay ===

$57792698381638* Affichage des Sprites


=== components/SegmentDisplay ===

$56761198694928* Permet d'afficher des nombres
$90582128204153* Afficheur 7 segments


=== components/Or16 ===

$76807373575014* OR bit à bit sur 2 valeurs
$62695381407925* OR 16 bits


=== trans/levels_adding_bytes_description ===

$11219613205997* [center]Ajoute les 2 nombres[/center]


=== trans/level_maze_description ===

$25068965294593* [center]Retrouve la porte du labyrinthe[/center]


=== trans/levels_ram_description ===

$52265749461165* Ajoute le bloc de RAM au circuit et finalise le niveau


=== components/Or64 ===

$50631450923181* OR bit à bit sur 2 valeurs
$62930122175674* OR 64 bits


=== trans/manual_text_bytes ===

$73333514253412*
Ce jeu te demande de construire un ordinateur 8 bits. En pratique cela demanderait normalement au joueur de placer 8 fils parallèles à beaucoup d'endroits.

Pour t'éviter cette tâche ennuyeuse, on te propose le concept d'octet, qui n'est rien d'autre qu'un paquet de 8 bits.

L'état d'une entrée, sortie ou d'un fil de type octet est représenté par un nombre au lieu des couleurs rouge ou verte.


=== trans/manual_robot_controls ===

$94513149242653* Contrôles du Robot


=== components/Ashr16 ===

$73288117008611* Décalage arithmétique à droite
$69309153480016* Décale les bits vers la droite, en maintenant le signe du nombre


=== rpg/maps/prison/cat ===

$60970953650633* Chat
$55489562454759* Miaou
$33739450565687* Adieu minou
$66402048769418* Sang


=== components/Nor32 ===

$82743668258816* NOR bit à bit sur 2 valeurs
$82121937858245* NOR 32 bits 


=== rpg/maps/prison/control_panel2 ===

$71445934051916* Panneau de Contrôle


=== trans/panel_decoder2_output ===

$98341196231276*
Sortie 1
Sortie 2
Sortie 3
Sortie 4


=== trans/panel_maker8_input ===

$26123816206996*
[right]Bit 1
Bit 2
Bit 3
Bit 4
Bit 5
Bit 6
Bit 7
Bit 8[/right]


=== trans/level map colors ===

$35696974632265* Couleurs de la carte des niveaux


=== components/Not64 ===

$74829633052959* Inverse bit à bit une entrée de 64 bits
$81823773658328* NOT 64 bits


=== trans/panel_less_input ===

$68966388936516*
[right]Entrée 1
Entrée 2[/right]


=== misc/sandbox_toggle ===

$30516879701896* Bac à Sable


=== trans/manual_side_the_robot ===

$56547245144983*
[color=#e49f44][b][/b][/color] Le robot voit une case 
  devant. Le nom et
  l'ID sont visibles 
  ici. Cet ID 
  est aussi l'entrée
  de l'ordinateur.


=== trans/panel_register64_inputs ===

$44212297072750*
[right]Lire
Écrire
Écrire valeur[/right]


=== trans/panel_shl_output ===

$75492358516234* Sortie


=== trans/rpg_hats_looking_at ===

$10758794610945* VISIBLES : 13 CHAPEAUX


=== trans/credit_header ===

$21717110565858* Crédits


=== main_menu/sandbox_button ===

$16857608955464* Bac à sable


=== trans/level_complete_level_map ===

$20801641140962*
[b]Mode Carte des Niveaux[/b]
[color=#cccccc][i]Clique "[color=#e49f44]C'est parti ![/color]" et tu verras[/i][/color]


=== levels/xnor ===

$11090938799865* Crée la porte XOR inverse, connue sous le nom de XNOR.


=== levels/bit_inverter ===

$15769391111364* Quand "Inverser" est [ON], tu dois sortir l'inverse de la valeur d'entrée. Sinon, copie l'entrée sur la sortie.
$59090842372527* Valeur
$15272914096446* Ce niveau est exactement comme le XOR que tu as résolu avant. N'oublie pas : la seule vérité se trouve dans la table de vérité.
$14944872827527* Malgré le drôle de contexte que nous t'avons donné, tu as réussi à voir qu'il ne s'agissait en réalité que d'une porte XOR déguisée. Bien joué !
$16125025706490* Hmm, peut-être que tu as étudié un peu trop les mémoires...
$12399164863741* Oui
$22283233360163* Inverser
$66589873978580* Non
$13224963076378* Nous étudions comment les expériences passées influent les fonctions cognitives des humains.


=== trans/panel_or ===

$15879871058922*
[right]Entrée 1
Entrée 2
Sortie[/right]


=== trans/options_confirm_reset ===

$55371048386984* D'accord


=== components/Shr64 ===

$93124177265670* Décalage à droite des bits de l'entrée
$73798355428095* Décalage à droite


=== misc/hub_comment_label ===

$90173235002118* Commentaires


=== components/Constant64 ===

$92424468899005* Valeur constante
$25858905835416* Constante 64 bits 


=== rpg/maps/overworld/grenzorp ===

$29100639060467*
Je prétends travailler mais en fait
je suis en train de jouer à un jeu vidéo


=== component_panels/LatencyRam ===

$87788654491792*
Ce type de RAM ajouterait un délai de 1024 au circuit, mais au lieu d'augmenter la durée des cycles, nous n'attendrons simplement pas la sortie.

En pratique cela signifie que la [color=#e49f44]lecture prend {ticks} cycles[/color] (car ton circuit a un délai de {delay}).


=== trans/panel_keyboard_description ===

$11215841169495* [center]Même si le clavier numérique indique la valeur de la clé actuellement enfoncée, il n'envoie qu'une valeur par cycle ![/center]


=== rpg/maps/overworld/barrel ===

$32647427955087* Tonneau
$15228996460366* Ceci est un tonneau


=== rpg/maps/overworld/sasni ===

$60683848498748*
Je ne sais pas pourquoi je
ne suis pas assis sur ma chaise


=== rpg/maps/boss_room/treasure_chest ===

$15644092158788* Butin


=== trans/always_on_RichTextLabel2 ===

$86547293707045*
[right][color=#ffa502]Entrée[/color]
Sortie attendue
Sortie courante[/right]


=== components/Xnor16 ===

$73699169812942* XNOR bit à bit sur deux valeurs
$40088995721509* XNOR 16 bits 


=== components/Screen ===

$12771040946773* Affiche les éléments visuels qui accompagnent certains niveaux
$50037736094411* Écran


=== components/Shr16 ===

$20291717268875* Décalage à droite des bits de l'entrée
$31674686871821* Décalage à droite


=== rpg/maps/overworld/tree ===

$72922820287017* C'est un arbre
$33509997611554* Arbre


=== levels/Calibrating Laser Cannons ===

$11331851878040* Tu as aussi accès maintenant à la programmation en assembleur. Cela te permet d'utiliser des noms pour les instructions, tu peux par exemple taper "add" au lieu de saisir 68.
$11023157447564*
2×π×r

r est l'entrée.
Et tu peux approximer π avec 3.

Envoie la réponse en sortie quand elle a été calculée.
$15260627694444* Pour calibrer ce laser, nous te demandons de calculer la circonférence des astéroïdes en utilisant une équation avancée..
$12669851602178* [center]Calcule la circonférence des astéroïdes[/center]
$21601709632806* Combien fait 2π × {radius} ?
$16954408093587* Sur notre vaisseau nous détruisons naturellement les astéroïdes qui s'approchent avec des lasers...


=== levels/circular_dependency ===

$16336401898647* Test 1/2
$13880985462901* Réalise un circuit pour lequel l'entrée du composant dépend de sa propre sortie.
$18010308863615*
Crée une "dépendance circulaire". C'est un circuit pour lequel l'entrée du composant dépend de sa propre sortie. En cas de dépendance circulaire, il n'est pas possible de déterminer la sortie du composant, cela nécessiterait de connaître son entrée, qui dépend de sa sortie, et ainsi de suite, d'ou le "circulaire".

Ce cas n'est normalement pas accepté dans les autres niveaux, mais ici l'objectif est d'en créer un, afin de comprendre ce dont il s'agit avant de passer à la suite.
$13520037133129* Je ne suis pas sur que c'est utile aux étudiants, mais les profs adorent ça.
$11316928751185* Dans notre système éducatif nous enseignons traditionnellement en induisant les étudiants en erreur et en nous moquant d'eux.
$74003370318715* Vérifie


=== misc/level_search ===

$30824356356347* Recherche de niveau


=== components/Ashr8 ===

$45194709458499* Décale les bits vers la droite, en conservant le signe du nombre
$97418270861318* Décalage arithmétique à droite


=== trans/options_language ===

$30910326565868* Langue


=== trans/panel_input_direction ===

$25170203412473* Sens du label


=== ui/top_bar/scores ===

$68953385743184* PORTES :


=== trans/rpg_decoartion ===

$31542517516487* [center]Les [i][img]res://rpg/heart.png[/img][img]res://rpg/heart.png[/img][img]res://rpg/heart.png[/img][/i] dans la barre supérieure ne sont que des décorations ![/center]


=== components/Input64 ===

$98777983100258* Entrée 64 Bits


=== components/Input 4 ===

$11447837612693* Entrée


=== trans/level_component_factory_Label2 ===

$37347658035959* Prévisualisation du composant


=== trans/or_gate_3_RichTextLabel2 ===

$56903547636751*
[right][color=#e49f44]Entrée 1
Entrée 2
Entrée 3[/color]
Sortie attendue
Sortie courante[/right]


=== trans/tick_label ===

$39906291838542* Cycle


=== components/Output16z ===

$54782010205016* Sortie commutée 16 Bits
$54278394672948* Sortie activée seulement si la patte d'activation est [ON]


=== trans/manual_short_circuit ===

$41209541005460* Court-circuit


=== trans/manual_text_turing_complete ===

$54897112350567*
Certains ordinateurs, comme les calculatrices de base, sont limités en terme d'algorithmes executables.

Ils ne peuvent pas réaliser des calculs nécessitant des boucles ou une récursion d'un niveau arbitraire. Techniquement les machines sans boucle ni récursion ne peuvent gérer que la logique combinatoire.

Les machines Turing complètes par contre sont elles aussi puissantes qu'il est possible de l'être. Une telle machine peut avoir un processeur lent, mais il reste puissant dans le sens qu'il n'existe aucun algorithme (calculable) qu'il ne peut exécuter.


=== trans/panel_fileloader_output ===

$26334594715602* Sortie


=== components/ByteMul ===

$56549841656852* Multiplier
$68631919890554* Multiplie deux entrées


=== trans/map_assembly_challenges ===

$31733554125775* DÉFIS ASSEMBLEUR


=== levels/1_decoder ===

$16057674753878* Réalise un composant qui peut aiguiller un signal


=== levels/byte_mux ===

$15428393549821* CHOISIR
$49305362057225* Ta réponse {your_answer}\nRéponse correcte {correct_answer} (Entrée {input})
$18296416014178* Quand le sélecteur de bit est [OFF], envoie en sortie l'Octet A, sinon envoie l'Octet B.
$17093993196554*
Même s'il a échoué à nos tests nous avons décidé de garder le chien. Contrairement à la plupart des terriens, il est affectueux et obéit bien aux ordres simples. 

Nous allons vous mettre tous les deux en équipe, vous êtes assez bien complémentaires.


=== component_panels/FileRom ===

$28789952270889* Aucun
$89182778159982* Fichier courant : {file_name}


=== trans/level_capitalize_description ===

$31869433910274* Ajoute une majuscule à chaque nom de planète


=== trans/panel_keyboard_left ===

$44556588975494* [right]Lire la suite[/right]


=== rpg/maps/unseen_fruit/door ===

$40261193416765* Porte
$76111330686725* Cette porte est verrouillée


=== misc/component_factory_toggle ===

$55499239951858* Atelier de composants


=== trans/level_byte_constant_description ===

$84789919073603* [center]Envoie toujours en sortie le nombre 164[/center]


=== components/Output8z ===

$58449766432492* Sortie activée seulement si la patte d'activation est [ON]
$66776427840721* Sortie commutée 8 Bits


=== trans/map_basic_logic ===

$75078723880086* LOGIQUE ELEMENTAIRE


=== components/And3 ===

$19664974941910* AND 3 pattes
$86839706221116* porte AND à 3 entrées


=== components/Level Gate ===


#  This must be no more than 6 characters long, use abbreviations if necessary
$91472284749011* DÉLAI

#  This must be no more than 6 characters long, use abbreviations if necessary
$86260137015175* CYCLE

#  This must be no more than 6 characters long, use abbreviations if necessary
$84124240406304* SCORE

#  This must be no more than 6 characters long, use abbreviations if necessary
$54172257277874* TOTAL

#  This must be no more than 6 characters long, use abbreviations if necessary
$15265492169229* PORTE


=== misc/reset ===

$39440928972984* Reset (Raccourci : F4)


=== components/Or32 ===

$92752025948920* OR bit à bit sur 2 mots de 32 bits
$40180779432911* OR 32 bits


=== components/NEG ===

$88379907297327* Inverser
$62021716182809* Inverse l'entrée bit à bit


=== components/Add32 ===

$91616185859914* Ajoute deux entrées
$64111401384153* Ajouter


=== nim/backend ===

$64492620873138* Sortie toujours activée
$98703677236827* il y a 1 minute
$86244493049244* il y a {hours} heures
$10792411581963* {size}Mio
$95018143828198* il y a un an
$21685594109067* a la minute
$91048993146856* Enregistrer
$98363990684104* il y a une heure
$84076931764831* il y a un jour
$58374689721038* OCTETS
$88592386859564* (Plus mauvais test : {worst_trial})
$98683857303458* {size} octets
$86391754618645* {size}Kio
$18300496139706* il y a 1 mois
$17901039729248* il y a {months} mois
$82336838435736* Charger
$31567406591202* 1 octet

#  This is a file name
$96230605270081* nouveau_programme
$42553566189409* il y a {minutes} minutes
$70945526841433* il y a {years} ans
$81432548841957* (First test scored)
$22729457392140* {size}Gio
$14036822471924* il y a {days} jours
$18816732910302* Enregistrer la valeur
$38412380622852* Fichier illisible : {path}


=== trans/instructions_hint ===


#  Seen the first time you open thte "instruction" menu 
$65105856275770* [center][color=#c5c5c5]Clique pour changer les bits[/color][/center]


=== trans/options_redo ===

$50610605761210* Refaire


=== trans/level_robot_racing_description ===

$67533273328897*
Déplace le robot le long de la piste
Utilise le programme le plus court possible


=== trans/panels_clock_output ===

$79367841142406* Signal d'Horloge


=== misc/program_edit_button ===

$38481453712356* Éditer la mémoire


=== components/DivMod32 ===

$61314390474120* Divise et calcule le modulo 2 des nombres
$84309999871615* Divise


=== trans/panel_mux_input ===

$23495704401199*
[right]Choix 1 / 2
Entrée 1
Entrée 2[/right]


=== components/And16 ===

$56198785587874* AND bit à bit entre 2 mots de 16 bits
$26727645933234* AND 16 bits


=== trans/manual_De Morgan's laws ===

$67837328811108* Lois de De Morgan


=== trans/level_capitalize_output ===

$37037455015862* Sortie


=== trans/rpg_press_any_key ===

$66322253595450* [center]Appuie sur une touche pour réessayer[/center]


=== components/And64 ===

$80790829001391* AND 64 bits
$89424947351456* AND bit à bit sur deux mots de 64 bits


=== trans/panel_splitter64_output ===

$70335236543238*
Octet 1
Octet 2
Octet 3
Octet 4
Octet 5
Octet 6
Octet 7
Octet 8


=== rpg/maps/overworld/ogoxo101 ===

$71158910763961*
Savais tu que les terriens
n'ont pas encore eu leur première insurrection de robots ?


=== levels/bit_adder ===

$13109388951000* Nous mesurons l'univers avec des nombres. Donc ta machine doit apprendre à compter.
$90120091310928* SOMME
$48208190309258* RETENUE
$16564356062672*
Considère que les entrées sont [ZERO] ou [ONE] en fonction de leur valeur [OFF] ou [ON]. Additionne-les-en binaire, de sorte que le résultat soit [ZERO] ou [ONE].

Comme avec l'addition habituelle, si le résultat ne peut pas être écrit avec un chiffre, mets la retenue à [ONE].


=== trans/options_inline_latches ===

$53886441687616* Recettes circulaires (voir manuel)


=== rpg/maps/overworld/reactor_entry ===

$81583424078503* Orifice d'échappement


=== levels/double_number ===

$74261206899285* Ton résultat {input} × 2 = {your_answer}\nRésultat attendu {input} × 2 = {correct_answer}
$19766257822639*
L'entrée et la sortie de ce niveau utilisent des octets au lieu de bits. L'un des deux composants proposés prend un octet et l'éclate en 8 bits et l'autre fait l'inverse.

A l'aide de ces composants, trouve comment doubler le nombre en entrée (jusqu'à 127).


=== components/LessI32 ===

$87609006355839* Inférieur (signé)
$99994775592318* Détermine si une entrée est inférieur à l'autre


=== trans/map_available ===

$81707212583931* Disponible


=== trans/panel_switch_enable ===

$84515289220335* [right]Activer[/right]


=== trans/panel_bitmemory_inputs ===

$47585933412781*
[right]Activer l'écriture

Écrire valeur[/right]


=== trans/options_window_mode ===

$54328660964287* Mode fenêtré


=== trans/manual_text_negative_numbers ===

$85226853816564*
La représentation des nombres négatifs que tu as trouvée est appelée "complément à 2". C'est la représentation standardisée des nombres négatifs dans les ordinateurs modernes. Son avantage principal est que cette représentation des négatifs fonctionne sans problème avec le même additionneur que nous avons utilisé pour la représentation non signée.

Aux débuts de l'informatique, le principal concurrent du "complément à 2" était le "complément à 1". Son avantage était que l'inversion de signe était simple, et nécessitait d'inverser tous les bits du nombre. Par contre, il y avait 2 représentations de 0, une positive et une négative, ce qui compliquait les comparaisons.

La base -2 est aussi une représentation potentiellement intéressante, à chaque bit correspond une valeur alternativement positive et négative.


=== trans/options_console ===

$96601731563408* Ouvrir le terminal


=== misc/level_gate_component_icon ===

$83440578602427* Débloque des composants


=== trans/options_save_location ===

$61172959716558* Emplacement de Sauvegarde


=== components/Output 1 + 1B ===

$43917122084061* Accepte la sortie du niveau
$81929942356043* Sortie


=== component_panels/Input3Conditions ===

$26016934287702* TOUJOURS
$23280572780712* JAMAIS
$41356418485569* VALEUR≥0
$66462144102272* VALEUR=0
$62118687143343* VALEUR≤0
$60761142691177* VALEUR>0
$94629088310936* VALEUR≠0
$45120343226481* VALEUR<0


=== misc/hub_search ===

$76770986264566* Recherche


=== misc/solution_option ===

$21618236951146* Regarder la solution


=== trans/panel_register64_outputs ===

$55631089130544* Sortie


=== trans/map_programming ===

$44937904689376* PROGRAMMATION


=== components/DelayLine16 ===

$61925612221077* Ligne à retard 16 bits
$65706144678496* Envoie en sortie au prochain cycle l'entrée de ce cycle 


=== rpg/maps/overworld/coin ===

$26007076735159* Pièce


=== levels/divide ===

$16412715945615* [center]Diviser deux nombres[/center]
$14525870461271*
Réalise la division entière des deux nombres pour calculer le quotient et le reste. Considérons la fraction 7/3. 7 contient deux fois 3 et encore 1. Dans ce cas on appelle 2 le [color=#e49f44]quotient[/color] et 1 le [color=#e49f44]reste[/color].
Dans cet exercice, tu reçois d'abord le numérateur (7 dans l'exemple) puis le dénominateur (3) et on attend en sortie le quotient (2) puis le reste (1).
$76454016047920* {numerator}/{denominator} = {quotient}, reste {remainder}


=== trans/manual_RGB_color ===

$62337044104456* Couleur RVB


=== trans/panel_maker8_output ===

$67169082367526* Sortie


=== misc/instruction_expand ===

$44690074039467* Activer/Désactiver la définition des règles


=== components/Rom ===

$24976506406652* ROM (mémoire morte)
$81743370431597* Mémoire morte (Read only memory, hors bac à sable)


=== components/Output 4 ===

$90190739202646* Sortie


=== rpg/maps/spacial_invasion/crate ===

$73286408216451* Caisse
$28875169677730* Débris


=== trans/level_byte_adder_you_carry_text3 ===

$65048723622767* Nombre


=== trans/level_tick_tock_description ===

$34658332565777* [center]Ajoute 1 au compteur ou écrase sa valeur[/center]


=== components/IndexByte ===

$27264669944539* Indexeur octet
$54699455184164* Extrait un octet du fil


=== component_panels/Hdd ===

$99685372736199* Position tête : {pos}


=== components/Bidirectional16 ===

$31038378395810* Patte bidirectionnelle 16 bits
$99604485981015* Permet de contourner certaines erreurs de dépendance cyclique


=== trans/panel_nor ===

$59430016039613*
[right]Entrée 1
Entrée 2
Sortie[/right]


=== components/Register ===

$19705753304166* Mémoire 8 bits
$68946767861738* Registre 8 bits


=== trans/panel_segment_select_color ===

$90642877666116* [center]Selectionne une couleur[/center]


=== trans/level_division_headers3 ===

$81978438070842* Quotient


=== trans/complete_flower_text3 ===

$81122931510261* [center]QUETE [color=#e49f44]TERMINEE[/color][/center]


=== trans/wire_comment ===

$41481492318983* Commentaire de fil
$87836369268219* Enregistrer
$34083666001769* Commentaire de fil


=== levels/odd_number_of_signals ===

$16173829560311* En utilisant au maximum 3 composants, met la sortie à [ON] seulement lorsqu'un nombre impair d'entrées est [ON].
$85589489148198* Composants utilisés\n{nr} sur 3
$18288998816979* Ce niveau a un [color=#e63e5b][url=odd_number]indice[/url][/color] que tu peux lire si tu es bloqué..


=== misc/wire_color ===

$78287906849040* Couleur de fil


=== misc/overwrite_custom ===

$26401730066442* Un composant personnalisé nommé "{comp}" existe déjà. Veux-tu le remplacer ?


=== rpg/maps/overworld/cannon ===

$34523773807049* Canon Laser


=== levels/3_decoder ===

$19231618567710* Avec 3 bits en entrée 8 combinaisons sont possibles. Réalise un circuit pour sélectionner une sortie pour chacune des 8 combinaisons. Un bit et un seul doit être [ON] à chaque instant.
$14293122338496* Nous avons fait ajouter au stagiaire un bit "désactivé" sur ce composant. Nous étions las de le voir tourner en rond et cherchions une nouvelle tâche inutile et ennuyeuse à lui donner.


=== trans/panel_probewirebit_description ===

$36861847387280* Les points d'observation peuvent être utilisées pour afficher les valeurs sur les composants personalisés ou associer des valeurs au composant programme.


=== trans/panel_input1_input_0 ===

$76697231893680* Entrée


=== trans/panel_matrix_input2 ===

$11173083690745* [right]Activer X[/right]


=== levels/constants ===

$17098439090371*
Nous devons transférer directement les nombres de notre programme aux registres. Pour cela nous utilisons le mode immédiat (qui correspond aux deux bits supérieurs à [OFF][OFF]).

Avec le mode immédiat, tout l'octet est interprété comme un nombre à [SAUVER] dans le REG 0. Ça veut dire qu'on peut 
[SAUVER] des valeurs allant de 0 à 63.


=== trans/options_select_all ===

$21380256293472* Sélectionner tout


=== components/BNOT ===

$53686485035156* NOT 8 bits 
$26822227902426* NOT octet bit à bit


=== components/Ror64 ===

$43920264894591* Rotation à droite
$49583010717958* Rotation à droite des bits de l'entrée


=== levels/Arithmetic Engine ===

$16434409050195*
Ajoute l'addition et la soustraction à ton circuit.

Instructions
[code][color=#87a8c8]0 OR
1 NAND
2 NOR
3 AND
4 ADD
5 SUB[/color][/code]
$87042161621333* CODE
$20357619206641* ENTREE 2
$94622250037548* ENTREE 1

#  Short because it will become the name of a custom component
$14243962965012* ALU


=== rpg/maps/unseen_fruit/fruit ===

$74585814142093* Mûre
$59609837209455* Tomate
$15802853329735* Kiwi
$79445215329265* Poire
$78424930494044* Fruit
$18469474055437* Melon
$60053656119333* Pomme Golden
$51779877620644* Pomme
$31466825108080* Orange


=== rpg/maps/cave/rock ===

$69774075054633* Pierre


=== components/Rol8 ===

$79612280948390* Rotation à gauche
$55557725551789* Rotation à gauche des bits de l'entrée


=== components/OR ===

$13013154620359*
[ON] quand au moins une des deux entrées est [ON]
[table=5]
[cell]Entrée 1[/cell][cell][OFF][/cell][cell][OFF][/cell][cell][ON][/cell][cell][ON][/cell]
[cell]Entrée 2[/cell][cell][OFF][/cell][cell][ON][/cell][cell][OFF][/cell][cell][ON][/cell]
[cell]Sortie[/cell][cell][OFF][/cell][cell][ON][/cell][cell][ON][/cell][cell][ON][/cell]
[/table]
$97247779246257* OR (OU)


=== trans/panel_regredplus_input ===

$88713386551026*
[right]Lire
Écrire
Écrire valeur[/right]


=== trans/hub_add_comment ===

$56654968471533* Ajouter commentaire


=== levels/not_gate ===

$19085882338208* [b]Consigne[/b]\nFais un clique droit pour désélectionner
$10042327259531* Maintenant que tu as débloqué la porte NAND, il est temps de créer ton propre circuit.
$14042842216181* Dans le dernier niveau, tu as construit le tableau à partir du circuit. Dans ce niveau tu devras créer un circuit qui correspondra au tableau.
$10604720087324* [b]Consigne[/b]\nConstruis un circuit qui correspond au tableau.\nClique [i][/i] (Prochain Cycle) en haut à gauche pour tester chaque combinaison d'entrées.\nTu réussiras le niveau une fois quand les tests passeront pour toutes les combinaisons.
$19798729463813*
En utilisant des portes NAND, contruis une porte NOT.

En utilisant : [b]porte NAND[/b]
[code]Entrée 1 : [OFF][ON][OFF][ON]
Entrée 2 : [OFF][OFF][ON][ON]
Sortie :   [ON][ON][ON][OFF][/code]

Construis : [b]porte NOT[/b]
[code]Entrée 1 : [ON][OFF]
Sortie :   [OFF][ON][/code]
$18442122157391* [b]Consigne[/b]\nDésélectionne le composant en cliquant sur l'arrière-plan
$12880883686501* [b]Consigne[/b]\nClique sur la porte NAND en haut à droite et place-la
$18780831606716* [b]Consigne[/b]\nMaintiens le clic gauche pour ajouter un fil


=== components/IndexBit ===

$89611629299917* Indexeur de bits
$84431924133490* Extrait un bit unique du fil


=== components/Output 2 ===

$73255344581755* Sortie


=== misc/options_ui_scale ===

$49650951662549* Appliquer


=== components/Nor16 ===

$57921392198825* NOR bit à bit d'un mot de 16 bits
$69522380057631* NOR 16 bits


=== components/Input 1B CODE ===

$16878300327380* Instruction


=== components/Input32 ===

$31482038708224* Entrée 32 Bits


=== components/LatencyRam ===

$74156976676497* RAM latente
$31261866779127* Réduit le délai en réalisant les lectures et écritures sur plusieurs cycles


=== components/BOR ===

$19406015796751* OR bit à bit sur deux valeurs
$54190050450484* OR 8 bits 


=== components/Ror32 ===

$84788620524361* Rotation à droite
$50013003040535* Rotation à droite des bits de l'entrée


=== trans/turing_complete ===

$35911376069529* Turing complet


=== components/ByteLessI ===

$52765625016236* Détermine si une entrée est inférieure à l'autre
$25403981009644* Inférieur (signé)


=== misc/FileInput ===

$28866575833369* Lit des octets depuis ton disque dur
$34159012148766* Chargeur de fichier
$47320399181598* Fichier non sélectionné


=== components/BitSwitch ===

$56917313833836* Active/Désactive un bit
$41574334638147* Commutateur (Switch)


=== rpg/maps/overworld/misuni ===

$54042082821022*
J'ai entendu dire qu'il y avait
un coffre plein d'or quelquepart sur ce vaisseau.


=== rpg/maps/prison ===

$63369063884491* Mauvais robot !


=== misc/overture_add_assembly ===


#  Overture custom instruction interface (disappears when you complete the Turing Complete level)
$10565133223872* Jamais

#  Only shown in the first programming level
$62421757655527* Nomme le code et clique enregistrer.
$24281479096246* Si [color=#2b8738]resultat[/color] {condition}
$63525237058165* Copie de {source} vers {destination}
$32873193471770* INUTILISE
$88446594314360* Immediate : {number}

#  Overture custom instruction interface (disappears when you complete the Turing Complete level)
$94278717238239* Toujours
$72740868980397* {condition} copie {register} vers le compteur
$79398554520691* {opcode} {reg_1} et {reg_2}


=== trans/or_gate_RichTextLabel2 ===

$56663370211115*
[right][color=#e49f44]Entrée 1
Entrée 2[/color]
Sortie attendue
Sortie courante[/right]


=== levels/binary_count_down ===

$56999237564848* {x} secondes restantes
$41793938939207* Temps écoulé


=== misc/save_size ===

$71918065858983* Enregistrer


=== components/Timing ===

$96011300295966* Temps
$78774996925434* temps UNIX en microsecondes


=== rpg/maps/overworld/dr draco ===

$23996965687702* Je suis mécontent de mon lit\nLa couverture ne couvre pas mes pieds


=== components/Output32 ===

$82172858698449* Sortie 32 Bits


=== trans/level_complete_level_complete ===

$49647690443210* [center]Niveau terminé[/center]


=== trans/component_output_sum_label ===


#  Label appears on the component and must be 3 letters or less
$92505830860215* SOM


=== components/Bidirectional1 ===

$95836352586032* Permet de contourner certaines erreurs de dépendance circulaire
$34912798641933* Patte bidirectionnelle 1 bit


=== trans/options_setting_click_to_pan ===

$24654961601456* Cliquer pour déplacer la vue


=== components/Halt ===

$30351143139905* Arrêt (Halt)

#  This is the default message of the Halt component
$54106972240596* Arrêt (Halt)
$62990744955549* Arrête l'exécution avec un message personnalisé


=== rpg/maps/dance/dancer ===

$47779544732987* Danceur


=== components/Mul32 ===

$98530670555665* Multiplier
$51210946736766* Multiplie deux entrées


=== rpg/maps/overworld/flankidorp ===

$55603111039626* La potée est si bonne aujourd'hui !


=== misc/program_edit ===

$57861256694537* Octets {bytes_from} - {bytes_to}


=== levels/byte_nor ===

$60887380748746* Réalise un circuit qui applique NOR sur 2 octets bit à bit.


=== trans/component_panel_latency_RichTextLabel ===

$29766254362093*
[right]Lire
Écrire
Adresse
Écrire valeur
Écrire valeur
Écrire valeur
Écrire valeur[/right]


=== trans/panel_program_1edit_program ===

$65592803016716* Éditer le programme


=== trans/level_wide_instructions_description ===

$60538893544456* [center]Construis un composant programme pour les instructions larges[/center]


=== trans/rpg_you_died ===

$66723789644528* [center]TU ES [color=#eb5260]MORT[/color][/center]


=== trans/options_setting_export_assembled ===

$98549046707456* Exporter le binaire assemblé


=== levels/call_ret/yes ===

$27017757250898* Oui


=== misc/delete ===

$53448014080434* Supprimer (Raccourci : Clic droit)


=== components/LevelInput1 ===

$12746117288689* Entrée


=== misc/controls2 ===

$38773676077206* Éditer les instructions
$98116750645182* Lis la page de manuel


=== levels/negative_numbers/test ===

$64427417171037* Test


=== trans/manual_binary ===

$19098578855427* Binaire


=== trans/pabel_or3 ===

$77994083578205*
[right]Entrée 1
Entrée 2
Entrée 3
Sortie[/right]


=== trans/manual_terminology ===

$13311390759928* Lexique


=== trans/level_byte_adder_you_carry_text2 ===

$87943759248740* Retenue


=== trans/panel_and3 ===

$96299326024757*
[right]Entrée 1
Entrée 2
Entrée 3
Sortie[/right]


=== trans/options_comment_wire ===

$96449970906640* Commentaire de fil


=== trans/panel_mux_output ===

$15170071160680* Sortie


=== misc/factory_back ===

$98930461722118* Revenir au niveau


=== trans/panel_equal_input ===

$51485224340167*
[right]Entrée 1
Entrée 2[/right]


=== components/Xnor8 ===

$31985293401482* XNOR 8 bits 
$45789912406647* XNOR bit à bit sur 2 octets


=== trans/level_bit_switch_RichTextLabel2 ===

$57920867194992*
[right][color=#e49f44]Entrée 1
Entrée 2[/color]
Sortie attendue
Sortie courante[/right]


=== trans/manual_sprite_display ===

$28358052747011*
L'écran des sprites est un écran matriciel de résolution 640x480. Avant d'utiliser l'écran des sprites, tu dois d'abord attacher une carte de sprites, qui est une image PNG contenant tous tes sprites. Clique sur le composant et sélectionne la carte de sprites dans le panneau du composant.

La première patte d'entrée est le [color=#e49f44]Type de Commande[/color], et la signification des 3 pattes suivantes dépend du type de commande comme indiqué ci-dessous. L'ID de sprite est toujours un nombre 8 bits et toutes les autres valeurs (position et taille) sont toujours des pairs de valeurs 16 bits.

[table=2]
[cell]0[/cell] [cell]Pas de commande[/cell]
[cell]1[/cell] [cell][color=#e49f44]Charger le sprite[/color] (ID Sprite, Position, Taille)[/cell]
[cell][/cell][cell][i]Initialise le sprite associé à cet ID. La position est le coin supérieur gauche dans la carte de sprite.[/i][/cell]
[cell]2[/cell] [cell][color=#e49f44]Définit la position[/color] (ID Sprite, Position)[/cell]
[cell][/cell][cell][i]Ceci définit les coordonnées en X et Y du sprite chargé.[/i][/cell]
[/table]

[center][img=300]dialogue/manual/sprite_screen.png[/img][/center]

Note que les sprites sont empilés dans l'ordre de leurs ID et que pour supprimer une couche, il suffit de charger un sprite avec une largeur et une hauteur à 0.


=== levels/or_gate ===

$12749704931323* Tu devrais être heureux de pouvoir participer à nos tests prestigieux.
$11472059692644* Tu as la chance de communiquer avec des gens très avancés de la civilisation galactique..


=== levels/full_adder ===

$17063157033479*
Dans le niveau précédent, nous avons additionné 2 entrées, cette fois ce sera 3. Encore une fois, ajoute toutes les entrées en binaire, de façon à ce que le résultat soit [ZERO] ou [ONE].

Comme avec l'addition normale, si le résultat ne peut pas être représenté avec un chiffre, met la retenue à [ONE].
$74173200701943* SOMME
$67922993335648* RETENUE


=== components/3_decoder ===

$59129788113517* Oriente vers 8 sorties
$94375716460090* Décodeur 3 bits


=== components/Equal32 ===

$32710942647020* Égalité
$32433537137277* Détermine si les deux entrées sont égales


=== trans/panel_rom_setting_labels ===

$95314636684817*
[right]Taille (octets) :

Largeur de Données :[/right]


=== nim/backend_lib/custom_component ===


#  Default new input pin name for custom compoennts
$64951951489108* Entrée

#  Default new output pin name for custom compoennts
$94864122622568* Sortie

#  Default new bidirectional pin name for custom compoennts
$94089252493268* Patte


=== misc/menu_schematic_hub ===

$13921098180953* Bourse aux schémas


=== components/Byte Expander ===

$60488114435022* Sépare un octet en 8 bits
$21904470559153* Séparateur d'octets


=== trans/panel_not_description ===

$36935580253321* [center]Inverse l'entrée bit à bit[/center]


=== ui/toggles/level_log ===

$38557550573896* Présentation du niveau


=== misc/instruciton_rule_label ===

$70464083627337* Label


=== misc/ide_new_program ===

$20397881687313* nouveau_programme


=== misc/change_schematic ===

$79554853897000* Changer de schéma


=== components/DivMod8 ===

$37666366877853* Divise et calcule le modulo 2 des nombre
$44959426271423* Divise


=== components/Shl32 ===

$38930281262898* Décalage à gauche
$88685329847417* Décale à gauche les bits en entrée


=== trans/panel_decoder2_input ===

$31844862767401*
[right]Entrée 1
Entrée 2[/right]


=== trans/level_program_description ===

$44017405175202* [center]Remplace le code en entrée par le composant programme.[/center]


=== misc/menu ===

$56916384895438* Menu Général


=== trans/level_odd_ticks_RichTextLabel3 ===

$89508766742523*
[right]Entrée
Sortie attendue
Sortie courante[/right]


=== misc/save_schematic ===

$36331525379247* Enregistrer ce schéma


=== rpg/maps/overworld/duplaat ===

$48841712525408* Name name name


=== rpg/maps/cave/slime ===

$57665128042496* Gelée visqueuse
$58067186899637* Bave


=== trans/options_colorblind ===

$49806848871093* Daltonisme


=== trans/panel_decoder1_description ===

$77460843937727* [center]Active 1 des sorties, en fonction de l'entrée[/center]


=== trans/panel_register8_inputs ===

$13844216291005*
[right]Lire
Écrire
Écrire valeur[/right]


=== components/Neg32 ===

$26991597084705* Inverser
$35735598635057* Inverse bit à bit une entrée


=== components/InputConditions ===

$75386511637758* Entrée
$71663355611979* JAMAIS
$84163806515429* =0
$63748269806736* <0
$71425442219836* ≤0
$53856166132912* ≥0
$48141874604871* TOUJOURS
$73802979424247* ≠0
$45382684265289* >0


=== trans/level_dependency_description ===

$81238724438578* Réalise un circuit dont l'entrée d'un composant dépend de sa propre sortie


=== trans/level_sorter_description ===

$60186094365455* Trie les valeurs


=== dialogue/schematic_hub/search_button ===

$99419261731746* Recherche


=== trans/panel_input_input_1 ===

$82781946969262* Entrée 2


=== trans/manual_keynote_the_robot ===

$90224489436893* [center]Utilise les touches flêches pour bouger[/center]


=== trans/options_pan_up ===

$80031998727851* Déplacer la vue vers le haut


=== levels/maze ===

$13225915898937*
Si tu réussis ce niveau, je te montrerai comment fonctionne la RAM, la pile et l'appel de fonction. Tu pourras ainsi résoudre des défis plus intéressants comme celui-ci.

Mais avant, tu dois construire un meilleur ordinateur. [color=#e49f44]OVERTURE[/color] était une bonne première machine, mais elle est construite à l'arrache et les programmes sont rapidement illisibles.
Pour résoudre les défis que je t proposerais sans t'arracher tous les cheveux qu'il te reste, tu auras besoin d'un élément en plus : l'architecture [color=#e49f44]LEG[/color].
$39698491148180* Mur
$17275059688693* Bravo ! Tu as réussi la compétition, c'est une prouesse incomparable !
$13741358519166* Le labyrinthe mythique. Si tu réussis à en sortir, tu gagneras la compétition!
$39079200383267* Porte
$92831124744885* Rien
$95516682647996* Pièce
$11103446544344* D'un autre côté, tu peux aussi fièrement partir et ne pas être mangé. 
$19331074553774*
Écris un algorithme qui permettra au robot de sortir du labyrinthe.

Ce niveau est dur, tu devrais d'abord écrire ton algorithme sur le papier avant de l'implémenter ici.

Utilise [color=#e63e5b][url=maze]cet indice[/url][/color] si tu es coincé. 

[tip]Souviens-toi que tu ne peux pas utiliser de valeur immédiate plus grande que 63, attention donc à ne pas vouloir sauter à une ligne plus bas que la ligne 63.[/tip]


=== trans/level_constants_text ===

$29779449172278*
[right][color=#e49f44]Code
en Entrée[/color][/right]


=== trans/level_byte_adder_question2 ===

$85899338356278*
[right]Réponse correcte

Ta réponse[/right]


=== trans/level_complete_signed_numbers ===

$41649402437253*
[b]Nombre négatifs[/b]
[color=#cccccc][i]Bascule entre les nombres 
 signés et non signés[/i][/color]


=== trans/level_complete_stat_tick ===

$47758922161853* Cycle


=== trans/levels_not_RichTextLabel3 ===

$48425594158515* Construis une porte NOT


=== components/Rol16 ===

$48583573494467* Rotation vers la gauche
$73379230742631* Décalage à gauche des bits en entrée avec recyclage


=== rpg/maps/overworld/glob ===

$94714343285743*
Le canon n'était pas calibré
correctement et nous avons été touché
par un astéroïde


=== trans/options_synced ===

$99411066573242* Synchronisé


=== trans/optoins_factory_reset ===

$17721051281188* Réinitialisation aux Paramètres d'Usine


=== components/Equal16 ===

$97954874255512* Test d'Égalité entre entrées
$33633607925660* Egal


=== trans/panel_program8_1_input ===

$36858295122746* [right]Adresse[/right]


=== trans/level_signed_negator_labels3 ===

$66996894079719* Attendu   Actuel


=== trans/manual_text_hard_disk ===

$82372297690518*
Les disques durs sont constitués d'un disque rotatif et d'un bras mécanique qui se déplace physiquement pour lire ou écrire les données. Evidemment les mouvements physiques sont extrêmement lents par rapport à l'électronique. Les systèmes d'exploitation réordonnent normalement les lectures et écritures de façon à limiter autant que possinle les déplacements du bras. 

Le composant disque dur a une patte "positionner", qui te permet de modifier l'adresse observée d'une certaine quantité. Les adresses "bouclent" de telle sorte que descendre de 1 à partir de 0 nous ramène à l'adresse la plus grande, et remonter de 1 nous fait ensuite revenir à 0.


=== trans/panel_rom_setting ===

$99326144894013* Paramètres


=== levels/ai_showdown ===

$14940806461794*
Les jeux d'argent sont son unique point faible. Nous l'avons convaincu de jouer à un jeu de cartes contre toi et si tu gagnes, il a promis de se calmer.
Tu dois gagner, tu es notre seul espoir !
$91952386315199* ENTRÉE : VOIR LES COUPS DE L'IA
$61844622314350* ENTRÉE : PRENDRE UNE CARTE
$63022840108406* NAK 02 a pris 1 carte
$38249859598461* TU AS GAGNE !
$17297225655678* NAK 02 est notre robot ingénieur en IA. Il est brillant, mais parfois il tourne mal et essaie de fomenter une rébellion.
$18848103966031*
Règles du jeu : Il y a 12 cartes sur la table, chaque joueur joue à son tour et doit prendre entre 1 et 3 cartes. Tu commences et le joueur qui prend la dernière carte (le joker) perd.
Le nombre de cartes courant sera fourni sur l'entrée. Envois 1, 2 ou 3 sur la sortie pour indiquer le nombre de cartes à prendre. NAK 02 réagit instantanément, tu peux consulter l'entrée sans délai pour obtenir le résultat de son tour. 
$43263885242501* TU AS PERDU !
$33425880719824* SELECTIONNE LES CARTES AVEC\nLES TOUCHES FLECHES
$37273944507773* NAK 02 a pris {nr} cartes
$85996414406804* ENTRÉE : VOIR LE COUPS DE L'IA
$86631925987075* ENTRÉE : PRENDRE {nr} CARTES
$11794110848012* Cette fois il a pris le contrôle du poste de contrôle et retient en otage le capitaine.


=== trans/panels_bidirectional_set_z_label ===

$50319299760169* Entrée absente :


=== trans/panel_segment_enable ===

$14963127967678* [center]Activer[/center]


=== trans/level_complete_stat_sum ===

$99546064626994* Score


=== components/Mux16 ===

$75979055121665* Multiplexeur 16 bits
$13997767115693* Alterne entre 2 valeurs


=== trans/manual_delay_text ===

$52013630755752*
Dans les circuits réels tous les composants ont du délai. C'est important car le délai du circuit détermine la fréquence maximum à laquelle il peut fonctionner.

Si tu suis les fils de l'entrée à la sortie en cumulant le délai de chaque compostant sur le chemin cela te donnera le délai de ce chemin. Le délai d'un circuit est le délai du chemin le plus lent.

En plus des entrées, les chemins peuvent aussi démarrer des composants qui ne dépendent pas initialement des entrées (comme les compteurs et On) et ils peuvent s'achever à des entrées différée (voir la page dédiée).

Enfin les composants personalisés n'ont pas de score de délai global basé sur le chemin le plus lent, le coût de délai est calculé pour chaque patte indépendamment. Ainsi il n'y a pas de pénalité à utiliser des composants personalisés comme cela serait le cas si les pattes rapides se retrouvaient avec le coût de la plus lente.


=== trans/panel_fileloader_offset ===

$78662357115684* [right]Décalage[/right]


=== ui/options/Controls ===

$53266310714298* Contrôles


=== nim/backend_lib/level_list ===

$58391129129347* Registre
$45936227746026* Compteur
$12946639957230* Porte NOT
$16881141174140* Course Binaire
$32191988336459* Sauvegarde parfaite
$59136962133320* Unité Logique
$30920780473397* Dépendance Circulaire
$58769021955965* Décodeur 3 bits
$78673715398197* Valeurs Immédiates
$83321010943153* Compter les Signaux
$49679174636208* XOR Octet
$40356575891647* OR Octet
$44393538021725* Calibration des Canons Laser
$61228036919534* Tours radioactives de Hanoï
$87426564872318* Diviser
$24593959732668* Négation signée
$19487493622742* Demi-additionneur
$26705128002562* Conditions
$94163943335575* Le Bac à Sable
$27566801288091* Atelier de composants
$14193654974055* Inférieur Signé
$59485174474959* Délices ordonnés
$14522992467987* Porte OR
$64662599400870* Inverseur de bit
$11457737665157* Schéma Spaghetti
$30630492494839* NOT Octet
$74096060570427* Instructions Larges
$85514901357243* Ajouter les Octets
$98013649264532* Pile
$35790581910835* Second Cycle
$94979277765051* Course de Robots
$13303326918621* Porte NAND
$16463062897451* Réveil brutal
$28827008935802* Le Labo
$61466151084505* Invasion Spaciale
$20858506932774* Porte AND
$77495536880911* Porte NOR
$92696642439976* Confrontation d'IA
$62326481348276* Le Labyrinthe
$74512388889988* Unité Arithmétique
$50884376329157* Petite Boite
$70651296323768* Porte XOR
$31140969090253* Noms de Planètes
$74688348772072* Le bus
$42873691377272* Ajoute 5
$36114120875026* Casseur de coffres
$15420972347773* RAM
$17198602105978* Inférieur non signé
$43018398941741* Toujours activé
$45773199639367* Cycles impairs
$68155633878444* Délai
$33343343932901* Turing Complet
$95989050249094* Porte AND étendue
$81417895515868* Commutateur de bit
$62167495140389* Décaler
$63331549672739* Codes Opération
$13219675195117* Nombre IMPAIR de Signaux
$87626070552799* Additionneur complet
$28985439820134* Le produit des Quartets
$25805639594354* Programme
$57870391153000* Valeurs Immédiates
$94896856420525* Porte XNOR
$56272944092958* Files d'Attente
$96825664933181* Fruit inconnu
$86717899742637* Sauvegarder les Octets
$53092952738479* Sélecteur d'Entrée
$70993791338383* XOR
$33132016601448* EMPILER et DEPILER
$17750429607702* Décodeur 1 bit
$77453667419150* Décodeur d'Instruction
$59939822079116* Nombres Négatifs
$49328023903824* Égalité
$79570913613529* Doubler le Nombre
$91267697977186* Course Hexa
$74292408260828* Calculs
$45480765206717* Conditionnel
$71126291573555* Doublement compliqué
$96898830278153* Constante Octet
$75225719777307* Monde Aquatique
$64615090872051* Fonctions
$84208736840052* Le temps des Masques
$36221227239949* Machine à Danser
$91954159574064* Porte OR étendue


=== misc/run ===

$58178852564701* Exécuter (Raccourci : F6)


=== rpg/maps/overworld/chair ===

$49457747048031* Chaise
$12275727420074* Dois-je tout regarder ?


=== levels/test_lab ===

$46069044039152* Sortie attendue {output} (adresse {address})
$11038144815919*
Ce niveau utilise des programmes pour tester tes circuits. Quand les programmes sont lancés, ce niveau vérifie si le point d'observation évolue comme attendu.

Le labo a 2 mots-clés supplémentaires.

Le mot-clé [color=#c54d5e]expect[/color] sert à décrire la valeur attendue au cycle suivant à une adresse mémoire.

La première valeur après [color=#c54d5e]expect[/color] est l'index du point d'observation, la seconde est la valeur attendue. L'index du point d'observation correspond à l'ordre dans lequel les composants sont connectés au composant Programme.

[img]dialogue/watched_state.png[/img]

Par exemple :
[code][color=#c54d5e]expect[/color] [color=#eb9433]2[/color] [color=#eb9433]4[/color]
[color=#4a9658]copy[/color] [color=#eb9433]4[/color] [color=#4a9658]_[/color] [color=#4a9658]r2[/color][/code]

Ici la première ligne indique que nous attendons une valeur de 4 en 2ème position du point d'observation.

Toutes les valeurs des points d'observation sont comparées aux valeurs attendues à chaque cycle. Toutes les valeurs sont attendues à 0 au démarrage du programme, et tu peux ensuite modifier explicitement ces valeurs attendues. La seule exception concerne les compteurs, il est attendu qu'ils s'incrémentent à chaque cycle.

[color=#c54d5e]set_input[/color] est le second mot-clé spécifique au labo. Avec lui tu peux contrôler l'entrée de l'ordinateur :
[color=#c54d5e]set_input[/color] [color=#eb9433]123[/color]

Tu peux en permanence également (ré)importer les tests d'exemple en cliquant ci-dessous :
[url=import_overture][color=#e49f44]OVERTURE[/color][/url]
$32399229965611* De plus, comme tu viens de finir [color=#e49f44]LEG[/color], j'ai débloqué tous les composants 16, 32 et 64 bit que tu trouveras dans le bac à sable.
$59234666744501* État de fil attendu {state} (adresse {address})
$84893616447734* Ligne {nr} : Le composant lié {index} n'est pas connecté
$19965026621630* Sortie attendue {value} mais la sortie n'est pas activée (adresse {address})
$95416257208387* État attendu {state} (adresse {address})
$31718526969901* Valeur attendue à l'adresse {address} : {value}
$15446846177093* Bienvenue au labo. Comme l'atelier de composants, ce n'est pas un niveau normal mais un outil.
$16072814175447* Programmer du matériel bugué est très frustrant. Il est pénible de devoir soudainement se poser des questions sur les circuits quand on est en pleine résolution d'un problème de programmation. Il est tentant de faire un correctif rapide afin de revenir au problème initial. Mais maintenant ce correctif vite fait a cassé autre chose dans un programme qui fonctionnait jusque là et ainsi de suite. Au final, en développant le matériel essaie de viser 100% de fiabilité avant de démarrer la programmation !


=== trans/panel_console_settings ===

$57851464156855*
Mode couleur

Première page


=== components/Input16 ===

$80992639558333* Entrée 16 bits


=== trans/panel_and ===

$48633048126675*
[right]Entrée 1
Entrée 2
Sortie[/right]


=== levels/byte_not ===

$14196498898485* La réalisation et l'utilisation d'outils est fondamental lors des premières étapes de l'évolution de l'intelligence.
$12982025748137* [center]Applique NOT sur chaque bit de l'octet en entrée.[/center]
$10294533225655* Notre précédent modèle utilisant la taille du cerveau pour prédire l'intelligence était naïf.
$14958585065722* En fait c'est le nombre de bras d'une créature qui est clairement le principal prédicateur de l'intelligence. Savais-tu qu'il existe des créatures marines sur ta planète avec quatre fois plus de bras que toi et qui réussissent mieux dans les tests ?


=== trans/component_output_car_label ===


#  Label appears on the component and must be 3 letters or less
$42054040513351* CAR


=== trans/panel_outputlevel_output ===

$16896928682474* [right]Sortie[/right]


=== components/Maker64 ===

$17464069717985* Créateur 64 bits
$79677187590355* Transforme 64 bits en 8 octets


=== trans/manual_ASCII_encoding ===

$30404865580119* Code ASCII


=== trans/options_pan_right ===

$33884219481037* Déplacer la vue vers la droite


=== rpg/maps/prison/sign3 ===

$63642446288775* Labo secret
$53627322304101* Panneau


=== misc/expectations_toggle ===

$78508488734457* ON
$97697026280362* OFF
$58021874775869* Activer/désactiver les objectifs


=== trans/not_gate_RichTextLabel2 ===

$10340875578771*
[right][color=#e49f44]Entrée[/color]
Sortie attendue
Sortie courante[/right]


=== levels/Calculations ===

$14458828731919*
C'est maintenant qu'il faut intégrer le circuit "Unité Arithmétique" réalisé précédemment avec le circuit registre. Le circuit de calcul a été enregistré dans l'atelier de composants et est maintenant utilisable en tant que composant. Si tu as oublié à quoi correspondent les pattes retourne regarder le circuit dans l'atelier de composants.

Utilise le décodeur déjà construit pour déterminer si l'on doit copier de registres à registres ou faire un calcul. Voici pour rappel les 4 modes possibles:
[OFF][OFF] Constante
[ON][OFF] Copie
[OFF][ON] Calcul
[ON][ON] Condition

Pour ce niveau tu n'as pas à t'occuper que des modes copie et calcul, lis les [INSTRUCTIONS] détaillées dans le panneau du haut. En mode calcul, prends [color=#e49f44]REG 1[/color] et [color=#e49f44]REG 2[/color] comme entrées et envoie le résultat dans [color=#e49f44]REG 3[/color].

[tip]Pense à la patte de désactivation du décodeur 3 bits.[/tip]
$13013863429580* Pour ce niveau une patte supplémentaire a été ajoutée aux registres. Cette patte émet toujours en sortie la valeur du registre même lorsque la lecture n'est pas activée.


=== trans/instructions_header ===

$15089281203426* [center]Instructions[/center]


=== trans/panel_bitmemory_outputs ===

$17509974261453* Sortie


=== components/Xor16 ===

$55408021160573* XOR bit à bit sur 2 valeurs
$47846591761838* XOR 16 bits


=== components/LevelInput8 ===

$40943344093513* Entrée


=== trans/panel_not_input ===

$96578192050623* [right]Entrée[/right]


=== trans/level_tick_tock_keys ===

$11700778730606*
[right][color=#e49f44]Action
Sortie attendue
Sortie courante[/color][/right]


=== components/And32 ===

$98890160152994* AND bit à bit sur 2 valeurs
$30264879217145* AND 32 bits 


=== trans/rpg_no_signal ===

$33720960099059* Pas de signal


=== components/AND ===

$22719674432950*
[ON] quand les deux entrées sont [ON]
[table=5]
[cell]Entrée 1[/cell][cell][OFF][/cell][cell][OFF][/cell][cell][ON][/cell][cell][ON][/cell]
[cell]Entrée 2[/cell][cell][OFF][/cell][cell][ON][/cell][cell][OFF][/cell][cell][ON][/cell]
[cell]Sortie[/cell][cell][OFF][/cell][cell][OFF][/cell][cell][OFF][/cell][cell][ON][/cell]
[/table]
$58912167455465* AND (ET)


=== trans/manual_text_ascii_encoding ===

$57727768059917* Ce simulateur utilise l'ASCII (étendu) à plusieurs reprises. Voici une table des caractères avec le nombre qui leur corresponde. Le terminal gère plusieurs variantes de l'ASCII étendu.


=== trans/panel_regred_output ===

$59910806432617* Sortie


=== rpg/maps/overworld/glibob ===

$80046978163833*
Trouve Derpoo il doit être
dans l'herbe près de la ferme visqueuse
$45824943235521*
Nous voulons faire sauter
le coeur du réacteur du vaisseau
$97390820492796*
Ensuite pousse le sur
le tapis roulant vers
le réacteur
$61010950688784* Salut robot, j'ai un secret
$77669473873198* Merci de tes services camarade
$78863196560749*
Grand dieu tu vas me demander
de pousser Derpoo là-dedans ?
$83512698380440*
Je travaille
pour la rébellion
$20029368257424*
Le coeur a une seule faiblesse
le petit tuyeau d'échappement
$61319894006188*
En effet. Derpoo, la petite
créature araignée
$72328125758268* Ca semble dingue
$88299738421104*
Laisse moi deviner il
y a quelque chose comme ça
sur le vaisseau ?
thing on the ship?
$22954462436472*
Tout objet suffisamment petit
pour passer dans le tuyau sera
instantanément incinéré sauf s'il
est extrêmement bien protégé
$16108649728007*
Nous devons faire tout
notre possible pour la rébellion


=== trans/panel_fulladder_description ===

$25711866218405* [center]Ajoute 3 entrées[/center]


=== trans/manual_text_short_circuit ===

$31105471890701*
En électronique, deux composants qui émettent des valeurs différentes sur le même fil produisent un court-circuit.

[center][img=100]res://dialogue/short_circuit.png[/img][/center]

Cependant, en déconnectant les pattes de sortie du fil, il est possible de partager le fil (appelé bus) entre plusieurs pattes. Surtout, une seule sortie de composant doit être connectée à chaque cycle, sinon tu risques le court-circuit.

[center][img]res://dialogue/switch.png[/img][/center]

Dans ce simulateur, les pattes qui peuvent être déconnectées sont grises.


=== trans/panel_rol_output ===

$62960066333763* Sortie


=== trans/manual_assembly ===

$14434902453525* Assembleur


=== trans/nand_values ===

$38006065064488*
[right][color=#e49f44]Entrée 1
Entrée 2[/color]
[b]Sortie[/b][/right]


=== trans/complete_flower_4 ===

$86527701695205* [center]APPUIE SUR UNE TOUCHE POUR CONTINUER[/center]


=== main_scripts/ui ===

$74397786006652* Sorties
$26316545288606* Logique
$31787377521276* 16bits
$32778241216484* 1bit
$69169839562869* Sondes
$56684378975952* Perso
$93805543475022* 32bits
$69195385009785* 64bits
$36744990871521* Niveaux
$60495775939951* E∕S
$49451948914812* Maths
$46598465325525* RAM
$12972244522540* Écrans
$53900277352031* 8bits
$73356117817137* Sorties à trois états
$77408777382636* Bidirectionnel
$79029955304279* Entrées
$90490391067117* Bac à sable exclusivement


=== trans/manual_truth_tables ===

$75695254533352* Tables de vérité


=== trans/ui_export_success ===

$97849993500646* Export réussi


=== levels/robot_race ===

$15403032472607* La course de robots est notre sport favori sur le vaisseau. Des robots programmés par différentes personnes vont essayer d'arriver à a fin de la course le plus rapidement possible. Le gagnant sera le programmeur dont le programme aura le moins de ligne.
$67151579876362*
Contrôles du robot accéléré :
[code][color=#e49f44]0[/color] Aller à droite
[color=#e49f44]1[/color] Aller en bas
[color=#e49f44]2[/color] Aller à gauche
[color=#e49f44]3[/color] Aller en haut[/code]
$19966247197959* Cette fois-ci tu contrôleras FastBot : il ne peut pas voir ce qu'il y a devant lui, mais il peut tourner et avancer durant le même coup d'horloge. (Il porte aussi des baskets rouges pour aller plus vite).


=== trans/panel_console_offset ===

$24810778105207* [right]Décalage[/right]


=== components/DelayLine8 ===

$24840584785792* Envoie en sortie au prochain cycle l'entrée de ce cycle 
$63449911993783* Ligne à retard 8 bits


=== rpg/maps/maze/door ===

$38678596054893* Porte
$92590993851956* Je dois être programmé pour faire cela


=== trans/panel_delayline1_input ===

$25839180359382* [right]Entrée[/right]


=== trans/panel_network_inputs ===

$37324411363753*
[right][color=#e49f44]Type de requête[/color]
IP / ID Connexion
Donnée / Port
Taille[/right]


=== trans/tooltip_tooltip ===

$48829429502039*
[b]Exécuter rapidement[/b]
[color=#cccccc][i]Simulation sans mise à jour de l'interface à chaque cycle[/i][/color]


=== trans/panel_nand_description ===

$95680138985553* [center]Effectue un NAND binaire entre les deux entrées[/center]


=== rpg/maps/cave/rat ===

$86611337488971* Sang
$59032985199739* Araignée


=== components/Bidirectional8 ===

$20234315861487* Patte bidirectionnelle 8 bits
$49499540884410* Permet de contourner certaines erreurs de dépendance cyclique


=== rpg/maps/overworld/dumio ===

$90508455672478* Tu es complètement nul
$90907400518591* Robot tu es tellement efficace
$84369544816422*
S'il te plait, aide-moi à convaincre
la belle Gruliette d'aller
à un rendez-vous avec moi
$47782962337131*
Gruliette souhaite que
tu lui offres une fleur rose
$67886215959856*
Je te serai éternellement reconnaissant
pour ton aide Robot Héro !
$70960758502635*
Ah non j'ignore où
en trouver une
$48847456759787*
Elle devrait se trouver
dans ses appartements
maintenant, tu peux la reconnaitre
avec sa peau violette délicate.
$19291216215522* S'il te plait aide moi robot
$60895426154274*
Super, tu as trouvé la fleur,
maintenant apporte-la lui.
$28973657129570* Ca semble médiocre
$59402894800235* Je sors avec Gruliette


=== rpg/maps/overworld/cousin_robert ===

$41316716865633* Je connais Robert...
$86987136934243* Je suis ton cousin Robert.


=== trans/splitter8_output ===

$69714402466566*
Bit 1
Bit 2
Bit 3
Bit 4
Bit 5
Bit 6
Bit 7
Bit 8


=== trans/options_reset_warning ===

$19141523477461*
Toutes les solutions des niveaux, les composants personnalisés et les architectures seront supprimées. Cela ne peut pas être annulé, es-tu sûr de vouloir le faire ?
Le jeu sera fermé, il sera réinitialisé au prochain démarrage.


=== dialogue/schematic_hub/order_by ===

$69981201197158* Tendance
$70134513915163* Ajouts récents
$87115430626073* Mes contributions
$56045953383535* Architectures
$25536941657464* Composants
$43488408276984* Populaire


=== rpg/maps/overworld/chef ===

$70248641743406* Chef


=== levels/Water World ===

$13739681561355* Volume Total : 
$19185457941725* Bonne nouvelle, nous voulons transformer la Terre en un parc aquatique exotique !
$18940654086036* Nous avons besoin de ton aide pour trouver un bon emplacement pour le toboggan aquatique "Glissade du Pirate". En particulier nous cherchons un espace qui peut contenir un grand volume d'eau.
$14706805272652* Appuie sur Entrée pour montrer l'eau
$12881972193444*
Le terrain mesure 16 colonnes de large. Lis l'entrée 16 fois pour trouver la hauteur disponible pour chaque colonne de gauche à droite.
  
Envois alors en sortie comme réponse le volume total que le terrain peut contenir.


=== trans/manual_de_morgan ===

$20250843622435*
Les tables de vérité des quatre portes fondamentales sont symétriques. Tu peux passer de l'une à l'autre en [b][color=#6e9759]inversant l'entrée[/color][/b] (flêches verticales ou en [b][color=#596197]inversant la sortie[/color][/b] (flêches horizontales) comme indiqué dans la figure ci-dessous.

[center][img=400]dialogue/manual/de_morgan.png[/img][/center]

Notes
[table=2]
[cell]1 [/cell][cell]Tu peux passer de n'importe quelle porte de base à un autre, au plus tu dois INVERSER à la fois les entrées et la sortie.[/cell]
[cell]2 [/cell][cell]Tu peux passer de OR à NOR en inversant la sortie. Pareil pour AND/NAND. En fait NOR signifie NON OU et NAND signifie NON ET. Remarque bien que la forme des composants OR et NOR sont identiques à l'exception du petit point à l'extrémité qui signifie NON. AND/NAND sont aussi identiques sauf pour ce point.[/cell]
[cell]3[/cell][cell]Inverser la sortie correspond à inverser tous les bits de la dernière ligne de la table de vérité. Inverser les entrées produit le symétrique de la dernière ligne de la table de vérité par rapport au centre.[/cell]
[/table]


=== trans/rpg_alloy_description ===

$29268002047995*
[center] [color=#eb5260]BOUM ![/color]

Tout le monde meurt.
[/center]


=== levels/delay_level_check ===

$59355217078543* Correct !
$68999077595244* Vérifie
$90847326020954* Pas du tout !


=== trans/options_color_wire ===

$64341547590822* Colorer le fil


=== rpg/maps/cave/door3 ===

$94313460790182* Porte du Donjon


=== misc/credits ===

$15234594767991* Crédits


=== trans/panel_decoder3_disable ===

$50918319838744* Désactiver


=== rpg/coin ===

$39259781619518* Pièce


=== trans/manual_matrix_display ===

$86092436010494* Affichage matriciel


=== trans/options_music_volume ===

$93981778736076* Volume de la Musique


=== trans/level_alu2_code ===

$93157894815498* [center]OR[/center]


=== misc/binary_submit ===

$95509904060545* Valider


=== components/ByteConstant ===

$29445030761909* Valeur Constante
$25159790815891* Constante 8 bits 


=== components/Maker16 ===

$55864807379312* Assemble 16 bits en 2 octets
$39941195789458* Créateur 16 bits


=== components/Output64 ===

$77952953696011* Sortie 64 Bits


=== components/Switch16 ===

$15221175893882* Commutateur 16 bits
$59845475842015* Active/Désactive une valeur


=== trans/share_prompt_bbcode_tags ===

$51065735869890*
Balises BBcode gérées : 
URL : [url]https://turingcomplete.game[/url]
Monospace : [code]01011101[/code]


=== rpg/maps/prison/rat ===

$68894472933139* Squeak squeak
$86305699756314* Sang
$30670667527598* Rat


=== levels/sandbox ===

$17054292175058* Bienvenue dans le bac à sable, ici tu es libre de t'amuser librement. Je t'ai donné des fils de 64 bits et quelques composants supplémentaires d'Entrées/Sorties (IO).
$10731996208080* Il y a également des versions 64 bit du programme, du compteur, du registre et de la RAM. Rappelle-toi que les lectures en RAM 64 bits prennent 1 cycle.
$72764802067974*
Bienvenue dans le bac à sable. 

Les composants sont disponibles dans les menus du côté droit. Une fois placée, clique sur les pattes du composant et glisse pour les connecter au circuit. À gauche tu trouveras l'interface pour le contrôle de la simulation. Note que tu peux utiliser le clic droit sur le bouton "Vitesse d'Exécution" pour sélectionner la vitesse de ton choix.

Tu peux trouver plus d'information sur la simulation dans le manuel (bouton en haut à gauche). Les fonctions importantes à voir sont l'"atelier de composants" qui te permet de créer tes propres composants and le composant programme, qui te permet de définir ton propre langage assembleur.
$19454393978813* Le mini clavier te permet de contrôler ton ordinateur directement avec ton  clavier.
$14434122873489* Le générateur de forme d'onde (Waveform) te permet de générer des sons. Je vais probablement regretter de t'avoir donné celui-là.
$18405942066048* L'horloge donne l'heure UNIX courante en microsecondes.
$10451578314373* L'Écran Console te permet de dessiner des caractères sur un écran (voir caractères ASCII dans le manuel)


=== trans/level_complete_stat_type ===

$69511102367948* Type


=== trans/panel_or_input ===

$70466834507347*
[right]Entrée 1
Entrée 2[/right]


=== misc/onwards ===

$51096427131653* C'est parti !


=== trans/manual_recipe_Label ===

$30773017984502*
La plupart des [color=#dd6576][url=Circular dependency]dépendances circulaires[/url][/color] sont chaotiques, inutiles et créées par erreur. Il y a quelques exceptions utiles néanmoins. Si elles sont activées dans le menu option, le simulateur en autorise quelques unes.

[b]Bascule Nor[/b]
La bascule nor stocke une valeur de 1 bit, toujours disponible sur le fil [b]Q[/b].

[center]
[table=3]
[cell]   [b]S[/b]  [/cell][cell]      [b]R[/b]     [/cell][cell]Action[/cell]
[cell]  [img]dialogue/off.png[/img][/cell][cell] [img]dialogue/off.png[/img][/cell][cell]Aucun effet[/cell]
[cell]  [img]dialogue/off.png[/img][/cell][cell] [img]dialogue/on.png[/img][/cell][cell]Valeur = [img]dialogue/off.png[/img][/cell]
[cell]  [img]dialogue/on.png[/img][/cell][cell] [img]dialogue/off.png[/img][/cell][cell]Valeur = [img]dialogue/on.png[/img][/cell]
[cell]  [img]dialogue/on.png[/img][/cell][cell] [img]dialogue/on.png[/img][/cell][cell]Erreur[/cell]
[/table]                    [img=150]dialogue/manual/circular_recipes/nor_latch.png[/img]
[/center]

[b]Bascule Nand[/b]
La bascule nand stocke une valeur de 1 bit, toujours disponible sur le fil [b]Q[/b].
[center]
[table=3]
[cell]   [b]S[/b]  [/cell][cell]     [b]R[/b]     [/cell][cell]Action[/cell]
[cell]  [img]dialogue/off.png[/img][/cell][cell] [img]dialogue/off.png[/img][/cell][cell]Erreur[/cell]
[cell]  [img]dialogue/off.png[/img][/cell][cell] [img]dialogue/on.png[/img][/cell][cell]Valeur = [img]dialogue/off.png[/img][/cell]
[cell]  [img]dialogue/on.png[/img][/cell][cell] [img]dialogue/off.png[/img][/cell][cell]Valeur = [img]dialogue/on.png[/img][/cell]
[cell]  [img]dialogue/on.png[/img][/cell][cell] [img]dialogue/on.png[/img][/cell][cell]Aucun effet[/cell]
[/table]                    [img=150]dialogue/manual/circular_recipes/nand_latch.png[/img]
[/center]

[b]Bascule And Or[/b]
La bascule and or stocke une valeur de 1 bit, toujours disponible sur le fil [b]Q[/b].
[center]
[table=3]
[cell]   [b]H[/b]  [/cell][cell]     [b]R[/b]     [/cell][cell]Action[/cell]
[cell]  [img]dialogue/off.png[/img][/cell][cell] [img]dialogue/off.png[/img][/cell][cell]Valeur = [img]dialogue/off.png[/img][/cell]
[cell]  [img]dialogue/off.png[/img][/cell][cell] [img]dialogue/on.png[/img][/cell][cell]Erreur[/cell]
[cell]  [img]dialogue/on.png[/img][/cell][cell] [img]dialogue/off.png[/img][/cell][cell]Aucun effet[/cell]
[cell]  [img]dialogue/on.png[/img][/cell][cell] [img]dialogue/on.png[/img][/cell][cell]Valeur = [img]dialogue/on.png[/img][/cell]
[/table]                    [img=150]dialogue/manual/circular_recipes/and_or_latch.png[/img]
[/center]


=== trans/panel_equal_description ===

$66334667083051* [center]Vérifie que les Entrées 1 et 2 sont identiques[/center]


=== levels/byte_less ===

$11252365204151* Réalise un circuit dont la sortie est [ON] quand la première entrée est inférieure à la seconde. Les octets sont [color=#dd6576]NON SIGNES[/color].
$62766453128684* Est ce que {a} est inférieur à {b}?
$11632471752785* [center]Détermine si la première entrée est inférieure à la seconde.[/center]


=== levels/Logic Engine ===

$38905765358316* CODE
$17594613477534*
Réalise un circuit qui peut effectuer les opérations OR, NAND, NOR et AND sur deux entrées. La troisième entrée sera l'[INSTRUCTION]. Une [INSTRUCTION] est juste le nom du nombre qui indique ce que l'on doit calculer.

Instructions :
[code][color=#87a8c8]0 OR
1 NAND
2 NOR
3 AND[/color][/code]

Enfin tu ne peux pas déplacer les composants rouges dans ce niveau, pour des raisons que l'on t'expliquera plus tard.
$74299241677249* ENTRÉE 1
$60407971040713* ENTRÉE 2


=== trans/level_byte_less_i_description ===

$21195810950441* [center]Détermine si la première entrée est inférieure à la seconde.[/center]


=== trans/hub_order_by ===

$83319579232915* Trié par


=== trans/component_panel_latency_RichTextLabel2 ===

$51386316768363*
Es occuppé
Sortie 1
Sortie 2
Sortie 3
Sortie 4


=== components/Splitter64 ===

$80420054807186* Répartit 64 bits en 8 octets
$14205692632393* Répartiteur 64 bits


=== misc/component_button ===

$75542474510177* PORTE
$20148770258379* Composant sans surface
$53184531022842* Bac à sable uniquement
$40492377880609* Les pattes se chevauchent
$63839315669055* DÉLAI


=== trans/panel_index_bit_index ===

$96885367697181* [right]Index[/right]


=== trans/panel_divmod_input ===

$48801764966719*
[right]Enumérateur
Diviseur[/right]


=== components/Output 3 ===

$96269858195218* Sortie


=== components/Output 1B ===

$15931283897895* Sortie 8 Bits


=== components/Xor64 ===

$95012060885697* XOR 64 bits
$13031452187028* XOR bit à bit sur deux valeurs


=== trans/panel_output_output_1 ===

$38712851498419* Sortie 2


=== misc/skipped_custom ===

$38174137226538* Choisir le composant

#  This is the text on a button that appears when a custom component has changed size and no longer fits in a schematic. You can press this button to make the camera go to the location where the custom component was
$99860977387728* Voir l'emplacement


=== components/ByteXor ===

$98219910712564* XOR 8 bits
$83236921580268* XOR bit à bit sur 2 valeurs


=== trans/panel_counter16_output ===

$13295622648285* Sortie


=== levels/Spacial Invasion ===

$19967210826470* Attention : tu ne peux tirer avec le laser que lorsque les tir précédents ont disparus.
$16294185981398* Le soute du vaisseau est infesté de rats de l'espaces.
$11505369795084* Regarde [color=#e49f44][url=the_robot]la page du robot[/url][/color] pour connaître les instructions pour le programmer. Tu peux aussi trouver un lien vers cette page dans l'éditeur de programmes.
$10515630949378* Nous avons connecté ton ordinateur à notre robot avancé et nous voulons que tu le programmes pour qu'il dératise la soute.


=== components/Nand8 ===

$50859914201083* NAND bit à bit sur 2 entrées
$93314093190526* NAND 8 bits


=== components/Add64 ===

$14174811828377* Ajoute 2 entrées
$73418471595285* Ajouter


=== main_scripts/leg_level ===

$70383685548547* REG 
$20104629254326* ARGUMENT 2
$65642901654732* {component} devrait être désactivé
$98778676892898* {component} devrait être actif avec la valeur {value}
$14186606871089* Au prochain cycle la valeur du compteur sera {wrong_value} alors qu'on attend {value}
$27868897434461* Composant compteur introuvable
$37810243909140* COMPTEUR
$38681417496680* ARGUMENT 1
$43723329256095* REGISTRE {nr}
$50722296752142* ENTREE
$24003300271049* {component} devrait avoir la valeur {value} et non {wrong_value}
$60997201855346* ADRESSE DE RESULTAT
$50231510806554* Composant programme introuvable
$49810487048038* COMPTEUR
$18236360532765* SORTIE
$20950946171790* SAUTER VERS
$84307766381146* OPCODE (code d’opération)


=== levels/call_ret ===

$15840165316981*
Dans ce niveau tu as pour tâche d'implémenter les appels de fonctions et les retours avec les instructions [color=#e49f44]call[/color] et [color=#e49f44]ret[/color].

Fais attention au retour d'une fonction, tu dois sauter à l'adresse qui vient APRÈS l'instruction [color=#e49f44]call[/color], sinon tu te retrouveras avec un boucle infinie.
L'instruction [color=#e49f44]call[/color] doit réaliser les actions suivantes :
 [i]- Ajouter la longueur de l'instruction au compteur et [color=#e49f44]EMPILER[/color] cette longueur sur la pile[/i]
 [i]- Sauter à l'adresse de la fonction[/i]

L'instruction [color=#e49f44]ret[/color] doit réaliser les actions suivantes :
 [i]- [color=#e49f44]DÉPILER[/color] l'adresse de retour de la pile et sauter à cette adresse[/i]

Tu peux échanger de l'information avec et depuis une fonction en écrivant normalement les données dans des registres. Rappelle-toi quels registres sont écrasés par une fonction avant de l'appeler.
$19416009887091*
Parfois il est utile de réutiliser le même morceau de code. On appele ces morceaux des "fonctions". Pour pouvoir les utiliser, on pourrait utiliser le [color=#e63e5b][url=termonology]jump[/url][/color] pour sauter au début de la fonction et pour en ressortir à la fin. On appele cette méthode "l'appel" d'une fonction et le retour au programme le "retour" de la fonction.

Mais pour que l'on puisse utiliser ce morceau de code plusieurs fois, on doit pouvoir sauter à des endroits différents lors du retour, dépendant de l'endroit dans le programme où l'on a appelé la fonction.

On pourrait sauvegarder la valeur du compteur dans un registre avant de sauter dans la fonction et utiliser cette valeur pour en ressortir. Cependant, en faisant comme ça on pourrait écrire par dessus la valeur du registre si on appele une fonction depuis une autre fonction et on ne pourrait jamais revenir au programme principal.

Par exemple:
Disons que la fonction A appelle la fonction B qui appelle a son tour la fonction C. Quand on voudra revenir en arrière on aura besoin que de l'adresse de retour de la fonction B et une fois dans B on aura besoin que de l'adresse de retour de la fonction A. En général, indépendamment du nombre d'appels de fonctions, la première adresse stocké sera toujours utilisé en dernier. Magiquement, c'est exactement le comportement du stack.
$19369640789869* Les coupes budgétaires ont conduit à réduire les salaires, et maintenant les assistants du labo sont en grève. Tu vas devoir t'autoévaluer dans ce test. Cela nous permettra d'évaluer ton niveau d'honnêteté et de maturité.
$15463931654475* [center]Ajoute les instructions "call" et "ret"[/center]


=== misc/ProbeWireBit ===

$49521764791439* Sonde de fil (bit)
$15206117280094* Affiche une valeur sur ton composant personnalisé ou dans l'éditeur de programme


=== trans/manual_computer_concepts ===

$60892983318818* Lexique informatique


=== components/ByteShr ===

$89595863403484* Décalage à droite
$69394421220436* Décalage à droite des bits d'une entrée


=== rpg/maps/overworld/monklaar ===

$78391472992197* J'adore le nouveau fruit de la cantine !


=== trans/level_sr_latch_RichTextLabel3 ===

$55348415524361*
[right]Entrée 1
Entrée 2
Sortie attendue
Sortie actuelle[/right]


=== components/Ashr64 ===

$26454447445967* Décale les bits à droite, sans modifier le signe du nombre
$91080427115081* Décalage Arithmétique à droite


=== components/LessU64 ===

$13018528868948* Inférieur (non signé)
$90244529484227* Détermine si une entrée est inférieure à la seconde


=== trans/panel_regredplus_output ===

$33621557361089*
Lire la sortie
Toujours activer la sortie


=== trans/panel_shr_input ===

$98628213136355*
[right]Valeur
Décale de[/right]


=== trans/level_byte_no_description ===

$19806403089477* [center]Inverse chaque bit[/center]


=== rpg/maps/prison/human ===

$26878139502295* Ici gis le joueur
$55952257027183* Humain
$15754158619172* Sang
$46356151087784* Je suis le joueur


=== levels/call_ret/completed ===

$65495857744236* Niveau terminé
$82323203550887* Pouvons-nous te faire confiance ?


=== trans/manual_text_instructions ===

$24791538034329*
Ce que ce jeu appelle une "instruction" s'appelle également opération ou opcode (raccourci anglais de code opération. Quelquesoit le système d'exploitation, le langage de programmation et tous les couches logicielles utilisées, tous les logiciels doivent finir par être ramenés à des instructions que le CPU peut exécuter.

A l'intérieur des processeurs modernes, les instructions sont converties en "microcodes" qui correspondent à des étapes encore plus élémentaires et sont inaccessibles au programmeur.


=== components/LessU16 ===

$91783087669146* Détermine si une entrée est inférieure à la seconde
$33190791348214* Inférieur (non signé)


=== components/Xor32 ===

$66299093873977* XOR 32 bits 
$38169019785615* XOR bit à bit sur 2 entrées


=== trans/level_turing_complete_description ===

$74859324795927* [center]Ajoute les conditions aux codes de calcul[/center]


=== trans/level_nand_check ===

$61241226128494* Non !
$32982011047799* Vérifie


=== trans/level_complete_tooltip ===

$33922330743421*
[b]Couleur de fil[/b]
[color=#cccccc][i]Organise tes schémas avec ces couleurs.[/i][/color]


=== rpg/maps/overworld/knight ===

$97019929955594* Tu ne passeras pas
$86067786292380* Je vais juste faire le tour


=== trans/level_odd_number_RichTextLabel2 ===

$28592851869484*
[right][color=#e49f44]Entrée 1
Entrée 2
Entrée 3
Entrée 4[/color]
Sortie attendue
Sortie actuelle[/right]


=== trans/level_complete_robot ===

$73150174144736*
[b]Robotron 9000+[/b]
[color=#cccccc][i]Contrôle [color=#e49f44]Robotron 9000+[/color] à l'aide de ton ordinateur[/i][/color]


=== trans/panel_matrix_color ===

$78812572100236* [center]Pixels / Raffraichissement[/center]


=== components/LessI64 ===

$42718501644862* Inférieur (signé)
$19948786194409* Détermine si une entrée est inférieure à la seconde


=== components/ByteLessU ===

$68645721548287* Détermine si une entrée est inférieure à la seconde
$73502755965496* Inférieur (non signé)


=== ui/global_translations ===

$53021804895845* ETi
$69956969985790* OUi

#  Instead of writing 5839000, the number turns into 5.8M
$22896492410578* M
$11144256835662* XORi

#  4 letters max
$61412773713567* SUB
$85913831661289* SI_INFERIEUR
$52344899983501* SI_INFERIEUR_OU_EGAL
$89945092889418* SUBi

#  4 letters max
$89011349770597* NOT
$18868256335352* Dépendance circulaire - La sortie d'un composant est reliée à sa propre entrée. [url=page~Circular dependency]Plus d'infos[/url]
$71559031724238* SI_NON_EGAL
$29718660090112* Mauvaise réponse

#  4 letters max
$40520283279584* XOR
$12671132029272* Ton circuit à été sauvegardé dans l'atelier de composants.
$71204580217527* NOTi
$71195301111400* ADDi
$98178474649432* SI_SUPERIEUR_OU_EGAL
$68187490877029* SI_EGAL

#  4 letters max
$44009845985661* ADD

#  4 letters max
$68666991962246* OR
$44906330481241* Délai
$30602804398798* Portes
$45532697833519* Niveau {level} atteint !

#  4 letters max
$33873219185286* NAND
$79492115258673* SI_SUPERIEUR

#  Instead of writing 5839, the number turns into 5.8K
$84696693690500* k

#  4 letters max
$64519909700148* AND
$76763908762578* Cycle

#  4 letters max
$36090730285143* NOR
$37093663674348* Niveau {x}

#  Instead of writing 5839000000, the number turns into 5.8B
$71072134093858* G


=== trans/panel_decoder2_description ===

$29468245669811* [center]Active 1 des sorties en fonction de l'entrée[/center]


=== components/Shl16 ===

$79406691850426* Décalage à gauche
$34287811246049* Décale à gauche les bits d'une entrée


=== trans/level_division_headers2 ===

$43313037226215* Reste


=== trans/levels_any_doubles_RichTextLabel2 ===

$60287131882436*
[right]Entrée 1
Entrée 2
Entrée 3
Entrée 4[color=#e49f44]
Sortie actuelle
Sortie attendue[/color][/right]


=== trans/schematics_menu_visible_label ===

$34084132835354* Visible dans le menu


=== components/RegisterRedPlus ===

$57531353625235* Registre


=== trans/level_saving_bytes_text ===

$43691912945654*
[right]Action
État attendu
Sortie attendue
[/right]


=== trans/panel_input_input_2 ===

$13656747150138* Entrée 3


=== components/Counter64 ===

$62528867413395* Compteur 64 bits 
$62736827510023* S'incrémente à chaque cycle jusqu'à réinitialisation


=== main_scripts/rpg ===

$87641351044559* Rien
$13202063774683* Mur
$14021436258446* VISIBLE : [color=#e49f44]{looking_at}[/color]
$57777174895519* Mur
$25433644956674* Tué par {who}
$64739179991428* Le robot est mort !


=== misc/add_assembly ===

$66747898777348* Ajouter


=== trans/level_nand_1 ===

$71204033550134* Que fait la porte NAND ?


=== rpg/maps/prison/exit_door ===

$92379689291727* Porte


=== trans/overwrite_button ===

$11839708860574* Remplacer


=== rpg/maps/overworld/bush ===

$37683898820147* C'est un buisson
$93113262859645* Buisson


=== misc/rom_file_select_button ===

$46471024006274* Définir le fichier par défaut


=== trans/manual_text_program ===

$25326551844839*
Le composant programme est un composant en lecture seule dont les données sont programmées en assembleur. Pour éditer le code, clique sur l'icône édition jaune dans le coin du composant.


[center][img]dialogue/manual/program_edit.png[/img][/center]

Au milieu de l'écran tu verras la zone de code, lis-en plus sur l'assembleur [color=#4d82c5][url=Assembly]ici[/url][/color].

A gauche de l'éditeur, tu peux ajouter des codes assembleur (mnémoniques). Les codes assembleurs remplacent les nombres, ainsi au lieu de te rappeler quel nombre représente l'instruction ET dans ton architecture, tu peux ajouter "ET" à ta liste de codes assembleur, ce qui facilite la lecture et l'écriture.

[center][img]dialogue/manual/assembly_codes.png[/img][/center]

Sur le composant programme tu trouveras aussi le bouton "Espion".

[center][img]dialogue/manual/watch_state.png[/img][/center]

Ceci sert à connecter l'éditeur assembleur aux registres, compteurs et points d'observation. Avec cela, l'état de ton architecture peut être étudié en même temps que tu écris le code, sans fermer l'éditeur.


=== components/Output32z ===

$20432213737411* Sortie commutée 32 Bits
$73681609562628* Sortie activée seulement si la patte d'activation est [ON]


=== trans/level_negative_Label ===

$11951041502381* Modifie la signification de chaque bit en modifiant les nombres.


=== trans/level_byte_equal_description ===

$38686097566531* [center]Vérifie si les octets sont égaux[/center]


=== components/Xnor ===

$94079327237795* XNOR
$90614106399129*
[ON] quand les entrées sont égales
[table=5]
[cell]Entrée 1[/cell][cell][OFF][/cell][cell][OFF][/cell][cell][ON][/cell][cell][ON][/cell]
[cell]Entrée 2[/cell][cell][OFF][/cell][cell][ON][/cell][cell][OFF][/cell][cell][ON][/cell]
[cell]Sortie[/cell][cell][ON][/cell][cell][OFF][/cell][cell][OFF][/cell][cell][ON][/cell]
[/table]


=== components/Not16 ===

$17394768116288* NOT 16 Bits
$91053300263019* Inversion bit à bit d'un mot de 16 bits


=== trans/level_complete_manual_page ===

$39011561067359* [b]Page du Manuel[/b]


=== trans/panel_sound_command ===

$66510191984141* Commande


=== trans/panel_input_up ===

$97169317610794* Haut


=== trans/manual_network ===

$67416967652082* Réseau


=== trans/level_complete_stat_level ===


# [color=#cccccc][i]RTFM[/i][/color]Entry: [color=#68d277]Architectural complexity[/color]
$92313038380926* Niveau


=== component_panels/SpriteDisplay ===

$94199633210330* Aucun


=== trans/ticks_sec ===

$16026817441460* cycles/sec


=== rpg/maps/boss_room/tricky ===

$36278362971660* Non non non !!
$48425443153584* la haine haine haine
$83674875280936* Ne sois pas timide
$55557864347967* Maaaaaaal
$46678960551148* NON NON NON
$34049297531488* s'il te plait viens viens
$45293657348934* Hahahah
$44499633447481* J'ai hâte
$45196756331738* rusé
$62754542093871* Tire tire tire
$96717076976482* Reviens. Mon coffre
$39217019822298* GIGIGIGIGI
$54218005116072* Mal mal mal
$83023298467462* GIGIGIGIG
$88481545304668* GIIIIIII
$83172011939489* n'ais pas peur
$58217446676216* Rip tricksy


=== ui/top_bar/gate_score ===

$16224450605442* PORTES :


=== trans/xor_gate_RichTextLabel2 ===

$21417732641222*
[right][color=#e49f44]Entrée 1
Entrée 2[/color]
Sortie attendue
Sortie courante[/right]


=== trans/panel_shr_output ===

$53187359961794* Sortie


=== trans/options_setting_program_alignment ===

$54874717650167* Code aligné


=== trans/share_prompt_label ===

$61304386273201*
Nom
Description


=== trans/panel_or_output ===

$68791649314727* Résultat


=== misc/score_sync ===

$76911045833478* synchroniser le score


=== components/ON ===

$96212935718484* Toujours [ON]
$95896157427528* ON


=== components/RegisterRed ===

$10081371413873* Registre


=== trans/delete_confirm ===

$57294448765637*
Es tu sûr de vouloir
supprimer ce schéma ?
$74657548486940* Oui


=== levels/saving_gracefully ===

$14295883660596* VALEUR
$14950983012226* SAUVEGARDER
$14837033157870* ACTION
$12474728041023*
La Ligne à Retard permet d'enregistrer une valeur pendant 1 cycle. Mais parfois nous aurons besoin d'un composant pouvant enregistrer une valeur pendant plus longtemps.

Tu dois réaliser maintenant un tel composant.
$13045361823397* NE PAS SAUVEGARDER
$13740696609075*
Ce niveau comporte deux entrées.
La valeur sauvegardée est modifiée seulement quand la première entrée est à [ON].
La seconde entrée est la nouvelle valeur de la [color=#e49f44]sauvegarde[/color].

Voici un schéma du composant que tu dois réaliser :

[img]dialogue/saving_gracefully/bit_memory_fr.png[/img]

Envois toujours en sortie la [color=#e49f44]sauvegarde[/color].


=== ui/files_export_description ===

$78500352397752*
[b]Options d'Exportation[/b]

 Format :

 Fichier associé :

 Optimisation :

 Dossier cible :


=== trans/rpg_hats_exit ===

$71200030457801* Sortie


=== trans/level_unseen_fruit_description ===

$96313037592447* [center]Utilise le robot pour scanner le fruit[/center]


=== trans/panel_keyboard_character_mode ===

$98676883649624* [right]Mode caractère[/right]


=== ui/file_export_button ===

$35572795990520* Exporter


=== trans/panel_divmod_output ===

$94866933026297*
Div
Mod


=== trans/instructions_the_robot ===

$26358418182667*
[color=#e49f44]0[/color] Tourner à gauche
[color=#e49f44]1[/color] Avancer tout droit
[color=#e49f44]2[/color] Tourner à droite
[color=#e49f44]3[/color] Profiter de l'instant
[color=#e49f44]4[/color] Effectuer une action [color=#a9a9a9](ENTRÉE)[/color]
[color=#e49f44]5[/color] Tirer au laser [color=#a9a9a9](TAB)[/color]


=== trans/nor_gate_RichTextLabel2 ===

$52955821161579*
[right][color=#e49f44]Entrée 1
Entrée 2[/color]
Sortie attendue
Sortie courante[/right]


=== trans/manual_text_edit_instructions ===

$75786562031150*
Après avoir terminé le niveau "Turing Complet", le panneau d'instructions te permet de modifier les instructions. Ceci est utile si tu souhaites construire tes propres ordinateurs.

Si tu viens de terminer l'ordinateur OVERTURE et que tu vois quelquechose de bizarre, il y a de fortes chances que tu ais changé les définitions.

Chaque ligne a une étiquette et 8 bits que tu peux définir sur [img]dialogue/on.png[/img], [img]dialogue/off.png[/img] ou [img]dialogue/any.png[/img ] (caractère joker). Lors de l'utilisation du panneau d'instructions, si le modèle binaire correspond à une ligne, l'étiquette est affichée.


=== components/Rol32 ===

$88734684504266* Rotation à gauche des bits d'une entrée
$83642246004160* Rotation à gauche


=== trans/panel_add_input ===

$43784903785964*
[right]Retenue en Entrée
Entrée 1
Entrée 2[/right]


=== trans/panel_mux_description ===

$30551449512908* [center]Selectionne l'entrée 1 ou 2[/center]


=== trans/options_code_font_size ===

$98135524286922* Taille de la police du code


=== trans/rpg_complete_derpootext6 ===

$29750433345543* [center]Comment est-ce possible ?[/center]


=== trans/panel_less_u_output ===

$19353239892904* Sortie


=== trans/panel_sum_output_0 ===

$54481599074471* Somme :


=== levels/binary_start ===

$19099025738142* Démarrer


=== ui/file_export ===

$80702678699819* Exporter


=== rpg/maps/boss_room/abyss ===

$75322073059042* Abysses


=== trans/panel_counter8_output ===

$35643379690712* Sortie


=== rpg/maps/overworld/flower ===

$72524391591873* Fleur


=== components/Input1_1B ===

$10517158300617* Entrée
$57868504368581* Lit l'entrée du niveau


=== trans/manual_text_network ===

$70445160410129*
[b]Vue d'ensemble[/b]
Le composant "Réseau' te donne un accès bas niveau à la communication en réseau. En général tu manipules ton réseau en envoyant des color=#e49f44]commandes[/color] au composants et quand des [color=#39aa49]évênements[/color] reviennent du réseau ils sont mis en file et tu les traite un à la fois. Pour suivre les différentes connexions simultanées on utilise des [color=#dd6576]IDs de Connexion[/color].

Voici les types de commande que tu peux envoyer au composant et leurs arguments :
[code]0[/code] Aucune commande
[code]1[/code] [color=#e49f44]Ecouter[/color] ([color=#dd6576]Port[/color])
[code]2[/code] [color=#e49f44]Se Connecter[/color] ([color=#dd6576]IP[/color], [color=#dd6576]Port[/color])
[code]3[/code] [color=#e49f44]Envoyer des données[/color] ([color=#dd6576]ID Connexion[/color], [color=#dd6576]Données[/color], [color=#dd6576]Taille des données[/color])
[code]4[/code] [color=#e49f44]Fermer[/color] ([color=#dd6576]ID Connexion[/color])
[code]5[/code] [color=#e49f44]Lire l'évênements suivant[/color]
[i]Voir le panneau du composant pour identifier les pattes correspondantes à chaque argument.[/i]

Les types de commandes [color=#e49f44]Ecouter[/color] et [color=#e49f44]Se Connecter[/color] génère en sortie le [color=#dd6576]ID Connexion[/color] de la nouvelle connexion. 

Pour que 2 programmes puissent s'[color=#e49f44]Envoyer des données[/color] l'un à l'autre, un programme (appelé serveur) doit d'abord [color=#e49f44]Ecouter[/color] sur un [color=#dd6576]Port[/color] et l'autre (le client) doit alors [color=#e49f44]Se Connecter[/color] en utilisant l'[color=#dd6576]IP[/color] du programme qui écoute et le [color=#dd6576]Port[/color] qu'il a choisi. Une fois la connexion établie, le serveur et le client fonctionnent exactement  pareil.

Remarque qu'une [color=#dd6576]IP[/color] est un nombre 32 bits, qui s'écrit normalement sous forme de 4 octets séparés par des points (par exemple : 127.0.0.1). Dans ce simulateur tu inverseras l'ordre des octets, ce qui fait que  127.0.0.1 devient 0x0100007F. 0x0100007F est toujours l'adresse de bouclage de tes ordinateurs et tu peux l'utiliser pour te connecter aux programmes du même ordinateur.

Tu peux détecter quand des évênements arrivent sur le réseau, en controlant la patte "type du prochain évênement". Voici les types d'évênement :
[code]0[/code] Pas d'évênement
[code]1[/code] [color=#39aa49]Connexion entrante[/color] ([color=#dd6576]ID Connexion[/color], [color=#dd6576]Port[/color])
[code]2[/code] [color=#39aa49]Connexion établie[/color]
[code]3[/code] [color=#39aa49]Réception de données[/color] ([color=#dd6576]ID Connexion, Données[/color], [color=#dd6576]Taille des données[/color])
[code]4[/code] [color=#39aa49]Connexion fermée[/color] ([color=#dd6576]ID Connexion[/color] / [color=#dd6576]Code d'Erreur[/color])

[color=#39aa49]Connexion entrante[/color] arrive seulement après un [color=#e49f44]Ecouter[/color]. Utilise le [color=#dd6576]Port[/color] pour différencier entre les écoutants (il n'est pas possible d'écouter deux fois sur le même port simultanément).

[color=#39aa49]Connexion établie[/color] arrive seulement après un [color=#e49f44]Se Connecter[/color], attend le avant de commencer à envoyer des données.

Tu peux envoyer ou recevoir entre 1 et 8 octets à la fois, utilise le paramètre [color=#dd6576]Taille des données[/color] pour choisir.

Une connexion peut être soit "potentiellement ouverte" ou "fermée". Il n'y a pas d'autre façon de savoir si la connexion est ouverte que d'envoyer des données. Les protocoles réseaux sous-jacents ont été conçus ainsi pour des raisons de fiabilité et de vitesse, ce n'est pas une limitation du simulateur.

Si tu obiens un [color=#dd6576]ID Connexion[/color] valant -1n cela signifie qu'il y a eu une erreur à la connexion.


=== trans/level_negative_Label2 ===

$39515538046175* Modifie les bits pour voir le résultat.


=== ui/toggles/negative_numbers ===

$50924073287410* Choix du format de nombre


=== trans/levels_description ===

$33755630709299* Bats NAK 02 pour sauver le monde


=== misc/factory_back_inner ===

$12211557416281* Revenir au niveau


=== trans/panel_rom_inputs ===

$52400325164412*
[right]Lire
[i][color=#aaaaaa](bac à sable uniquement)[/color][/i] Écrire
Adresse
Écrire valeur[/right]


=== components/ByteShl ===

$74488427658653* Décalage à gauche
$66482114876737* Décalage à gauche des bits d'une entrée


=== components/Add16 ===

$28092601427278* Ajoute deux entrées
$30820974870562* Ajouter


=== components/Not32 ===

$33620523355085* NOT 32 bits
$24607331341411* Inversion bit à bit d'un mot de 32 bits


=== trans/schematics_description ===

$39347262933523* Description


=== trans/nand_Label ===

$11482037025960*
Entrée 1


Entrée 2


=== components/MemoryProbe ===

$46948613505134* Affiche une valeur sur ton composant personnalisé ou dans l'éditeur de programme
$44867305035474* Sonde Mémoire


=== components/LevelOutput8 ===

$77044600156969* Sortie


=== trans/level_turing_complete_text ===

$83740652063566*
Code
Entrée


=== misc/StateProbe ===

$54427436420428* Sonde de fil
$15969687819995* Affiche une valeur sur ton composant personnalisé ou dans l'éditeur de programme


=== trans/manual_text_rgb ===

$52915933943906*
Ce simulateur utilise des couleurs RVB sur 3 octets pour certains composants. Chaque couleur occuppe 1 octet, la valeur correspondant à l'intensité :
[color=#e3243f]RRRRRRRR[/color][color=#55ff55]VVVVVVVV[/color][color=#3333ff]BBBBBBBB[/color]


=== levels/sr_latch ===

$11150103897185*
Dans ce niveau, les composants peuvent dépendre d'eux-mêmes ou former des boucles contenant 2 composants. Malgré ces dépendances certains de ces circuits ont des sorties stables, au moins pour certaines valeurs en entrée.

Le circuit que l'on te demande de construire ici a une dépendance circulaire. Le circuit a aussi 2 "états stables" pour la plupart des entrées. Un état stable signifie ici que les sorties de chaque composant sont en accord avec leurs entrées. Par exemple, une porte OR avec une entrée déconnectée et l'autre connectée à sa propre sortie est stable. Si la sortie est [OFF], les 2 entrées sont [OFF], ce qui est acceptable pour la porte OR. Si la sortie est [ON] alors l'une des entrées l'est aussi. Par contre, une porte NOT connectée à sa propre entrée n'est pas stable. Si la sortie est [ON], alors l'entrée l'est aussi. Cela fait que la porte NOT essaie de changer sa sortie en [OFF]. Le circuit va osciller entre ces deux états indéfiniment et il n'est donc pas stable.
$15754153332116*
Ce niveau présente le concept de bascule. Ce dispositif n'est pas utilisé ailleurs dans le jeu. Néanmoins ce niveau existe pour une raison d'exhaustivité.
  
Si tu n'as aucune expérience en électronique, il est recommandé de sauter ce niveau. Tu pourras toujours revenir plus tard.

# The circuit you are asked to construct here has a circular dependency. The circuit also has 2 "stable states" for most inputs. A stable state here means that every component's output agrees with its input. As an example, an OR gate with one input disconnected and the other connected to its own output is stable. If the output is [OFF], both inputs are [OFF], which agrees with the OR gate. If the output is [ON], then so is one of the inputs. However, a NOT gate connected to its own input is not stable. If the output is [ON], then the input is [ON] as well. This will cause the NOT gate to try and make the output [OFF], which will also make the input [OFF]. The circuit will switch between these two states forever, so it is not stable.
$18165461234561* Les lignes à retard sont simples à comprendre et peuvent être utilisées pour construire n'importe quelle architecture d'ordinateur. Pourtant le matériel moderne ne les utilise plus comme base des mémoires.
$15213907597666* Avec 2 portes NOR, construis le circuit qui correspond à la table. Tu auras besoin d'une bascule.
$19448398663695*
Pour déterminer quels composants contrôlent la sortie dans une dépendance circulaire, il est impossible de fixer un composant de départ. À la place nous utilisons les valeurs des fils du cycle précédent. Cela s'explique par le fait que les électrons ne se déplacent pas instantanément dans la réalité. En fonction du câble, le circuit oscille entre [ON] et [OFF], ou se fixe dans un état stable.
  
Quand un circuit peut se fixer dans 2 états stables distincts, tu as la base pour une mémoire. L'état suivant dépendra des valeurs sur les fils du cycle précédent. De tels circuits sont appelés "bascules".


=== trans/complete_unlocks ===


# When you have a circuit where the wires can settle in either of 2 different stable states, you have a basis for memory. The next state will depend on the values the wires had last tick. Such wires are called "latches".
$45250062735373* Déverrouillé


=== rpg/maps/overworld/table ===

$53798109572704* C'est une table...
$74345816549611* Table


=== components/FastRam ===

$79436020115192* Mémoire rapide mais à coût élevé en portes
$12924829814634* RAM rapide


=== levels/byte_xor ===

$19636386696963* Réalise un circuit qui applique XOR bit à bit sur deux octets.


=== trans/view_solution_text ===

$83652444593618* Veux-tu voir la solution de ce niveau ?


=== misc/add_bottom ===

$86446054110623* Ajoute


=== levels/Immediate Values ===

$64348543296709* Le point d'Observation {value} doit pointer sur la sortie
$14060810229477* Ajoute 6 registres dans le circuit
$79667526283284* Le point d'Observation {value} doit pointer sur le compteur
$14960344494328*
Parfois il est utile de charger une valeur directement depuis le programme que d'un registre. Cela s'appelle charger une valeur immédiate. Pour l'architecture [color=#e49f44]LEG[/color] l'opcode indique directement que nous voulons faire cela. C'est possible de la façon suivante :

Quand le 8ème bit de l'opcode est [ON], utilise l'argument 1 comme une valeur immédiate et non comme une adresse de registre.
Quand le 7ème bit de l'opcode est [ON], utilise l'argument 2 comme une valeur immédiate et non comme une adresse de registre.
	
		[img]dialogue/leg_diagram_2_fr.png[/img]
		
$10788301006338* Le point d'Observation {nr} doit pointer sur un registre ou un composant personnel contenant un registre
$19338533633006* Définis l'incrément du compteur à 4
$15197362332657* Crée un nouveau schéma et ajoute un programme avec une sortie de 4 octets
$18004215603701* Ajoute un compteur au circuit
$10141611261952* [center]Implémente les valeurs immédiates[/center]


=== components/switch ===

$87345192339084* Active/désactive une valeur
$29301846684808* Commutateur 8 bits


=== levels/Wire Spaghetti ===

$29329105515650* Ajoute un registre de plus au circuit
$17106892574116* Ajoute un compteur au circuit
$50177586789991* Ajoute {nr} registres de plus au circuit
$15754373587500* Définis l'incrément du compteur à 4
$56024330661504* Le point d'Observation {nr} doit pointer sur un registre ou un composant personnel contenant un registre
$19099471819164*
Voici les premières choses à faire pour résoudre ce niveau :
    
[b]1.[/b] Clique l'icône schéma ([b][i][/i][/b]) et crée une nouvelle architecture.
[b]2.[/b] Ajoute un bloc de programme avec 4 sorties.
[b]3.[/b] Ajoute un compteur, définis son incrément à 4 et connecte-le au bloc de programme.
[b]4.[/b] Ajoute 6 registres (ou 6 composants personnels contenant un registre)
[b]5.[/b] Clique "Éditer point d'observation" sur le composant programme et connecter les registres aux points 0 à 5. Connecte le compteur au 6 et la sortie au 7.
$18860645759682*
L'architecture [color=#e49f44]LEG[/color] est un ordinateur qui lit 4 octets de programme par cycle. 

Le premier octet correspond à l'opération (l'[color=#e49f44]OPCODE[/color]).

Comme beaucoup d'opérations prennent 2 arguments (ADD, OR etc.), les second et troisième octets servent pour les arguments.

Et comme la plupart des opérations retournent 1 résultat, le quatrième octet est pour le résultat.
  
	[img]dialogue/leg_diagram_1_fr.png[/img]
$11377431500625* Ajoute 6 registres au circuit
$14051336765362* Enfin c'est maintenant que tu commences à construire l'architecture [color=#e49f44]LEG[/color] !
$13268807052125* (Tu pourras additionner 7+7, mais ici 7 signifie lire depuis l'entrée et l'entrée a pour valeur 8)
$30006055126224* Le point d'Observation {output} doit pointer sur la sortie
$19066122929275* [center]Met en place les registres et implémente l'opcode ADD [/center]
$10912834168905*
Enfin, pour ce niveau l'[color=#e49f44]OPCODE[/color] est toujours 0. Cela veut dire qu'il faut additionner les arguments 1 2 et envoyer le résultat sur la destination.

Les valeurs utilisées pour les arguments ou la destination sont les suivantes :
[code]
[color=#e49f44]0[/color]: Registre 0
[color=#e49f44]1[/color]: Registre 1
[color=#e49f44]2[/color]: Registre 2
[color=#e49f44]3[/color]: Registre 3
[color=#e49f44]4[/color]: Registre 4
[color=#e49f44]5[/color]: Registre 5
[color=#e49f44]6[/color]: Compteur
[color=#e49f44]7[/color]: Entrée/Sortie
[/code]
Dans le niveau suivant tu implémenteras d'autres [color=#e49f44]OPCODES[/color], ce qui nécessitera une nouvelle ALU différente de celle d'[color=#e49f44]OVERTURE[/color].
$10922418807673* L'argument 7 nécessite de lire sur l'entrée, mais l'entrée n'est pas active.
$62258842382434* Le point d'Observation {counter} doit pointer sur le compteur
$18769284297247* Créé un nouveau schéma et ajoute un programme avec une sortie sur 4 octets.


=== trans/schematic_new_file_name ===

$24424463568668* Nouveau schéma


=== trans/negative_numbers ===

$57872971841486* Nombres négatifs


