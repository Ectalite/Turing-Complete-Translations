=== levels/ram_block ===

$16196915566111* 0
$14259545926196* A
$12933801309767* A


=== components/Input 1B CODE ===

$16878300327380* Instruction


=== main_scripts/functions ===

$87591753278764* Reg {nr}


=== components/ON ===

$95896157427528* ON


=== components/Output8z ===

$16915419621070* Switched Output
$58449766432492* Only outputs if the switch pin is [ON]


=== levels/negative_numbers ===

$62744038163781* OK


=== ui/abbreviated_units ===


NOTE: Instead of writing 5839000, the number turns into 5.8M
$22896492410578* M

NOTE: Instead of writing 5839, the number turns into 5.8K
$84696693690500* K


=== components/And3 ===

$19664974941910* 3 Pin AND
$86839706221116* 3 pin AND gate


=== main_scripts/leg_level ===

$11144256835662* XORi
$20104629254326* ARGUMENT 2
$89011349770597* NOT
$40520283279584* XOR
$71204580217527* NOTi
$38681417496680* ARGUMENT 1


=== components/NEG ===

$88379907297327* Negate
$62021716182809* Bitwise negates an input


=== components/Switch16 ===

$15221175893882* 16 Bit Switch
$59845475842015* Toggles a value


=== components/Console ===

$66743357915699* Console


=== nim/backend_lib/level_list ===

$15420972347773* RAM
$26705128002562* Conditions
$70993791338383* XOR


=== components/LessU32 ===

$72614358420262* Less (unsigned)
$55380524073095* Checks if one input is less than the other


=== components/Add16 ===

$28092601427278* Adds two inputs
$30820974870562* Add


=== components/Not32 ===

$33620523355085* 32 Bit NOT
$24607331341411* Bitwise negates 32 bits


=== components/Equal32 ===

$32710942647020* Equal
$32433537137277* Checks if the two inputs are equal


=== components/NOT ===

$34453052824732* NOT


=== components/MemoryProbe ===

$46948613505134* Display a value on your custom component or in the program editor
$44867305035474* Memory Probe


=== components/Or32 ===

$92752025948920* Bitwise OR two values
$40180779432911* 32 Bit OR


=== levels/circular_dependency ===

$16336401898647* Test 1/2


=== components/3_decoder ===

$59129788113517* Toggles between eight outputs
$94375716460090* 3 Bit decoder


=== components/Byte Expander ===

$60488114435022* Splits a byte into 8 bits
$21904470559153* Byte Splitter


=== components/And16 ===

$56198785587874* Bitwise AND two values
$26727645933234* 16 bit AND


=== misc/StateProbe ===

$54427436420428* Wire Probe
$15969687819995* Display a value on your custom component or in the program editor


=== components/NOR ===

$83375115196253* NOR


=== trans/map_working_computer ===

$38843517090942* WORKING COMPUTER


=== components/Xnor8 ===

$31985293401482* 8 Bit XNOR
$45789912406647* Bitwise XNOR two values


=== components/Shl32 ===

$38930281262898* Shift left
$88685329847417* Shifts the bits of an input left


=== components/Shl64 ===

$56766765894165* Shifts the bits of an input left
$37014604954362* Shift left


=== components/And64 ===

$80790829001391* 64 bit AND
$89424947351456* Bitwise AND two values


=== components/Program64 ===

$76480303942112* Programmable memory component


=== components/NAND ===

$71130919681688* NAND


=== components/Off ===

$61860786587357* OFF


=== components/ByteEqual ===

$35668435514829* Checks if the two inputs are equal
$39369982838671* Equal


=== components/Mul64 ===

$72281597169494* Multiply
$11665562499390* Multiplies two inputs


=== components/Bidirectional64 ===

$82412839066570* 64 bit bidirectional pin
$24932613021646* Can circumvent certain circular dependency errors


=== components/SRLatch ===

$71931050184389* [img=165]dialogue/sr_latch_tooltip.png[/img]


=== components/Xnor ===

$94079327237795* XNOR


=== components/XOR ===

$54832952840086* XOR


=== misc/specifications ===

$68054407020318* Instructions


=== levels/The Product of Nibbles ===

$13549246864135* Bit 0
$10274387271390* Bit 0


