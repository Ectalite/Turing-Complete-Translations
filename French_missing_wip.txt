=== trans/panel_regredplus_output ===

$33621557361089
Lire la sortie
Toujours activer la sortie


=== dialogue/schematic_hub/load ===

$41294322771286 Charger
$44524092309946 Chargement en cours...


=== trans/panel_hdd_description ===

$28038932532386
[center]Sur le disque dur, la "position de tête" détermine l'adresse à laquelle ont lieu des lectures et écritures.  Utilise la patte de positionnement qui est de type 8 bit signée pour modifier la  "position de tête".
Utilise une valeur de positionnement de 0 si tu ne souhaites pae modifier la position.[/center]


=== trans/panel_or_description ===

$65281182019602 [center]Effectue un OU bit à bit sur deux entrées[/center]


=== trans/panel_matrix_column_major ===

$90704227545058 Pixels principaux de la colonne


=== trans/complete_flower_text3 ===

$81122931510261 [center]QUETE [color=#e49f44]TERMINEE[/color][/center]


=== trans/panel_probewirebit_value ===

$24213353038685 [center]Valeur[/center]


=== trans/panel_counter16_input ===

$87154643308632
[right]Incrémenter / Remplacer
Remplacer la valeur[/right]


=== trans/panel_matrix_color ===

$78812572100236 [center]Pixels / Raffraichissement[/center]


=== main_scripts/functions ===

$35675567872962 Un compteur ne peut fonctionner avec un incrément de 0
$94410251595979 Dépendance circulaire - La sortie d'un composant ramène à sa propre entrée. [url=circular_dependency]Détails[/url]
$39385804477995 Dépendance circulaire - La sortie d'un composant ramène à sa propre entrée.  [url=circular_dependency]Détails[/url]
$83854326413007 Le composant personalisé "{name}" a changé de taille et a été supprimé du schéma car il n'y avait plus assez de place.


=== trans/hub_type ===

$23829497228009 Type


=== dialogue/schematic_hub/share_button ===

$72402014450423 [center]Téléchargement[/center]


=== misc/files_preview ===

$81783412663552 Resynchroniser
$62160230059637 Partager
$70617979378677 Vue


=== trans/panel_decoder2_description ===

$29468245669811* [center]Active 1 des sorties selon l'état en entrée[/center]


=== panel_sound_sound_picker ===

$73758040671294 Notes (clique [i][/i] pour changer)


=== trans/binary_racer_count_down2 ===

$23959994711260 Prêt pour la course ?


=== rpg/maps/overworld/cannon ===

$34523773807049 Canon Laser


=== misc/dir_delete ===

$94436541903929 Architectures : {list}
$17985924005596 Contient {nr} schémas.
$51791491383290 Le composant personalisé est utilisé dans
$63013773025775 Es-tu sûr de vouloir supprimer {file_name} ?
$38011567415872 Le dossier est vide.
$57790786178566 Composants personalisés : {list}


=== trans/schematics_menu_visible_label ===

$34084132835354 Visible dans le menu


=== rpg/maps/unseen_fruit/Lolbert ===

$77789556089413
Les fruits terrestres sont tellement meilleurs
que le ragoût qu'ils servent d'habitude

=== trans/panel_probewirebit_description ===

$36861847387280 Les sondes peuvent être utilisées pour afficher les valeurs sur les composants personalisés ou associer des valeurs au composant programme.


=== trans/panel_input_input_2 ===

$13656747150138 Entrée 3


=== rpg/maps/overworld/bed ===

$19781388766480 Lit
$41698807327261 J'aime regarder les meubles au hasard


=== misc/add_assembly ===

$66747898777348 Ajouter


=== trans/hub_status ===

$64105077092961 Téléchargement...


=== trans/manual_text_program ===

$25326551844839
Le composant programme est un composant en lecture seule dont les données sont programmées en assembleur. Pour éditer le code, clique sur l'icône édition jaune dans le coin du composant.


[center][img]dialogue/manual/program_edit.png[/img][/center]

Au milieu de l'écran tu verras la zone de code, lis-en plus sur l'assembleur [color=#4d82c5][url=Assembly]ici[/url][/color].

A gauche de l'éditeur, tu peux ajouter des codes assembleur (mnémoniques). Les codes assembleurs remplacent les nombres, ainsi au lieu de te rappeler quel nombre représente l'instruction ET dans ton architecture, tu peux ajouter "ET" à ta liste de codes assembleur, ce qui facilite la lecture et l'écriture.

[center][img]dialogue/manual/assembly_codes.png[/img][/center]

Sur le composant programme tu trouveras aussi le bouton "Espion".

[center][img]dialogue/manual/watch_state.png[/img][/center]

Ceci sert à connecter l'éditeur assembleur aux registres, compteurs et sondes. Avec cela, l'état de ton architecture peut être étudié en même temps que tu écris le code, sans fermer l'éditeur.


=== trans/manual_text_matrix ===

$75170402412137*
[b]Showing letters[/b]
It just so happens that a pixel space of 5x7 while small is still able to render letters nicely. By adding an extra row and column, these letters will also look nice when put next to each other. 

[center][img]dialogue/manual/matrix_letter.png[/img][/center]


[b]Small tileable screen[/b]
Rotating the component, you get 8x6 pixels, which has a nice 4:3 aspect ratio and tiling these, you can get most resolutions you might want. The way the pins are set up on this component was specifically designed to allow tiling. Imagine the naive pin design where each component is enabled by a single bit. This would require you to connect 1 wire for each component. In this situation, the number of wires needed for a tiled screen would scale with the area, while the gap needed to fit wires between components, would scale with the circumference. 

[center][img]dialogue/manual/tilable_screen.png[/img][/center]

Instead, by having 2 enable pins, one wire can enable a whole row and another a whole column. This way, a single component can be selected by its unique row and column combination. Further, fitting the rest of the data on the same wires, means that the horizontal and vertical gaps only need to be 1 square wide. This component visually takes up half a square extra on all sides, such that these components can be tiled up pixel perfectly, with 1 square hidden between them for running wires.


=== rpg/maps/overworld/blankidork ===

$19291766514049* We are fighting the rebellion


=== rpg/maps/overworld/gruliette ===

$83120363112787* Oh hi handsome
$61022705156373*
Oh god no, I'm done
with this quest
$84856635901648* IHHHhhhh my heart melts!
$16008092188500* Gruliette
$58406047748371*
Only if he can bring
me a pink flower
$18919563572338*
Do you want to go
on a date with Dumio?
$68101445990611* Here is the pink flower
$68725679456014*
*schmuck* bring this kiss
to Dumio for me
$73977053028689* Oh hi handsome
$50949692384224* My ears hurt
$35813418867082* That's random


=== trans/level_program_text ===

$38014836341470*
[right][color=#e49f44]Code
Input[/color][/right]


=== trans/panel_fileloader_description ===

$72892007399429*
The file rom outputs the content of a file 8 bytes at a time.

The highest 64 bit address (0xFFFFFFFFFFFFFFFF) is special and outputs the length of the file in bytes.


=== trans/level_negative_Label ===

$11951041502381* Change what each bit means by changing the numbers.


=== trans/level_byte_equal_description ===

$38686097566531* [center]Check if the bytes are equal[/center]


=== components/Clock ===

$29674337035619* Placing the clock will divide ticks into 2 phases. The clock is [OFF] in the early phase and [ON] in the late phase. All memory components load in the early phase and save in the late phase.
$73207565196164* Clock


=== trans/level_delay_level_description ===

$24326379952614* Create a circuit that costs 5 GATEs and 6 DELAY


=== trans/panel_max_data_len_max_data_length ===

$88063177433135* [right]Max data length[/right]


=== trans/panel_sound_command ===

$66510191984141* Command


=== trans/level_spacial_invasion_description ===

$44980627299841* [center]Shoot the space rats![/center]


=== rpg/maps/boss_room/tricky ===

$36278362971660* No no no!!
$48425443153584* I hate hate hate
$83674875280936* Do not be shy
$55557864347967* Baaaaaaad
$46678960551148* NO NO NO
$34049297531488* please come come
$45293657348934* Hahahah
$62754542093871* Shoot shoot shoot
$44499633447481* I can't wait
$45196756331738* tricksy
$96717076976482* Turn back. My chest
$39217019822298* GIGIGIGIGI
$83023298467462* GIGIGIGIG
$54218005116072* Bad bad bad
$88481545304668* GIIIIIII
$83172011939489* do not be scared
$58217446676216* Rip tricksy


=== trans/share_prompt_label ===

$61304386273201*
Name
Description


=== trans/panels_sound_description ===

$65379881141228*
[b][color=#e49f44]Command type[/color][/b]
[code]0[/code] No request
[code]1[/code] [color=#e49f44]Play[/color]
[code]2[/code] [color=#e49f44]Reset and play[/color]
[code]3[/code] [color=#e49f44]Stop[/color]


=== trans/component_panels_sprite_inputs ===

$89388086235988*
[right][color=#e49f44]Command type[/color]
Layer ID
Position
Size[/right]


=== dialogue/schematic_hub/order_by ===

$69981201197158* Rising
$70134513915163* Newly added
$87115430626073* My uploads
$56045953383535* Architectures
$25536941657464* Components
$43488408276984* Popular


=== rpg/maps/overworld/dr draco ===

$23996965687702* I am unhappy with my bed\nThe blanket doesn't cover my feet


=== trans/manual_text_edit_instructions ===

$75786562031150*
After you complete the level "Turing Complete" the instruction panel allows you to manually edit instructions. This is useful if you wish to build your own computers.

If you just finished the OVERTURE computer and see something weird, odds are you may have changed the definitions.

Each row has a label and 8 bits you can set to either[img]dialogue/on.png[/img], [img]dialogue/off.png[/img] or [img]dialogue/any.png[/img] (wildcard). When using the instruction panel, if the bitpattern matches a row, the label will be shown.


=== trans/manual_de_morgan ===

$20250843622435*
The truth tables of the four fundamental gates are symmetrical. You can convert between them by [b][color=#6e9759]inverting the input[/color][/b] (vertical arrows) or [b][color=#596197]inverting the output[/color][/b] (horizontal arrows) as indicated by the graphic below.

[center][img=400]dialogue/manual/de_morgan.png[/img][/center]

Notes
[table=2]
[cell]1 [/cell][cell]You can get from any basic gate to any other, at most you have to NOT both inputs and output.[/cell]
[cell]2 [/cell][cell]You can go between OR/NOR by inverting output. The same goes AND/NAND. In fact NOR means NOT OR and NAND means NOT AND. Notice the component shape of OR/NOR are identical except for the little dot at the tip which means NOT. AND/NAND are also identical except for this dot.[/cell]
[cell]3[/cell][cell]Negating the output flips all the bits in the last row of the truth table. Negating the inputs mirrors the last row of the truth table around the center.[/cell]
[/table]


=== trans/level_dance_description ===

$29803992718733* Generate dance moves


=== trans/level_binary_programming_description ===

$66247694103179* [center]Add 5 to the input[/center]


=== trans/level_component_factory_Label2 ===

$37347658035959* Component preview


=== misc/options_keys ===

$15851382978562* Left
$13781284353315* Standby
$78882003890612* TAB
$23041433375813* Launch Shortcut 6
$31504133014584* Space
$91413612191819* Launch Shortcut D
$27874359646701* Treble up
$65834804441085* Open URL
$39317622588588* Launch Shortcut E
$27726004575826* Launch Media
$68199202258305* Next song
$96347674697419* Forward
$58999281424396* CMD
$57038840198662* CTRL
$50955698469296* Launch Shortcut 9
$63772872007214* Stop
$71982112085693* Launch Shortcut 7
$28214161279082* Launch Shortcut B
$83084380695531* SHIFT + TAB
$70423659540492* Launch Mail
$18970380352793* Alt
$55972860446450* Search
$81640191081376* Mute volume
$91733527994209* Launch Shortcut 2
$64108103861848* Refresh
$86957870260110* Bass down
$79228417307539* Right
$48472841971511* Favorites
$94137103361291* Play
$86664894772851* Launch Shortcut F
$57182221632160* Help
$40801064032778* Previous song
$32311987309013* Back
$83183843351576* Launch Shortcut 0
$51594389746074* Launch Shortcut 4
$49947924390850* Launch Shortcut 5
$24086297669523* Volume down
$67529269053604* Home page
$51120580663479* ESC
$66339874250985* Media record
$88355661220986* Launch Shortcut C
$47330905474433* Volume up
$17043010993255* Stop
$18909108170114* Launch Shortcut A
$57391159100618* Launch Shortcut 3
$92739814679396* Bass up
$17896149617641* Treble down
$11908889523442* Bass Boost
$74797401805098* Launch Shortcut 8
$91210884350615* Launch Shortcut 1


=== trans/level_wide_instructions_description ===

$60538893544456* [center]Build a wide instruction program component[/center]


=== schematics_hub/accept_license ===

$72317516399185* Agree to use [color=#dd6576][url=cc0]CC0[/url][/color] license


=== trans/panel_hdd_input ===

$99603056559749*
[right]Seek
Load
Save
Save value[/right]


=== misc/network_update ===

$40010486743721* [center][color=#dd6576]Upload failed.[/color][/center]
$70619187943439* Creator\nUploaded
$83560387278127* Derives from: 
$76023068123024* Error
$81675147704214* Uses the network component
$98151734218561* [center][color=#60a96b]Upload complete.[/color][/center]
$47639082058046* Nothing here yet


=== trans/manual_component_factory_text ===

$42847481618884*
Open the component factory by clicking on this button [img]dialogue/manual/component_factory_icon.png[/img] in the upper left bar.

The component factory allows you to create your own components. The logic you place determine the behavior of the custom component and the layout determines the shape. 

The input and output components you place become pins on the component. Like with other components, a component output leading back to its input causes a circular dependency. Outputs having a path back to inputs causes a circular dependency for custom components, even if the insides of the component would suggest there shouldn't be one. Not having to worry about the inside of components reduces the complexity of larger builds, however this strict abstraction can be inconvenient under certain circumstances. In that case, use the unbuffered pins. They allow bidirectional flow and use the insides of the component to check for circular dependencies.

Probes placed in custom components will show on their layout and can display values inside. Probes can be connected to other custom components, so that deeply nested values can be displayed. Values probed in this way can also be connected to the program component.

For the component factory, the file manager also manages the custom components. The file names decide the component name and the folder structure decides the components placement in the menu.


=== trans/level_complete_ide ===

$56719825235196*
[b]CODE IDE[/b]
[color=#cccccc][i]Name codes and edit them in a convenient editor[/i][/color]


=== levels/byte_mux ===

$15428393549821* SELECT


=== trans/level_byte_constant_description ===

$84789919073603* [center]Always output the number 164[/center]


=== trans/manual_text_network ===

$70445160410129*
[b]Overview[/b]
The "Network" component gives you low level access to networking. In general you manipulate your network by sending the component [color=#e49f44]Commands[/color] and when update [color=#39aa49]Events[/color] return from the network they get queued up and you process them one at a time. To keep track of different simultaneous connections [color=#dd6576]Connection ID[/color]s are used.

These are the command types you can send to the component and their arguments:
[code]0[/code] No command
[code]1[/code] [color=#e49f44]Listen[/color] ([color=#dd6576]Port[/color])
[code]2[/code] [color=#e49f44]Connect[/color] ([color=#dd6576]IP[/color], [color=#dd6576]Port[/color])
[code]3[/code] [color=#e49f44]Send data[/color] ([color=#dd6576]Connection ID[/color], [color=#dd6576]Data[/color], [color=#dd6576]Data length[/color])
[code]4[/code] [color=#e49f44]Close[/color] ([color=#dd6576]Connection ID[/color])
[code]5[/code] [color=#e49f44]Read next event[/color]
[i]See component panel for which pin correspond to which argument.[/i]

Command types [color=#e49f44]Listen[/color] and [color=#e49f44]Connect[/color] outputs the [color=#dd6576]Connection ID[/color] of the new connection.

For 2 programs to [color=#e49f44]Send data[/color] to each other, one program must first [color=#e49f44]Listen[/color] (called a server) on a [color=#dd6576]Port[/color] and the other must then [color=#e49f44]Connect[/color] (called a client), using the [color=#dd6576]IP[/color] of the listening program and the [color=#dd6576]Port[/color] it selected. Once the connection is established, the server and client function exactly the same.

Notice an [color=#dd6576]IP[/color] is a 32 bit number, normally written as 4 bytes with dots in between (example: 127.0.0.1). In this simulator you reverse the order of the bytes, so 127.0.0.1 becomes 0x0100007F. 0x0100007F is always your computers loopback address and you can use this to connect programs running on the same computer.

You can detect when events happen on the network, by checking the "Next event type" pin. These are the event types:
[code]0[/code] No event
[code]1[/code] [color=#39aa49]Incoming connection[/color] ([color=#dd6576]Connection ID[/color], [color=#dd6576]Port[/color])
[code]2[/code] [color=#39aa49]Connect complete[/color]
[code]3[/code] [color=#39aa49]Receive data[/color] ([color=#dd6576]Connection ID, Data[/color], [color=#dd6576]Data length[/color])
[code]4[/code] [color=#39aa49]Connection closed[/color] ([color=#dd6576]Connection ID[/color] / [color=#dd6576]Error code[/color])

[color=#39aa49]Incoming connection[/color] only happens after a [color=#e49f44]Listen[/color]. Use the [color=#dd6576]Port[/color] to distinguish between listeners (it is not possible to listen to the same port twice at the same time).

[color=#39aa49]Connect complete[/color] only happens after a [color=#e49f44]Connect[/color], wait for this before you start sending data.

You may send or receive between 1 and 8 bytes of data at a time, use the [color=#dd6576]Data length[/color] to decide.

A connection may be either "possibly open" or "closed". There is no way to know if a connection is actually open other than sending data. The underlying network protocols were designed like this for reliability and speed, it is not a limitation of the simulator.

If you get a [color=#dd6576]Connection ID[/color] of -1, this means there was an error connecting.


=== trans/panel_keyboard_left ===

$44556588975494* [right]Read next[/right]


=== trans/program_data_width ===

$72687692653533*
[right]Data width:
[/right]


=== trans/manual_sprite_display ===

$28358052747011*
The sprite screen is a 640x480 pixel sprite display. Before using the sprite screen, you first need to attach a sprite map, which is a PNG image that contains all your sprites. Click on the component and set the sprite map in the component panel.

The first input pin is the [color=#e49f44]Command type[/color], the meaning of the next 3 pins depends on the command type as shown below. The sprite ID is always a 8 bit number and all other values (position and size) are always pairs of 16 bit values.

[table=2]
[cell]0[/cell] [cell]No command[/cell]
[cell]1[/cell] [cell][color=#e49f44]Load sprite[/color] (Sprite ID, Position, Size)[/cell]
[cell][/cell][cell][i]Sets the sprite of this ID. The position is the upper left corner of the sprite map.[/i][/cell]
[cell]2[/cell] [cell][color=#e49f44]Set position[/color] (Sprite ID, Position)[/cell]
[cell][/cell][cell][i]This sets the X and Y coordinate of the loaded sprite.[/i][/cell]
[/table]

[center][img=300]dialogue/manual/sprite_screen.png[/img][/center]

Note that sprites are layered in the order of their ID and to remove a layer, simply load a sprite with a width and height of 0.


=== trans/level_robot_racing_description ===

$67533273328897*
Move the robot through the track
Use the smallest program you can


=== nim/backend ===

$64492620873138* Always output
$98703677236827* 1 minute ago
$86244493049244* {hours} hours ago
$95018143828198* 1 year ago
$21685594109067* Just now
$91048993146856* Save
$98363990684104* 1 hour ago
$84076931764831* 1 day ago
$58374689721038* BYTES
$88592386859564* (Worst test: {worst_trial})
$18300496139706* 1 month ago
$17901039729248* {months} months ago

#  This is a file name
$96230605270081* new_program
$82336838435736* Load
$42553566189409* {minutes} minutes ago
$70945526841433* {years} years ago
$81432548841957* (First test scored)
$14036822471924* {days} days ago
$18816732910302* Save value


=== rpg/maps/prison/rat ===

$68894472933139* Squeak squeak
$86305699756314* Blood
$30670667527598* Rat


=== trans/instructions_hint ===

$65105856275770* [center][color=#c5c5c5]Click to toggle the bits[/color][/center]


=== misc/tests_run_all ===

$55533125021199* Run all


=== trans/assembly_editor_header ===

$14116831487331* Assembly Editor


=== misc/menu_schematic_hub ===

$13921098180953* schematic hub


=== trans/manual_text_terminology ===


# DateCustoms
$99266452352883*
[b]Instruction[/b]
A byte or a few bytes that together make the computer perform a specific action.

[b]Opcode[/b]
The part of the instruction that determines which operation (like ADD or AND) is to be done.

[b]Memory address[/b]
A number used as a name for memory locations (often for registers). These are used to specify where an instruction is supposed to load data from or save data to.

[b]Jump[/b]
Changing the value of the program counter, changing which instruction is loaded next.


=== components/DivMod32 ===

$61314390474120* Divide and mod 2 numbers
$84309999871615* Divide


=== trans/manual_text_truth ===

$16559670174521*
The tables of input and output which are used everywhere throughout the game are commonly known as truth tables.








"Input" and "Output" will often be represented with variable names, like in algebra. And instead of using colors, you will often see the values represented as 0 / 1 or False / True.


=== trans/hub_stats ===

$30942143953871* User


=== trans/level_the_bus_description ===

$20464862486158* [center]Copy the value from the correct input, to the correct output[/center]


=== dialogue/schematic_hub ===

$22639280459994* Downloading list...


=== trans/level_complete_hex ===

$94261690850981*
[b]Hexadecimal[/b]
[color=#cccccc][i]Toggle between signed, unsigned and hex numbers[/i][/color]


=== trans/panel_equal_description ===

$66334667083051* [center]Check if Input 1 and Input 2 are the same[/center]


=== trans/hub_order_by ===

$83319579232915* Order by


=== dialogue/schematic_hub/delete_confirm ===

$71921976503347* Yes
$46660924781254*
Are you sure you want 
to delete the schematic called '{name}'?


=== trans/manual_text_universal_gates ===

$37735744928195*
It turns out that you can build all the logic for a computer out of either NAND or NOR gates. The Apollo guidance computers, were built entirely of NOR gates. Designed in the sixties, they had only 4KB of RAM and 32KB of disk space, but guided astronauts to the moon nonetheless.

Modern computers are not built entirely of just one of the universal gates, but when applicable NAND gates are preferred over NOR, because they have less delay and occupy less area.


=== misc/component_button ===

$20148770258379* No component area
$53184531022842* Sandbox only
$40492377880609* Pins overlap


=== trans/panel_network_input_description ===

$36399689035136*
[b][color=#e49f44]Request type[/color] (arguments)[/b]
[code]0[/code] No request
[code]1[/code] [color=#e49f44]Listen[/color] (Port)
[code]2[/code] [color=#e49f44]Connect[/color] (IP, Port)
[code]3[/code] [color=#e49f44]Send data[/color] (Connection ID, Data, Data length)
[code]4[/code] [color=#e49f44]Close[/color] (Connection ID)
[code]5[/code] [color=#e49f44]Read next event[/color]


=== rpg/maps/prison/sign_1 ===

$88221977354540* Sign
$74189085130186*
It says: The button 
opens the prison doors


=== levels/byte_nand ===

$76462832199594* Create a circuit that NANDs two bytes bitwise.


=== trans/panel_index_bit_index ===

$96885367697181* [right]Index[/right]


=== trans/panel_divmod_input ===

$48801764966719*
[right]Enumerator
Divisor[/right]


=== trans/panel_output_output_3 ===

$94657695889458* Output 4


=== trans/levels_byte_or_description ===

$68379799788575* [center]Pairwise OR together each bit[/center]


=== dialogue/dotMatrixtext_link ===

$82486902873499*
The color pin uses byte 2, 3 and 4 for [color=#dd6576][url=RGB color]RGB color[/url][/color] (byte 1 is unused)
The pixel pin uses byte 2, 3, 4, 5, 6 and 7 for selecting pixels to be colored, where each bit corresponds to a pixel. Updates are only visible once byte 8 is set to 1, this "flushes" the changes and updates the display visually.

Both "Enable X" and "Enable Y" have to be on to update the display.


=== misc/save_schematic ===

$36331525379247* Save this schematic


=== rpg/maps/overworld/reactor_entry ===

$81583424078503* Exhaust port


=== misc/skipped_custom ===

$38174137226538* Select component

#  This is the text on a button that appears when a custom component has changed size and no longer fits in a schematic. You can press this button to make the camera go to the location where the custom component was
$99860977387728* Go to location


=== misc/add_code_name ===

$57358078712675* Save


