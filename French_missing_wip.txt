=== trans/level_tower_description ===

$19095794285423 Reconstitue la pile de disques radioactifs


=== trans/manual_text_top_the_robot ===

$45646734925323
L'écran montre le robot et son environnement

[img=430]dialogue/screen.png[/img]


=== trans/panel_output_output_0 ===

$44355002441998 Sortie 1


=== trans/options_language_disclaimer ===

$72959997258737 Tu dois redémarrer pour que le changement de langue soit pris en compte.


=== rpg/maps/overworld/griffith ===

$10482244323050
Maintenant apporte-le dans
le tonneau de ragoût
dans la cuisine
derrière le chef


=== trans/panel_fulladder_description ===

$25711866218405 [center]Ajoute 3 entrées[/center]


=== trans/manual_text_short_circuit ===

$31105471890701
En électronique, deux composants qui émettent des valeurs différentes sur le même fil produisent un court-circuit.

[center][img=100]res://dialogue/short_circuit.png[/img][/center]

Cependant, en déconnectant les pattes de sortie du fil, il est possible de partager le fil (appelé bus) entre plusieurs pattes. Surtout, une seule sortie de composant doit être connectée à chaque cycle, sinon vous risquez le court-circuit.

[center][img]res://dialogue/switch.png[/img][/center]

Dans ce simulateur, les pattes qui peuvent être déconnectées sont grises.

=== levels/decoder ===


#  Short because it will become the name of a custom component
$62618958406279 DEC


=== main_scripts/ui ===

$74397786006652 Pattes de sortie
$26316545288606 Logique
$31787377521276 16 bits
$32778241216484 1 bit
$69169839562869 Sondes
$56684378975952 Personalisé
$93805543475022 32 bits
$69195385009785 64 bits
$36744990871521 Niveaux
$60495775939951 IO
$49451948914812 Maths
$46598465325525 RAM
$12972244522540 Ecrans
$53900277352031 8 bits
$73356117817137 Pattes de Sortie à trois états
$79029955304279 Pattes d'Entrée
$77408777382636 Pattes sans tampon


=== levels/call_ret/no ===

$90567812500955 Non
$82611295916141 Nous attendions mieux de toi.


=== trans/level_signed_negator_description ===

$87777776285772 [center]Inverse le signe du nombre[/center]


=== trans/level_compute_xor_description ===

$61886892927185 Applique AND sur chaque bit 2 à 2


=== rpg/maps/overworld/grenzorp ===

$29100639060467
Je prétends travailler mais en fait
je suis en train de jouer à un jeu vidéo


=== rpg/maps/overworld/chef (2) ===

$60791074149079 Chef


=== main_scripts/overture_level ===

$11338791453100 Dynamique

#  Keep as short as possible as it has to fit on a component. 2 characters preferably, but 3 if you must
$85842797287714 R4
$92808834805287 Copie l'ENTREE vers la SORTIE

#  Keep as short as possible as it has to fit on a component. 2 characters preferably, but 3 if you must
$81103754316448 IN

#  Keep as short as possible as it has to fit on a component. 2 characters preferably, but 3 if you must
$39748815905832 R2

#  "cond" is for condition, this label has to be 4 letters or less as it has to fit on a component
$94982725578534 COND
$93579176707338 Copie ENTREE ({input_val}) vers REG {reg}

#  Keep as short as possible as it has to fit on a component. 2 characters preferably, but 3 if you must
$49076331369118 R5
$95699170830383 Valeur Immediate {nr} vers REG 0
$90667501138629 Si REG 3 ≥ 0, compteur = {val}
$15507583089532 REG {nr} doit avoir la valeur {value}
$78673238418574 Il manque un composant compteur à ton circuit

#  Keep as short as possible as it has to fit on a component. 2 characters preferably, but 3 if you must
$28690475492473  OUT
$65651227755356 Au prochain cycle le compteur aura la valeur {actual}, mais on attend {expected}
$56098077111355 Si REG 3 ≠ 0, compteur = {val}
$36131297419794 Ne jamais réinitialiser le compteur (Ne rien faire)
$76213462280109 si REG 3 > 0, compteur = {val}
$19724825417529 Copie REG {n1} dans REG {n2}
$75122220982708 Copie REG {n1} vers la SORTIE
$44533909869936 REG 1 and REG 2 sont des entrées de l'ALU, REG 3 est pour le résultat.\nIl semble que tu utilises REG 0, 1 and 2.
$51029568177086 Si REG 3 < 0, compteur = {val}

#  Keep as short as possible as it has to fit on a component. 2 characters preferably, but 3 if you must
$73538301913919 R0
$79405336618718 Valeur Immediate {nr} vers REG 0

#  Keep as short as possible as it has to fit on a component. 2 characters preferably, but 3 if you must
$80997977734042 R3

#  Keep as short as possible as it has to fit on a component. 2 characters preferably, but 3 if you must
$37653426314061 R1
$51099912089198 Compteur = {val}
$16914143080303 Copie
$59042824277105 Valeur Immediate
$82949244692745 Calculer
$23384670264323 Si REG 3 = 0, compteur = {val}
$50124579293905 Si REG 3 ≤ 0, compteur = {val}


=== rpg/maps/overworld/sasni ===

$60683848498748
Je ne sais pas pourquoi je
ne suis pas assis sur ma chaise


=== rpg/maps/overworld/barrel ===

$32647427955087 Tonneau
$15228996460366 Ceci est un tonneau


=== trans/panel_console_offset ===

$24810778105207 [right]Décalage[/right]


=== trans/panel_keyboard_description ===

$11215841169495 [center]Même si le clavier numérique indique la valeur de la clé actuellement enfoncée, il n'envoie qu'une valeur par cycle ![/center]


=== rpg/maps/boss_room/treasure_chest ===

$15644092158788 Butin


=== trans/panel_network_inputs ===

$37324411363753
[right][color=#e49f44]Type de requête[/color]
IP / ID Connexion
Donnée / Port
Taille[/right]


=== trans/panel_shl8_input ===

$61388183229084
[right]Valeur
Décaler de[/right]


=== trans/tooltip_tooltip ===

$48829429502039
[b]Exécuter rapidement[/b]
[color=#cccccc][i]Simulation sans mise à jour de l'interface à chaque cycle[/i][/color]


=== trans/panel_nand_description ===

$95680138985553 [center]Effectue un NAND binaire entre les deux entrées[/center]


=== rpg/maps/overworld/tree ===

$72922820287017 C'est un arbre
$33509997611554 Arbre


=== trans/panel_stack_input ===

$86207640171434
[right]DEPILER
EMPILER
EMPILER valeur[/right]


=== rpg/maps/overworld/dumio ===

$90508455672478 Tu es complètement nul
$90907400518591 Robot tu es tellement efficace
$84369544816422
S'il te plait, aide-moi à convaincre
la belle Gruliette d'aller
à un rendez-vous avec moi
$47782962337131
Gruliette souhaite que
tu lui offres une fleur rose
$67886215959856
Je te serai éternellement reconnaissant
pour ton aide Robot Héro !
$70960758502635
Ah non j'ignore où
en trouver une
$48847456759787
Elle devrait se trouver
dans ses appartements
maintenant, tu peux la reconnaitre
avec sa peau violette délicate.
$19291216215522 S'il te plait aide moi robot
$60895426154274
Super, tu as trouvé la fleur,
maintenant apporte-la lui.
$28973657129570 Ca semble médiocre
$59402894800235 Je sors avec Gruliette


=== rpg/maps/overworld/cousin_robert ===

$41316716865633 Je connais Robert...
$86987136934243 Je suis ton cousin Robert.


=== levels/circular_dependency ===

$74003370318715 Vérifie


=== misc/level_search ===

$30824356356347 Recherche de niveau


=== rpg/maps/unseen_fruit/Sign ===

$96190557871470 Panneau
$11494676474259
Ca dit : Robot, be reste pas là à lire les panneaux,
va chercher le fruit !



=== components/Ashr8 ===

$45194709458499 Décale les bits vers la droite, en conservant le signe du nombre
$97418270861318 Décalage arithmétique à droite


=== trans/options_language ===

$30910326565868 Langue


=== rpg/maps/overworld/chef ===

$70248641743406 Chef


=== trans/panel_input_direction ===

$25170203412473 Sens du label


=== trans/level_binary_search_description ===

$11976224688780 [center]Retrouve le mot de passe[/center]


=== trans/rpg_complete_derpoo ===

$25534025775791 [center]derpoo RIP[/center]


=== trans/rpg_decoartion ===

$31542517516487 [center]Les [i][img]res://rpg/heart.png[/img][img]res://rpg/heart.png[/img][img]res://rpg/heart.png[/img][/i] dans la barre supérieure ne sont que des décorations ![/center]


=== trans/manual_de_morgan ===

$20250843622435*
The truth tables of the four fundamental gates are symmetrical. You can convert between them by [b][color=#6e9759]inverting the input[/color][/b] (vertical arrows) or [b][color=#596197]inverting the output[/color][/b] (horizontal arrows) as indicated by the graphic below.

[center][img=400]dialogue/manual/de_morgan.png[/img][/center]

Notes
[table=2]
[cell]1 [/cell][cell]You can get from any basic gate to any other, at most you have to NOT both inputs and output.[/cell]
[cell]2 [/cell][cell]You can go between OR/NOR by inverting output. The same goes AND/NAND. In fact NOR means NOT OR and NAND means NOT AND. Notice the component shape of OR/NOR are identical except for the little dot at the tip which means NOT. AND/NAND are also identical except for this dot.[/cell]
[cell]3[/cell][cell]Negating the output flips all the bits in the last row of the truth table. Negating the inputs mirrors the last row of the truth table around the center.[/cell]
[/table]


=== trans/level_dance_description ===

$29803992718733* Generate dance moves


=== trans/level_binary_programming_description ===

$66247694103179* [center]Add 5 to the input[/center]


=== trans/level_component_factory_Label2 ===

$37347658035959* Component preview


=== misc/options_keys ===

$15851382978562* Left
$13781284353315* Standby
$78882003890612* TAB
$23041433375813* Launch Shortcut 6
$31504133014584* Space
$91413612191819* Launch Shortcut D
$27874359646701* Treble up
$65834804441085* Open URL
$39317622588588* Launch Shortcut E
$27726004575826* Launch Media
$68199202258305* Next song
$96347674697419* Forward
$58999281424396* CMD
$57038840198662* CTRL
$50955698469296* Launch Shortcut 9
$63772872007214* Stop
$71982112085693* Launch Shortcut 7
$28214161279082* Launch Shortcut B
$83084380695531* SHIFT + TAB
$70423659540492* Launch Mail
$18970380352793* Alt
$55972860446450* Search
$81640191081376* Mute volume
$91733527994209* Launch Shortcut 2
$64108103861848* Refresh
$86957870260110* Bass down
$79228417307539* Right
$48472841971511* Favorites
$94137103361291* Play
$86664894772851* Launch Shortcut F
$57182221632160* Help
$40801064032778* Previous song
$32311987309013* Back
$83183843351576* Launch Shortcut 0
$51594389746074* Launch Shortcut 4
$49947924390850* Launch Shortcut 5
$24086297669523* Volume down
$67529269053604* Home page
$51120580663479* ESC
$66339874250985* Media record
$88355661220986* Launch Shortcut C
$47330905474433* Volume up
$17043010993255* Stop
$18909108170114* Launch Shortcut A
$57391159100618* Launch Shortcut 3
$92739814679396* Bass up
$17896149617641* Treble down
$11908889523442* Bass Boost
$74797401805098* Launch Shortcut 8
$91210884350615* Launch Shortcut 1


=== components/Output16z ===

$54782010205016* 16 Bit Switched Output


=== trans/not_gate_click_next2 ===

$20820887361993* Click "Next tick" to see


=== main_scripts/levels ===


#  Level type for the level complete menu
$90134890578411* Misc
$68327708695625* [b]Manual Entry[/b]\n\n Entry: [color=#68d277]{page}[/color]


=== trans/panel_hdd_input ===

$99603056559749*
[right]Seek
Load
Save
Save value[/right]


=== component_panels/Counter ===

$42544828625264* Counter does nothing with a 0 increment


=== trans/level_complete_ide ===

$56719825235196*
[b]CODE IDE[/b]
[color=#cccccc][i]Name codes and edit them in a convenient editor[/i][/color]


=== levels/byte_mux ===

$15428393549821* SELECT


=== trans/level_byte_constant_description ===

$84789919073603* [center]Always output the number 164[/center]


=== component_panels/FileRom ===

$28789952270889* None
$89182778159982* Current file: {file_name}


=== trans/panel_keyboard_left ===

$44556588975494* [right]Read next[/right]


=== rpg/maps/unseen_fruit/door ===

$76111330686725* This door is locked


=== trans/level_capitalize_description ===

$31869433910274* Capitalize each planet name


=== rpg/maps/overworld/captain_grog ===

$54304087865803* Shields up, jump to hyperspace!
$28819210888759* Captain Grog


=== trans/program_data_width ===

$72687692653533*
[right]Data width:
[/right]


=== components/Output8z ===

$66776427840721* 8 Bit Switched Output


=== rpg/maps/prison/sign2 ===

$76218421577794* Sign


=== trans/panels_clock_output ===

$79367841142406* Clock signal


=== trans/level_robot_racing_description ===

$67533273328897*
Move the robot through the track
Use the smallest program you can


=== nim/backend ===

$64492620873138* Always output
$98703677236827* 1 minute ago
$86244493049244* {hours} hours ago
$95018143828198* 1 year ago
$21685594109067* Just now
$91048993146856* Save
$98363990684104* 1 hour ago
$84076931764831* 1 day ago
$58374689721038* BYTES
$88592386859564* (Worst test: {worst_trial})
$18300496139706* 1 month ago
$17901039729248* {months} months ago

#  This is a file name
$96230605270081* new_program
$82336838435736* Load
$42553566189409* {minutes} minutes ago
$70945526841433* {years} years ago
$81432548841957* (First test scored)
$14036822471924* {days} days ago
$18816732910302* Save value


=== rpg/maps/prison/rat ===

$68894472933139* Squeak squeak
$86305699756314* Blood
$30670667527598* Rat


=== trans/instructions_hint ===

$65105856275770* [center][color=#c5c5c5]Click to toggle the bits[/color][/center]


=== components/Output64z ===

$35798118634001* 64 Bit Switched Output


=== misc/tests_run_all ===

$55533125021199* Run all


=== trans/assembly_editor_header ===

$14116831487331* Assembly Editor


=== misc/onwards ===

$51096427131653* Onwards


=== components/DivMod32 ===

$61314390474120* Divide and mod 2 numbers
$84309999871615* Divide


=== trans/manual_text_truth ===

$16559670174521*
The tables of input and output which are used everywhere throughout the game are commonly known as truth tables.








"Input" and "Output" will often be represented with variable names, like in algebra. And instead of using colors, you will often see the values represented as 0 / 1 or False / True.


=== trans/panel_equal_description ===

$66334667083051* [center]Check if Input 1 and Input 2 are the same[/center]


=== trans/manual_text_terminology ===

$99266452352883*
[b]Instruction[/b]
A byte or a few bytes that together make the computer perform a specific action.

[b]Opcode[/b]
The part of the instruction that determines which operation (like ADD or AND) is to be done.

[b]Memory address[/b]
A number used as a name for memory locations (often for registers). These are used to specify where an instruction is supposed to load data from or save data to.

[b]Jump[/b]
Changing the value of the program counter, changing which instruction is loaded next.


=== trans/level_the_bus_description ===

$20464862486158* [center]Copy the value from the correct input, to the correct output[/center]


=== trans/level_complete_hex ===

$94261690850981*
[b]Hexadecimal[/b]
[color=#cccccc][i]Toggle between signed, unsigned and hex numbers[/i][/color]


=== trans/manual_De Morgan's laws ===

$67837328811108* De Morgan's laws


=== levels/Logic Engine ===

$38905765358316* CODE
$74299241677249* INPUT 1
$60407971040713* INPUT 2


=== rpg/maps/unseen_fruit/control_panel ===

$65321532772341* tomato
$51110810065199* orange
$88166963001775* melons
$22160541540437* pears
$74579380431603* golden apples
$66873855446862* kiwi
$73302376080596* melon
$32979920031183* kiwis
$15870062259126* blackberry
$70171621231240* Control panel
$60591101734432* apples
$66897764153265* I have to be programmed to press this
$94493068600800* 2 {fruit_plural} were seen before the {fruit}
$22067281046238* golden apple
$54127406514854* blackberrys
$94632554265850* tomatos
$37155502172032* oranges
$96743644544068* This was the first instance of the {fruit}!
$26638472067834* apple
$84136665661115* pear


=== trans/level_byte_less_i_description ===

$21195810950441* [center]Determine if the first input is less than the second.[/center]


=== levels/always_on ===

$50218226879226* This level unlocks your first manual page. This one is important, make sure you understand it.


=== trans/component_panel_latency_RichTextLabel2 ===

$51386316768363*
Is busy
Output 1
Output 2
Output 3
Output 4


=== trans/level_complete_gate ===

$99373213759665*
[b]Gate score[/b]
[color=#cccccc][i]You can now view the gate score of  wires and components.[/i][/color]


=== trans/panel_segment_info ===

$64695289448271* The 8 bits of the value each turn on 1 of the 8 areas of the display.


=== levels/binary_racer ===

$29718660090112* Wrong answer
$37093663674348* Level {x}


=== trans/manual_text_universal_gates ===

$37735744928195*
It turns out that you can build all the logic for a computer out of either NAND or NOR gates. The Apollo guidance computers, were built entirely of NOR gates. Designed in the sixties, they had only 4KB of RAM and 32KB of disk space, but guided astronauts to the moon nonetheless.

Modern computers are not built entirely of just one of the universal gates, but when applicable NAND gates are preferred over NOR, because they have less delay and occupy less area.


=== components/ByteEqual ===

$39369982838671* Equal
$35668435514829* Checks if the two inputs are equal


=== components/Bidirectional64 ===

$82412839066570* 64 bit Bidirectional Pin
$24932613021646* Can circumvent certain circular dependency errors


=== misc/component_button ===

$20148770258379* No component area
$53184531022842* Sandbox only
$40492377880609* Pins overlap


=== rpg/maps/overworld/slime ===

$15692058001120* Slime
$69726620971060* Picked up all the goo I need
$87592944464187* Picked up goo, {nr} more to go
$44317276399194* Slime goo


=== rpg/maps/overworld/space ===

$70779117877705* Behold the vastness of space
$12015430928135* Space


=== levels/byte_nand ===

$76462832199594* Create a circuit that NANDs two bytes bitwise.


=== trans/panel_index_bit_index ===

$96885367697181* [right]Index[/right]


=== levels/bit_adder ===

$90120091310928* SUM
$48208190309258* CARRY


=== trans/levels_byte_or_description ===

$68379799788575* [center]Pairwise OR together each bit[/center]


=== trans/panel_output_output_3 ===

$94657695889458* Output 4


=== rpg/maps/prison/sign_1 ===

$88221977354540* Sign
$74189085130186*
It says: The button 
opens the prison doors


=== dialogue/dotMatrixtext_link ===

$82486902873499*
The color pin uses byte 2, 3 and 4 for [color=#dd6576][url=RGB color]RGB color[/url][/color] (byte 1 is unused)
The pixel pin uses byte 2, 3, 4, 5, 6 and 7 for selecting pixels to be colored, where each bit corresponds to a pixel. Updates are only visible once byte 8 is set to 1, this "flushes" the changes and updates the display visually.

Both "Enable X" and "Enable Y" have to be on to update the display.


=== rpg/maps/overworld/reactor_entry ===

$81583424078503* Exhaust port


=== trans/panel_output_output_1 ===

$38712851498419* Output 2


=== trans/panel_divmod_input ===

$48801764966719*
[right]Enumerator
Divisor[/right]


=== trans/panel_network_input_description ===

$36399689035136*
[b][color=#e49f44]Request type[/color] (arguments)[/b]
[code]0[/code] No request
[code]1[/code] [color=#e49f44]Listen[/color] (Port)
[code]2[/code] [color=#e49f44]Connect[/color] (IP, Port)
[code]3[/code] [color=#e49f44]Send data[/color] (Connection ID, Data, Data length)
[code]4[/code] [color=#e49f44]Close[/color] (Connection ID)
[code]5[/code] [color=#e49f44]Read next event[/color]


=== misc/add_code_name ===

$57358078712675* Save


=== misc/skipped_custom ===

$38174137226538* Select component

#  This is the text on a button that appears when a custom component has changed size and no longer fits in a schematic. You can press this button to make the camera go to the location where the custom component was
$99860977387728* Go to location


=== trans/level_complete_profile ===

$78783902500954*
[b]Online profile[/b]
[color=#cccccc][i]Find it in the main menu.[/i][/color]


=== rpg/maps/overworld/ogoxo101 ===

$71158910763961*
Did you know earthlings
haven't even had their first robot
insurrection yet?


=== rpg/maps/spacial_invasion/space_rat ===

$72504258410857* The space rats got too close
$94470860110909* Space rat
$67254986543263* Had I been programmed to do this\nthis would have completed the level


=== trans/rpg_press_any_key ===

$66322253595450* [center]Press any key to try again[/center]


=== trans/panel_switch_enable ===

$84515289220335* [right]Enable[/right]


=== trans/panel_bitmemory_inputs ===

$47585933412781*
[right]Save enable

Save value[/right]


=== trans/panel_decoder3_output ===

$41412072467493* Only 1 turns on


=== levels/saving_bytes ===

$10080722944246* DON'T SAVE


=== trans/panel_output_output_2 ===

$33211646632666* Output 3


=== component_panels/Input3Conditions ===

$26016934287702* ALWAYS
$41356418485569* VALUE≥0
$66462144102272* VALUE=0
$62118687143343* VALUE≤0
$60761142691177* VALUE>0
$94629088310936* VALUE≠0
$45120343226481* VALUE<0


=== trans/panel_ram_fast_input ===

$80778301064570*
[right]Load
Save
Address
Save value
Save value
Save value
Save value[/right]


=== misc/ide ===

$80281780593326* {nr} CUST
$33302419528314* {nr} CNT
$57584872924662* {nr} OUT
$28153588160916* {nr} RAM
$66077393938044* {nr} REG
$57192021095756* {nr} WIRE
$89311802272165* {nr} BIT
$18255035821811* {nr} RAM


=== misc/run_fast ===

$54853798559740* Run faster (right click: change target speed)


=== components/Ashr64 ===

$26454447445967* Shifts bits to the right, while maintaining the sign of the number
$91080427115081* Arithmetic Shift right


=== component_panels/Output8zLevel ===

$35707954769868* Not enabled


=== trans/panel_regredplus_output ===

$33621557361089*
Load output
Always output


=== trans/panel_shr_input ===

$98628213136355*
[right]Value
Shift by[/right]


=== trans/panel_hdd_description ===

$28038932532386*
[center]On the hard disk, the "head position" determines at what address reads and writes take place. Use the signed 8 bit seek pin to change the "head position".
Use a seek value of 0 if you don't want to change the position.[/center]


=== levels/call_ret/completed ===

$65495857744236* Level is complete
$82323203550887* Can we trust you?


=== trans/panel_or_description ===

$65281182019602* [center]Bitwise ORs two inputs[/center]


=== trans/panel_input_input_3 ===

$21321167572284* Input 4


=== rpg/maps/spacial_invasion/crate ===

$73286408216451* Crate
$28875169677730* Debris


=== trans/manual_network_label ===

$90392202103470* Input an IP here to convert it to an integer


=== trans/panel_rol_input ===

$95166818170185*
[right]Value
Rotate by[/right]


=== component_panels/Hdd ===

$99685372736199* Head position: {pos}


=== trans/level_nand_check ===

$61241226128494* Nope!


=== rpg/maps/overworld/knight ===

$97019929955594* You shall not pass
$86067786292380* I will just go around...


=== trans/panel_segment_select_color ===

$90642877666116* [center]Select color[/center]


=== levels/The Product of Nibbles ===

$14622683750375* Bit 2
$17331397914567* Bit 1
$13232094477834* Bit 3
$15857218442751* Bit 1
$10430040077737* Bit 3
$16301538038805* Bit 2


=== trans/level_division_headers3 ===

$81978438070842* Quotient


=== trans/panel_matrix_column_major ===

$90704227545058* Column major pixels


=== trans/complete_flower_text3 ===

$81122931510261* [center]QUEST [color=#e49f44]COMPLETE[/color][/center]


=== trans/panel_probewirebit_value ===

$24213353038685* [center]Value[/center]


=== trans/panel_counter16_input ===

$87154643308632*
[right]Increment / Overwrite
Overwrite value[/right]


=== trans/panel_matrix_color ===

$78812572100236* [center]Pixels / Flush[/center]


=== main_scripts/functions ===

$35675567872962* Counter does nothing with a 0 increment
$94410251595979* Circular dependency - The output of a component leads back to its own input. [url=circular_dependency]Read more[/url]
$39385804477995* Circular dependency - The output of a component leads back to its own input. [url=circular_dependency]Read more[/url]
$83854326413007* Custom component "{name}" has changed size and was removed from the schematic because it no longer fits.


=== ui/global_translations ===


#  4 letters max
$33873219185286* NAND

#  4 letters max
$36090730285143* NOR


=== trans/panel_decoder2_description ===

$29468245669811* [center]Turns 1 of the outputs on, based on the input[/center]


=== panel_sound_sound_picker ===

$73758040671294* Notes (click [i][/i] to replace)


=== trans/binary_racer_count_down2 ===

$23959994711260* Ready to race?


=== trans/level_capitalize_input ===

$23002150617591* Input


=== trans/level_division_headers2 ===

$43313037226215* Remainder


=== misc/dir_delete ===

$94436541903929* Architectures: {list}
$17985924005596* It contains {nr} schematics.
$51791491383290* The custom component is used in
$63013773025775* Are you sure you want to delete {file_name}?
$38011567415872* The folder is empty.
$57790786178566* Custom components: {list}


=== trans/schematics_menu_visible_label ===

$34084132835354* Visible in menu


=== rpg/maps/unseen_fruit/Lolbert ===

$77789556089413*
Earth fruit is so much better
than the the stew they normally serve


=== trans/panel_probewirebit_description ===

$36861847387280* Probes can be used to show values on custom components or link values to the program component


=== rpg/maps/overworld/cannon ===

$34523773807049* Laser Cannon


=== trans/panel_input_input_2 ===

$13656747150138* Input 3


=== trans/panel_mul_output ===

$55253255963402*
Lower half
Upper half


=== trans/panel_matrix_input2 ===

$11173083690745* [right]Enable X[/right]


=== main_scripts/rpg ===

$87641351044559* Nothing
$13202063774683* Wall
$57777174895519* Wall
$14021436258446* SEEING: [color=#e49f44]{looking_at}[/color]
$25433644956674* Killed by {who}
$64739179991428* Robot died!


=== rpg/maps/overworld/bed ===

$19781388766480* Bed
$41698807327261* I love looking at random furniture


=== levels/little_box ===

$19282543476901* 1
$16217965518477* B
$10891070331034* B


=== misc/add_assembly ===

$66747898777348* Add


=== trans/panels_config_delay_delay ===

$52499013005170* [right]Delay[/right]


=== components/Output16 ===

$48008022162230* 16 Bit Output


=== rpg/maps/prison/exit_door ===

$92379689291727* Door


=== rpg/maps/overworld/book_shelf ===

$29366577532389* Bookshelf
$26595142082551* A fine bookshelf


=== misc/rom_file_select_button ===

$29197716371312* Select file


=== rpg/maps/overworld/bush ===

$37683898820147* It is a bush
$93113262859645* Bush


=== trans/manual_text_program ===

$25326551844839*
The program component is a read only memory component, that can have its data programmed in assembly. To edit the assembly, click on the yellow edit icon in the corner of the component.

[center][img]dialogue/manual/program_edit.png[/img][/center]

In the middle of the screen you will see the code area, read more about the assembly [color=#4d82c5][url=Assembly]here[/url][/color].

On the left hand side of the assembly editor interface, you can add assembly codes (mnemonics). Assembly codes act as a replacement for numbers, so instead of remembering what number represents the AND instruction in your architecture, you can add "AND" to your assembly codes, making code easier to read and write.

[center][img]dialogue/manual/assembly_codes.png[/img][/center]

On the program component you will also find the "Watch state" button. 

[center][img]dialogue/manual/watch_state.png[/img][/center]

This can be used to connect the assembly editor to registers, counters or probes. This way, the state of your architecture can be inspected as you write code, without closing the editor.


=== levels/Arithmetic Engine ===

$87042161621333* CODE
$20357619206641* INPUT 2
$94622250037548* INPUT 1

#  Short because it will become the name of a custom component
$14243962965012* ALU


=== rpg/maps/unseen_fruit/fruit ===

$74585814142093* Blackberry
$59609837209455* Tomato
$15802853329735* Kiwi
$79445215329265* Pear
$18469474055437* Melon
$60053656119333* Golden apple
$51779877620644* Apple
$31466825108080* Orange


=== components/Output32z ===

$20432213737411* 32 Bit Switched Output


=== trans/panel_network_next_event ===

$80836714383432* Next [color=#39aa49]Event type[/color]


=== rpg/maps/overworld/gruliette ===

$83120363112787* Oh hi handsome
$61022705156373*
Oh god no, I'm done
with this quest
$84856635901648* IHHHhhhh my heart melts!
$16008092188500* Gruliette
$58406047748371*
Only if he can bring
me a pink flower
$18919563572338*
Do you want to go
on a date with Dumio?
$68101445990611* Here is the pink flower
$68725679456014*
*schmuck* bring this kiss
to Dumio for me
$73977053028689* Oh hi handsome
$50949692384224* My ears hurt
$35813418867082* That's random


=== trans/manual_text_matrix ===

$75170402412137*
[b]Showing letters[/b]
It just so happens that a pixel space of 5x7 while small is still able to render letters nicely. By adding an extra row and column, these letters will also look nice when put next to each other. 

[center][img]dialogue/manual/matrix_letter.png[/img][/center]


[b]Small tileable screen[/b]
Rotating the component, you get 8x6 pixels, which has a nice 4:3 aspect ratio and tiling these, you can get most resolutions you might want. The way the pins are set up on this component was specifically designed to allow tiling. Imagine the naive pin design where each component is enabled by a single bit. This would require you to connect 1 wire for each component. In this situation, the number of wires needed for a tiled screen would scale with the area, while the gap needed to fit wires between components, would scale with the circumference. 

[center][img]dialogue/manual/tilable_screen.png[/img][/center]

Instead, by having 2 enable pins, one wire can enable a whole row and another a whole column. This way, a single component can be selected by its unique row and column combination. Further, fitting the rest of the data on the same wires, means that the horizontal and vertical gaps only need to be 1 square wide. This component visually takes up half a square extra on all sides, such that these components can be tiled up pixel perfectly, with 1 square hidden between them for running wires.


=== trans/panel_fileloader_description ===

$72892007399429*
The file rom outputs the content of a file 8 bytes at a time.

The highest 64 bit address (0xFFFFFFFFFFFFFFFF) is special and outputs the length of the file in bytes.


=== trans/manual_text_top_truth ===

$83283949590490* AND gate


=== trans/level_negative_Label ===

$11951041502381* Change what each bit means by changing the numbers.


=== trans/level_byte_equal_description ===

$38686097566531* [center]Check if the bytes are equal[/center]


=== trans/level_program_text ===

$38014836341470*
[right][color=#e49f44]Code
Input[/color][/right]


=== components/Clock ===

$29674337035619* Placing the clock will divide ticks into 2 phases. The clock is [OFF] in the early phase and [ON] in the late phase. All memory components load in the early phase and save in the late phase.
$73207565196164* Clock


=== rpg/maps/overworld/blankidork ===

$19291766514049* We are fighting the rebellion


=== trans/level_delay_level_description ===

$24326379952614* Create a circuit that costs 5 GATEs and 6 DELAY


=== trans/panel_max_data_len_max_data_length ===

$88063177433135* [right]Max data length[/right]


=== trans/panel_sound_command ===

$66510191984141* Command


=== trans/panel_input_up ===

$97169317610794* Up


=== trans/level_spacial_invasion_description ===

$44980627299841* [center]Shoot the space rats![/center]


=== component_panels/SpriteDisplay ===

$94199633210330* None


=== trans/levels_computing_input ===

$23173159754705*
Code
Input


=== trans/ticks_sec ===

$16026817441460* ticks/sec


=== rpg/maps/boss_room/tricky ===

$36278362971660* No no no!!
$48425443153584* I hate hate hate
$83674875280936* Do not be shy
$55557864347967* Baaaaaaad
$46678960551148* NO NO NO
$34049297531488* please come come
$45293657348934* Hahahah
$62754542093871* Shoot shoot shoot
$44499633447481* I can't wait
$45196756331738* tricksy
$96717076976482* Turn back. My chest
$39217019822298* GIGIGIGIGI
$83023298467462* GIGIGIGIG
$54218005116072* Bad bad bad
$88481545304668* GIIIIIII
$83172011939489* do not be scared
$58217446676216* Rip tricksy


=== components/Ashr32 ===

$57867060876326* Arithmetic Shift right
$77878150504241* Shifts bits to the right, while maintaining the sign of the number


=== trans/panels_sound_description ===

$65379881141228*
[b][color=#e49f44]Command type[/color][/b]
[code]0[/code] No request
[code]1[/code] [color=#e49f44]Play[/color]
[code]2[/code] [color=#e49f44]Reset and play[/color]
[code]3[/code] [color=#e49f44]Stop[/color]


=== trans/panel_and_description ===

$92999392068622* [center]Bitwise XORs two inputs[/center]


=== rpg/maps/overworld/oozla ===

$72859292385128*
They say it can do arithmetic 
using any two registers,
storing the result anywhere
$41963791304712*
Alas it is but a story for children,
such heroes exists only in fairytales
$91713298019390*
His computer is said to
load more than 1 byte at a time
$43108829077557*
He is fabled to create a
powerful computer and 
solve the radioactive waste problem 
that threatens this ship
$60555049113315*
Some say it will have at least 
4 bit memory addresses, 
addressing 16 memory locations
$52580048139802* Prophecy speaks of a hero to come


=== misc/FileInput ===

$47320399181598* File not selected


=== rpg/maps/prison ===

$63369063884491* Bad robot!


=== levels/saving_gracefully ===

$14837033157870* ACTION


=== trans/component_panels_sprite_inputs ===

$89388086235988*
[right][color=#e49f44]Command type[/color]
Layer ID
Position
Size[/right]


=== trans/rpg_hats_exit ===

$71200030457801* Exit


=== misc/overture_add_assembly ===

$10565133223872* Never
$62421757655527* Name a code and click save.
$24281479096246* When [color=#2b8738]result[/color] {condition}
$63525237058165* Copy from {source} to {destination}
$32873193471770* UNUSED
$88446594314360* Immediate: {number}
$94278717238239* Always
$79398554520691* {opcode} {reg_1} and {reg_2}
$72740868980397* {condition} copy {register} to counter


=== trans/level_unseen_fruit_description ===

$96313037592447* [center]Use the robot to scan the fruit[/center]


=== trans/panel_keyboard_right ===

$20567291616294*
Key value
Key up


=== trans/level_flood_predictor_description ===

$24034386495895* Find the best location for the Pirate's Plunge


=== main_scripts/dialogue ===

$95287273202819* SAVE
$43114846393781* LOAD
$65118645692603* instruction
$53308028631558* instructions
$52150443679969* Continue
$89787506720574* Close
$66207112287034* TIP


=== trans/instructions_the_robot ===

$26621808961883*
[color=#e49f44]0[/color] Move right
[color=#e49f44]1[/color] Move down
[color=#e49f44]2[/color] Move left
[color=#e49f44]3[/color] Move up
[color=#e49f44]4[/color] Enjoy the moment
[color=#e49f44]5[/color] Use action [color=#a9a9a9](enter)[/color]
[color=#e49f44]6[/color] Shoot laser [color=#a9a9a9](tab)[/color]


=== levels/binary_count_down ===

$56999237564848* {x} seconds left
$41793938939207* Time out


=== rpg/maps/overworld/dr draco ===

$23996965687702* I am unhappy with my bed\nThe blanket doesn't cover my feet


=== trans/manual_text_edit_instructions ===

$75786562031150*
After you complete the level "Turing Complete" the instruction panel allows you to manually edit instructions. This is useful if you wish to build your own computers.

If you just finished the OVERTURE computer and see something weird, odds are you may have changed the definitions.

Each row has a label and 8 bits you can set to either[img]dialogue/on.png[/img], [img]dialogue/off.png[/img] or [img]dialogue/any.png[/img] (wildcard). When using the instruction panel, if the bitpattern matches a row, the label will be shown.


=== components/BeepBox ===

$16713357727925* Sound component with 256 customizable tones and pitch control.
$11041223461254* Sound


=== trans/panel_sound_inputs ===

$45047777963599*
[right]Note
Pitch (signed)[/right]


=== misc/program_edit ===

$57861256694537* Bytes {bytes_from} - {bytes_to}


=== trans/component_output_sum_label ===


#  Label appears on the component and must be 3 letters or less
$92505830860215* SUM


=== trans/panel_program_1edit_program ===

$65592803016716* Edit program


=== levels/byte_nor ===

$60887380748746* Create a circuit that NORs two bytes bitwise.


=== trans/component_panel_latency_RichTextLabel ===

$29766254362093*
[right]Load
Save
Address
Save value
Save value
Save value
Save value[/right]


=== trans/level_wide_instructions_description ===

$60538893544456* [center]Build a wide instruction program component[/center]


=== levels/call_ret/yes ===

$27017757250898* Yes


=== trans/manual_component_factory_text ===

$42847481618884*
Open the component factory by clicking on this button [img]dialogue/manual/component_factory_icon.png[/img] in the upper left bar.

The component factory allows you to create your own components. The logic you place determine the behavior of the custom component and the layout determines the shape. 

The input and output components you place become pins on the component. Like with other components, a component output leading back to its input causes a circular dependency. Outputs having a path back to inputs causes a circular dependency for custom components, even if the insides of the component would suggest there shouldn't be one. Not having to worry about the inside of components reduces the complexity of larger builds, however this strict abstraction can be inconvenient under certain circumstances. In that case, use the unbuffered pins. They allow bidirectional flow and use the insides of the component to check for circular dependencies.

Probes placed in custom components will show on their layout and can display values inside. Probes can be connected to other custom components, so that deeply nested values can be displayed. Values probed in this way can also be connected to the program component.

For the component factory, the file manager also manages the custom components. The file names decide the component name and the folder structure decides the components placement in the menu.


=== trans/panel_screen_description ===

$31014036880257* The screen shows the visuals of levels in the main campaign.


=== misc/controls2 ===

$98116750645182* Read the manual page


=== misc/level_close ===

$79455494572697* Continue


=== trans/manual_text_network ===

$70445160410129*
[b]Overview[/b]
The "Network" component gives you low level access to networking. In general you manipulate your network by sending the component [color=#e49f44]Commands[/color] and when update [color=#39aa49]Events[/color] return from the network they get queued up and you process them one at a time. To keep track of different simultaneous connections [color=#dd6576]Connection ID[/color]s are used.

These are the command types you can send to the component and their arguments:
[code]0[/code] No command
[code]1[/code] [color=#e49f44]Listen[/color] ([color=#dd6576]Port[/color])
[code]2[/code] [color=#e49f44]Connect[/color] ([color=#dd6576]IP[/color], [color=#dd6576]Port[/color])
[code]3[/code] [color=#e49f44]Send data[/color] ([color=#dd6576]Connection ID[/color], [color=#dd6576]Data[/color], [color=#dd6576]Data length[/color])
[code]4[/code] [color=#e49f44]Close[/color] ([color=#dd6576]Connection ID[/color])
[code]5[/code] [color=#e49f44]Read next event[/color]
[i]See component panel for which pin correspond to which argument.[/i]

Command types [color=#e49f44]Listen[/color] and [color=#e49f44]Connect[/color] outputs the [color=#dd6576]Connection ID[/color] of the new connection.

For 2 programs to [color=#e49f44]Send data[/color] to each other, one program must first [color=#e49f44]Listen[/color] (called a server) on a [color=#dd6576]Port[/color] and the other must then [color=#e49f44]Connect[/color] (called a client), using the [color=#dd6576]IP[/color] of the listening program and the [color=#dd6576]Port[/color] it selected. Once the connection is established, the server and client function exactly the same.

Notice an [color=#dd6576]IP[/color] is a 32 bit number, normally written as 4 bytes with dots in between (example: 127.0.0.1). In this simulator you reverse the order of the bytes, so 127.0.0.1 becomes 0x0100007F. 0x0100007F is always your computers loopback address and you can use this to connect programs running on the same computer.

You can detect when events happen on the network, by checking the "Next event type" pin. These are the event types:
[code]0[/code] No event
[code]1[/code] [color=#39aa49]Incoming connection[/color] ([color=#dd6576]Connection ID[/color], [color=#dd6576]Port[/color])
[code]2[/code] [color=#39aa49]Connect complete[/color]
[code]3[/code] [color=#39aa49]Receive data[/color] ([color=#dd6576]Connection ID, Data[/color], [color=#dd6576]Data length[/color])
[code]4[/code] [color=#39aa49]Connection closed[/color] ([color=#dd6576]Connection ID[/color] / [color=#dd6576]Error code[/color])

[color=#39aa49]Incoming connection[/color] only happens after a [color=#e49f44]Listen[/color]. Use the [color=#dd6576]Port[/color] to distinguish between listeners (it is not possible to listen to the same port twice at the same time).

[color=#39aa49]Connect complete[/color] only happens after a [color=#e49f44]Connect[/color], wait for this before you start sending data.

You may send or receive between 1 and 8 bytes of data at a time, use the [color=#dd6576]Data length[/color] to decide.

A connection may be either "possibly open" or "closed". There is no way to know if a connection is actually open other than sending data. The underlying network protocols were designed like this for reliability and speed, it is not a limitation of the simulator.

If you get a [color=#dd6576]Connection ID[/color] of -1, this means there was an error connecting.


=== trans/level_negative_Label2 ===

$39515538046175* Toggle the bits to see the result.


=== component_panels/NoteSound ===

$77965930443088* Custom
$13027096115070* Default
$22175469402467* None


=== trans/levels_description ===

$33755630709299* Defeat NAK 02 to save the world


=== trans/manual_sprite_display ===

$28358052747011*
The sprite screen is a 640x480 pixel sprite display. Before using the sprite screen, you first need to attach a sprite map, which is a PNG image that contains all your sprites. Click on the component and set the sprite map in the component panel.

The first input pin is the [color=#e49f44]Command type[/color], the meaning of the next 3 pins depends on the command type as shown below. The sprite ID is always a 8 bit number and all other values (position and size) are always pairs of 16 bit values.

[table=2]
[cell]0[/cell] [cell]No command[/cell]
[cell]1[/cell] [cell][color=#e49f44]Load sprite[/color] (Sprite ID, Position, Size)[/cell]
[cell][/cell][cell][i]Sets the sprite of this ID. The position is the upper left corner of the sprite map.[/i][/cell]
[cell]2[/cell] [cell][color=#e49f44]Set position[/color] (Sprite ID, Position)[/cell]
[cell][/cell][cell][i]This sets the X and Y coordinate of the loaded sprite.[/i][/cell]
[/table]

[center][img=300]dialogue/manual/sprite_screen.png[/img][/center]

Note that sprites are layered in the order of their ID and to remove a layer, simply load a sprite with a width and height of 0.


=== levels/conditions ===


#  Short because it will become the name of a custom component
$40613359684193* COND


=== levels/full_adder ===

$74173200701943* SUM
$67922993335648* CARRY


=== trans/panel_rom_inputs ===

$52400325164412*
[right]Load
[i][color=#aaaaaa](sandbox only)[/color][/i] Save
Address
Save value[/right]


=== trans/schematics_description ===

$39347262933523* Description


=== trans/level_component_factory_error ===

$49014901714855* Map squares can only contain one input or output node.


=== trans/panel_rom_setting_labels ===

$95314636684817*
[right]Size (bytes):

Data width:[/right]


=== nim/backend_lib/custom_component ===

$64951951489108* Input
$94864122622568* Output
$94089252493268* Pin


=== trans/panel_neg_description ===

$64810753197096* [center]Negates a number[/center]


=== trans/level_ram_component_RichTextLabel2 ===

$92123299522120* [center]Expected states[/center]


=== trans/level_turing_complete_text ===

$83740652063566*
Code
Input


=== trans/panel_not_description ===

$36935580253321* [center]Negates the input bitwise[/center]


=== rpg/maps/overworld/barrel7 ===

$19922359571673* Stew Barrel


=== misc/instruciton_rule_label ===

$70464083627337* Label


=== trans/manual_text_rgb ===

$52915933943906*
This simulator uses 3 byte RGB colors for some components. Color are 1 byte each, the byte value determining the intensity of each color: 
[color=#e3243f]RRRRRRRR[/color][color=#55ff55]GGGGGGGG[/color][color=#3333ff]BBBBBBBB[/color]


=== misc/ide_new_program ===

$20397881687313* new_program


=== trans/level_alu1_code ===

$20619700446604* [center]OR[/center]


=== components/Program64 ===

$38310909505735* Program
$56360155051962* Next counter value {address} is not the start of an assembly code line (disable this warning in settings)


=== rpg/maps/overworld/table ===

$53798109572704* It is a table...
$74345816549611* Table


=== trans/complete_unlocks ===


# When you have a circuit where the wires can settle in either of 2 different stable states, you have a basis for memory. The next state will depend on the values the wires had last tick. Such wires are called "latches".
$45250062735373* Unlocks


=== components/DivMod8 ===

$37666366877853* Divide and mod 2 numbers
$44959426271423* Divide


=== trans/panel_decoder1_output ===

$29665974488253*
Output 1
Output 2


=== trans/panel_program_1inputs_label ===

$85358271811851* [right]Edit linked components[/right]


=== misc/add_bottom ===

$86446054110623* Add


=== trans/panel_neg_input ===

$92219875545393* [right]Input[/right]


=== trans/level_byte_mux_description ===

$20538476756633* [center]Output the correct input byte[/center]


=== nim/backend_lib/schematics ===


#  Default assembly instructions
$98784625122112* add 68\nreg0_to_reg1 129\nreg0_to_reg2 130\nreg3_to_out 158
$80846046332059* CONDITION
$43762760711440* 3 Conditions.assembly
$36937658066516* AND
$25378963142694* Input 2
$34688070019016* Compute
$80984147393241* OPCODE
$89904818945500* Always
$23343928938611* CALCULATION
$41384200516164* Input
$21762287720058* Default
$52720470197560* Condition
$58135326697989* Output
$45098916684469* Never
$69871887031160* Result
$77964040770330* ADD
$90287016519308* UNUSED
$17900992684779* Input
$23756602199977* NAND
$52155313885654* Condition
$55885017410507* 0 Immediate load.assembly
$38851635485723* 2 Calculations.assembly
$84575312492466* 1 Register copying.assembly

#  Default program the first time you open binary search
$28582639590579* # Create labels like this\nlabel my_label\n# This is a constant\nconst PI 3\n# Also you actually should take a look\n# at the assembly manual entry
$49207579633810* NOR
$97114869841400* Output
$23432943836287* example
$15697933732634* Instruction
$98586044504803* Copy
$87661236574161* Immediate
$43346201280348* SUB
$50176996454102* IMMEDIATE
$38100656631435* COPY

#  Default code seen when first opening the IDE
$46866969777934* # I am a comment!\n# Below calculates 1 + 1\n1\nreg0_to_reg1\nreg0_to_reg2\nadd\nreg3_to_out
$63749396808309* OR
$47025412277453* Input 1


=== trans/level_program_description ===

$44017405175202* [center]Replace the input code with the program component.[/center]


=== rpg/maps/cave/slime ===

$57665128042496* Slime goo
$58067186899637* Slime


=== trans/level_byte_or_text ===

$99465606386164*
[right]
[color=#e49f44]Input[/color]
Desired output
Current output
[/right]


=== trans/level_odd_ticks_RichTextLabel3 ===

$89508766742523*
[right]Input
Desired output
Current output[/right]


=== misc/continue ===

$93610185550877* Continue


=== trans/panel_decoder1_description ===

$77460843937727* [center]Turns 1 of the outputs on, based on the input[/center]


=== trans/panel_register8_inputs ===

$13844216291005*
[right]Load
Save
Save value[/right]


=== trans/level_dependency_description ===

$81238724438578* Make a circuit where the input of a component depends on its own output


=== components/InputConditions ===

$71663355611979* NEVER
$84163806515429* =0
$63748269806736* <0
$71425442219836* ≤0
$53856166132912* ≥0
$48141874604871* ALWAYS
$73802979424247* ≠0
$45382684265289* >0


=== rpg/maps/boss_room/door2 ===

$48251720560954* Dungeon door


=== rpg/maps/overworld/derpoo ===

$86147085986248* HISS
$46228887292914* GRRR
$95162531064211* HISS


=== levels/the_bus ===

$28468611444223* OUT 1
$67465559416096*
This level has 2 byte inputs and 2 byte outputs. Your goal is to copy from 1 of the inputs to 1 of the outputs.
	
The first bit input, determines which input you should copy from. The second bit input determines which output you should copy to.

Check [color=#e63e5b][url=the_bus]this hint[/url][/color] if you get stuck.
$52612646660710* IN 0
$97971478046986* IN 1
$73177632038973* OUT 0
$71428957264410* IN 1
$96958133516462* FROM
$91318587712792* TO
$72709070901789* OUT 1
$36872979988941* IN 0
$33984298968523* OUT 0


=== components/ConfigDelay ===

$31412778600732* Configurable delay
$84124565448643* Adds a configurable amount of delay. Useful for delay debugging or controlling the latency of the latency RAM.


=== components/DivMod16 ===

$42657221816637* Divide and mod 2 numbers
$22319923069746* Divide


=== trans/level_sorter_description ===

$60186094365455* Sort the values


